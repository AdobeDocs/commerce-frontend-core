{"version":3,"file":"component---src-pages-ui-components-concepts-modifier-md-0d38dbd08b9d15e7cf05.js","mappings":"kSAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,iBADR,kBAGA,sDAAuC,cAAGC,WAAW,IACjD,KAAQ,oCAD2B,OAAvC,gDAEgE,cAAGA,WAAW,IAC1E,KAAQ,yBADoD,+BAFhE,8DAIsG,cAAGA,WAAW,IAChH,KAAQ,sBAD0F,iDAJtG,oJAM8M,cAAGA,WAAW,IACxN,KAAQ,0FADkM,iCAN9M,+GAQyJ,cAAGA,WAAW,IACnK,KAAQ,8CAD6I,iBARzJ,MAWA,eACE,GAAM,0BADR,2BAGA,mBAAG,uBAAYA,WAAW,KAAvB,kBAAH,8LAA2P,uBAAYA,WAAW,KAAvB,iBAA3P,iDAAqW,uBAAYA,WAAW,KAAvB,UAArW,MACA,sIAAuH,cAAGA,WAAW,IACjI,KAAQ,oCAD2G,OAAvH,oBAGA,eACE,GAAM,6BADR,8BAGA,0FACA,mBAAG,mBAAQA,WAAW,KAAnB,aACH,yEAA0D,cAAGA,WAAW,IACpE,KAAQ,iHACP,uBAAYA,WAAW,KAAvB,6DAFL,iCAGA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,gBAApB,gGACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,gBAApB,mCAAgH,cAAGA,WAAW,KAC1H,KAAQ,yCADoG,YAAhH,oDAIF,uCACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,+mDAsDL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,4EAA6D,uBAAYA,WAAW,KAAvB,0CAA7D,iDACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,qhBAaL,4BAAa,uBAAYA,WAAW,KAAvB,2DAAb,UAA0H,cAAGA,WAAW,IACpI,KAAQ,0GAD8G,iBAA1H,MAGA,8DAA+C,uBAAYA,WAAW,KAAvB,UAA/C,uEACA,mBAAG,mBAAQA,WAAW,KAAnB,aACH,gEAAiD,cAAGA,WAAW,IAC3D,KAAQ,6GACP,uBAAYA,WAAW,KAAvB,yDAFL,yCAGA,mDACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,2PAQL,2CAA4B,cAAGA,WAAW,IACtC,KAAQ,iIACP,uBAAYA,WAAW,KAAvB,gFAFL,KAKH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/ui-components/concepts/modifier.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"php-modifiers\"\n    }}>{`PHP modifiers`}</h1>\n    <p>{`This topic describes how to use `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/php\"\n      }}>{`PHP`}</a>{` modifiers that are the server-side part of `}<a parentName=\"p\" {...{\n        \"href\": \"configuration-flow.md\"\n      }}>{`UI components configuration`}</a>{`. Using modifiers is optional and might be necessary when `}<a parentName=\"p\" {...{\n        \"href\": \"xml-declaration.md\"\n      }}>{`static declaration in XML configuration files`}</a>{` is not suitable for the tasks. For example, in cases when additional data should be loaded from database. Or the other specific example is the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/php/tutorials/admin/custom-product-creation-form/\"\n      }}>{`default product creation form`}</a>{`, for which the modifier is a place where validations are added to display only certain fields for certain `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/product-types\"\n      }}>{`product types`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"general-implementation\"\n    }}>{`General implementation`}</h2>\n    <p><inlineCode parentName=\"p\">{`DataProvider()`}</inlineCode>{` is a PHP part of a UI component, a class responsible for the component's data and metadata preparation. The pool of modifiers (virtual type) is injected to this data provider using the `}<inlineCode parentName=\"p\">{`__construct()`}</inlineCode>{` method. The pool's preference is defined in `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`.`}</p>\n    <p>{`So in runtime, the component structure set in the modifier is merged with the configuration that comes from the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/xml\"\n      }}>{`XML`}</a>{` configuration.`}</p>\n    <h2 {...{\n      \"id\": \"add-a-custom-php-modifier\"\n    }}>{`Add a custom PHP modifier`}</h2>\n    <p>{`To add a PHP modifier for a UI component, take the following steps:`}</p>\n    <p><strong parentName=\"p\">{`Step 1:`}</strong></p>\n    <p>{`In your custom module, add a class that implements `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/DataProvider/Modifier/ModifierInterface.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Ui\\\\DataProvider\\\\Modifier\\\\ModifierInterface`}</inlineCode></a>{` with the following methods:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`modifyData()`}</inlineCode>{`: for modifying UI component's data (for example, the list of options for a select element)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`modifyMeta()`}</inlineCode>{`: for modifying UI component's `}<a parentName=\"li\" {...{\n          \"href\": \"https://glossary.magento.com/metadata\"\n        }}>{`metadata`}</a>{` (for example, name, label, description, type)`}</li>\n    </ul>\n    <p>{`Sample modifier:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\nuse Magento\\\\Ui\\\\DataProvider\\\\Modifier\\\\ModifierInterface;\n\nclass Example implements ModifierInterface\n{\n    public function modifyMeta(array $meta)\n    {\n        $meta['test_fieldset_name'] = [\n            'arguments' => [\n                'data' => [\n                    'config' => [\n                        'label' => __('Label For Fieldset'),\n                        'sortOrder' => 50,\n                        'collapsible' => true\n                    ]\n                ]\n            ],\n            'children' => [\n                'test_field_name' => [\n                    'arguments' => [\n                        'data' => [\n                            'config' => [\n                                'formElement' => 'select',\n                                'componentType' => 'field',\n                                'options' => [\n                                    ['value' => 'test_value_1', 'label' => 'Test Value 1'],\n                                    ['value' => 'test_value_2', 'label' => 'Test Value 2'],\n                                    ['value' => 'test_value_3', 'label' => 'Test Value 3'],\n                                ],\n                                'visible' => 1,\n                                'required' => 1,\n                                'label' => __('Label For Element')\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n        ];\n\n        return $meta;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function modifyData(array $data)\n    {\n        return $data;\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Step 2:`}</strong></p>\n    <p>{`Declare your modifier in your module Di configuration `}<inlineCode parentName=\"p\">{`<Your_Module_dir>/etc/adminhtml/di.xml`}</inlineCode>{`. This declaration looks like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<virtualType name=\"%YourNamespace\\\\YourModule\\\\DataProvider\\\\Modifier\\\\Pool%\" type=\"Magento\\\\Ui\\\\DataProvider\\\\Modifier\\\\Pool\">\n     <arguments>\n         <argument name=\"modifiers\" xsi:type=\"array\">\n             <item name=\"modifier_name\" xsi:type=\"array\">\n                 <item name=\"class\" xsi:type=\"string\">%YourNamespce\\\\YourModule\\\\Modifier\\\\YourModifierClass%</item>\n                 <item name=\"sortOrder\" xsi:type=\"number\">10</item>\n             </item>\n         </argument>\n     </arguments>\n</virtualType>\n`}</code></pre>\n    <p>{`where `}<inlineCode parentName=\"p\">{`YourNamespace\\\\YourModule\\\\DataProvider\\\\Modifier\\\\Pool`}</inlineCode>{` is a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/php/development/components/dependency-injection/#dependency-types\"\n      }}>{`virtual class`}</a>{`.`}</p>\n    <p>{`(If you want to use this sample in your `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{`, replace the sample values with the real names of your entities.)`}</p>\n    <p><strong parentName=\"p\">{`Step 3:`}</strong></p>\n    <p>{`To use your modifier, add a dependency on `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/DataProvider/Modifier/PoolInterface.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Ui\\\\DataProvider\\\\Modifier\\\\PoolInterface`}</inlineCode></a>{` to your UI component data provider.`}</p>\n    <p>{`Sample dependency injection:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<type name=\"%YourNamespce\\\\YourModule\\\\Ui\\\\DataProvider\\\\YourDataProviderClass%\">\n    <arguments>\n        <argument name=\"pool\" xsi:type=\"object\">%YourNamespace\\\\YourModule\\\\DataProvider\\\\Modifier\\\\Pool%</argument>\n    </arguments>\n</type>\n`}</code></pre>\n    <p>{`For illustration see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/Ui/DataProvider/Product/Form/Modifier/LayoutUpdate.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Catalog\\\\Ui\\\\DataProvider\\\\Product\\\\Form\\\\Modifier\\\\LayoutUpdate`}</inlineCode></a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}