{"version":3,"file":"component---src-pages-guide-translations-theory-md-a6b644fbb665197de949.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/guide/translations/theory.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"theme-strings\"\n    }}>{`Theme strings`}</h1>\n    <p>{`This topic describes how to add theme strings so that the i18n tool can collect and add the strings to the dictionary.`}</p>\n    <p>{`Your custom theme may contain new strings that are not present in out-of-the-box themes.\nTo ensure your theme displays correctly with any language applied on a store view, verify the unique strings of your theme are added to the translation `}<a parentName=\"p\" {...{\n        \"href\": \"https://devdocs.magento.com/guides/v2.4/config-guide/cli/config-cli-subcommands-i18n.html\"\n      }}>{`i18n tool`}</a>{` when `}<a parentName=\"p\" {...{\n        \"href\": \"https://devdocs.magento.com/guides/v2.4/config-guide/cli/config-cli-subcommands-i18n.html#config-cli-subcommands-xlate-dict\"\n      }}>{`generating the dictionary`}</a>{`.\nThen when a new `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/language-package\"\n      }}>{`language package`}</a>{` is created and used to translate a store view, all theme strings are also translated.`}</p>\n    <h2 {...{\n      \"id\": \"strings-added-in-phtml-templates\"\n    }}>{`Strings added in .phtml templates`}</h2>\n    <p>{`To ensure that your new string is added to the dictionary and translated, use the `}<inlineCode parentName=\"p\">{`__('<your_string>')`}</inlineCode>{` method when outputting a string in a `}<a parentName=\"p\" {...{\n        \"href\": \"../templates/index.md\"\n      }}>{`.phtml template`}</a>{`.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?= __('Create Backup') ?>\n`}</code></pre>\n    <p>{`If your string contains a variable, to add a placeholder for this variable in the dictionary, use syntax similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?= __('Hello %1', $yourVariable) ?>\n`}</code></pre>\n    <p>{`In this example, the `}<em parentName=\"p\">{`'Hello %1'`}</em>{` string is added to the dictionary when the i18n tool is run.`}</p>\n    <h2 {...{\n      \"id\": \"strings-added-in-email-templates\"\n    }}>{`Strings added in email templates`}</h2>\n    <p>{`If your theme contains `}<a parentName=\"p\" {...{\n        \"href\": \"../templates/email.md\"\n      }}>{`custom email templates`}</a>{`, their strings can be added to the dictionary as well.\nTo add the email template strings to the dictionary, use the `}<inlineCode parentName=\"p\">{`{{trans}}`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"../templates/email.md#localization\"\n      }}>{`directive`}</a>{`.`}</p>\n    <p>{`Custom email templates `}<a parentName=\"p\" {...{\n        \"href\": \"../templates/email.md#admin-based-customizations\"\n      }}>{`added using the Admin panel`}</a>{` are not stored in the file system, and their strings are not added to the dictionary.`}</p>\n    <p>{`To ensure that your new string is added to the dictionary and translated, use the `}<inlineCode parentName=\"p\">{`{{trans}}`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"../templates/email.md#localization\"\n      }}>{`directive`}</a>{` when outputting a string in an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Customer/view/frontend/email/account_new.html\"\n      }}>{`email template`}</a>{`.`}</p>\n    <p>{`For example:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When only a string is added in the email template:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`{{trans \"Lorem Ipsum is simply dummy text of the printing\"}}\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When only a string is added with a variable value in the email template:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`{{trans \"%items items\" items=\"numItems\"}}\n`}</code></pre>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"strings-added-in-ui-component-templates\"\n    }}>{`Strings added in UI component templates`}</h2>\n    <p>{`To ensure that the text you add in `}<inlineCode parentName=\"p\">{`.html`}</inlineCode>{` templates of UI components is added to the dictionary, mark the text using the `}<inlineCode parentName=\"p\">{`i18n`}</inlineCode>{` custom binding. The following code samples illustrate how to use custom bindings:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a string is added in the scope of an HTML element, both of the following examples result in the same output:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<span data-bind=\"i18n: 'Sign In'\"></span>\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<span translate=\"'Sign In'\"></span>\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a string is added with no binding to an HTML element, both of the following examples result in the same output:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<!-- ko i18n: 'You have no items in your shopping cart.' --><!-- /ko -->\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<translate args=\"'You have no items in your shopping cart.'\"/>\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a string is added as an attribute of an HTML element:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<input type=\"text\" data-bind=\"attr: {placeholder: $t('First Name')}\" />\n`}</code></pre>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"strings-added-in-ui-components-configuration-files\"\n    }}>{`Strings added in UI components configuration files`}</h2>\n    <p>{`To ensure that the text you add in UI components configuration `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` files is added to the dictionary, use the `}<inlineCode parentName=\"p\">{`translate`}</inlineCode>{` attribute. Set the attribute to true for the corresponding element: `}<inlineCode parentName=\"p\">{`translate=true`}</inlineCode></p>\n    <p>{`In this example, the `}<em parentName=\"p\">{`Delete`}</em>{` string is added to the dictionary when the i18n tool is run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<item name=\"label\" xsi:type=\"string\" translate=\"true\">Delete</item>\n`}</code></pre>\n    <p>{`Translated strings that originate from `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` files will not render unless they are called with a `}<inlineCode parentName=\"p\">{`__(<variable>)`}</inlineCode>{` method in `}<inlineCode parentName=\"p\">{`.php`}</inlineCode>{` files. In this example, you would use a call similar to the following to display the translated `}<em parentName=\"p\">{`Delete`}</em>{` string.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`__($this->config->getData('label'))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"strings-added-in-underscore-templates\"\n    }}>{`Strings added in Underscore templates`}</h2>\n    <p>{`To ensure that the text you add in `}<inlineCode parentName=\"p\">{`.html`}</inlineCode>{` Underscore templates is collected by the `}<inlineCode parentName=\"p\">{`i18n`}</inlineCode>{` tool, use the `}<inlineCode parentName=\"p\">{`_.i18n('')`}</inlineCode>{` Underscore function.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a string is added to the template:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<%= _.i18n('Hello') %>\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If the string contains a variable, use the variable placeholder:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<%= _.i18n('Hello %1').replace('%1', yourVariable) %>\n`}</code></pre>\n        <p parentName=\"li\">{`In this example, the `}<em parentName=\"p\">{`'Hello %1'`}</em>{` string is added to the dictionary when the i18n tool is run.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"strings-added-in-js-files\"\n    }}>{`Strings added in .js files`}</h2>\n    <p>{`To ensure that the text you add in a `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file is collected by the i18n tool and added to the dictionary:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Link the `}<inlineCode parentName=\"p\">{`mage/translate`}</inlineCode>{` library:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`define (['jquery', 'mage/translate'], function ($, $t) {...});\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Use the `}<inlineCode parentName=\"p\">{`$.mage.__('')`}</inlineCode>{` function when adding a string:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`$.mage.__('<string>');\n`}</code></pre>\n        <p parentName=\"li\">{`or`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`$t('<string>');\n`}</code></pre>\n        <p parentName=\"li\">{`If your string contains a variable, to add a placeholder for this variable to the string stored in the dictionary, use the following syntax:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`$.mage.__('Hello %1').replace('%1', yourVariable);\n`}</code></pre>\n        <p parentName=\"li\">{`or`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`$t('Hello %1').replace('%1', yourVariable);\n`}</code></pre>\n      </li>\n    </ol>\n    <p>{`In this example, the `}<inlineCode parentName=\"p\">{`'Hello %1'`}</inlineCode>{` string is added to the dictionary when the i18n tool is run.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}