{"version":3,"file":"component---src-pages-ui-components-concepts-literals-md-d5f10a92a92df11c47a4.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/ui-components/concepts/literals.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"template-literals\"\n    }}>{`Template literals`}</h1>\n    <p>{`The application provides for the use of template literals in UI components. Template literals are strings that can contain embedded expressions. They were introduced into JavaScript with ES2015 and were called \"template strings\" in early editions of the ES2015 / ES6 specification. Since it is a relatively new part of JavaScript, some browsers, such as Internet Explorer 11, do not support the specification. Per the specification standard, back-ticks (`}<inlineCode parentName=\"p\">{`\\``}</inlineCode>{`) are used instead of a single quote (`}<inlineCode parentName=\"p\">{`'`}</inlineCode>{`) or double quote (`}<inlineCode parentName=\"p\">{`\"`}</inlineCode>{`) to delineate a template string. Due to the lack of browser support, the application has a JavaScript class that will parse certain strings with a single quote (`}<inlineCode parentName=\"p\">{`'`}</inlineCode>{`) in the same way a browser that supports the specification would parse one with back-ticks.`}</p>\n    <p>{`Template literals can contain expressions which will be evaluated in the current KnockoutJS context. These expressions can contain nearly any valid JavaScript. They must start with a dollar sign and be surrounded with curly braces. `}<strong parentName=\"p\">{`Anything inside the following will be evaluated as an expression`}</strong>{`: `}<inlineCode parentName=\"p\">{`\\${  }`}</inlineCode>{`. For example, they can be used—and often are—to access properties of the KnockoutJS context like this: `}<inlineCode parentName=\"p\">{`'\\${ $.submitUrl }'`}</inlineCode>{`. They can be used to call functions (`}<inlineCode parentName=\"p\">{`'\\${ $.loadForm($.formUrl) }'`}</inlineCode>{`), or whatever: `}<inlineCode parentName=\"p\">{`'\\${ 20 + 13 }'`}</inlineCode>{`. These expressions are parsed in `}<inlineCode parentName=\"p\">{`/lib/web/mage/utils/template.js`}</inlineCode>{`.`}</p>\n    <p>{`Template literals allow UI Components to easily assign dynamic values to class properties. More specifically, they provide an integration layer between a particular KnockoutJS context and a JavaScript class.`}</p>\n    <h2 {...{\n      \"id\": \"defaults-class-property\"\n    }}><inlineCode parentName=\"h2\">{`defaults`}</inlineCode>{` class property`}</h2>\n    <p>{`UI Components are `}<a parentName=\"p\" {...{\n        \"href\": \"class.md\"\n      }}>{`associated with JavaScript classes`}</a>{` to handle behavior on the client side. These should extend one of the core classes to provide a base level of functionality. Inside the child class, a `}<inlineCode parentName=\"p\">{`defaults`}</inlineCode>{` property can be provided.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`defaults`}</inlineCode>{` property should be an object and is handled in a special way. Each property of `}<inlineCode parentName=\"p\">{`defaults`}</inlineCode>{` becomes a class property upon initialization. This happens in the `}<inlineCode parentName=\"p\">{`initConfig()`}</inlineCode>{` method of `}<inlineCode parentName=\"p\">{`magento/module-ui/view/base/web/js/lib/core/class.js`}</inlineCode>{`. Every item in `}<inlineCode parentName=\"p\">{`defaults`}</inlineCode>{` is passed through a `}<inlineCode parentName=\"p\">{`template()`}</inlineCode>{` function which evaluates template literals.`}</p>\n    <p>{`As a result, every `}<inlineCode parentName=\"p\">{`defaults`}</inlineCode>{` child property is handled with what could be viewed as a two step process:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Evaluate the value of the property for expressions. For example: `}<inlineCode parentName=\"li\">{`'\\${ $.submitUrl }'`}</inlineCode>{` could become `}<inlineCode parentName=\"li\">{`'https://example.com/contact/form/submit/'`}</inlineCode>{` (more on that later).`}</li>\n      <li parentName=\"ol\">{`Assign that property/value to the class itself. As a result `}<inlineCode parentName=\"li\">{`class.defaults.submitUrl`}</inlineCode>{` would become `}<inlineCode parentName=\"li\">{`class.submitUrl`}</inlineCode>{`.`}</li>\n    </ol>\n    <p>{`This part is important because it means that JavaScript classes that extend `}<inlineCode parentName=\"p\">{`Class`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`magento/module-ui/view/base/web/js/lib/core/class.js`}</inlineCode>{`) can use the `}<inlineCode parentName=\"p\">{`defaults`}</inlineCode>{` property to assign properties to the class itself and leverage template literals during that process without any work on your part.`}</p>\n    <h3 {...{\n      \"id\": \"the--separator\"\n    }}>{`The `}<inlineCode parentName=\"h3\">{`:`}</inlineCode>{` separator`}</h3>\n    <p>{`Certain properties of the `}<inlineCode parentName=\"p\">{`defaults`}</inlineCode>{` object are processed by an additional core JavaScript class: `}<inlineCode parentName=\"p\">{`links.js`}</inlineCode>{` (located: `}<inlineCode parentName=\"p\">{`magento/module-ui/view/base/web/js/lib/core/element/links.js`}</inlineCode>{`). The object keys in `}<inlineCode parentName=\"p\">{`defaults`}</inlineCode>{` are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`links`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`imports`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`exports`}</inlineCode></li>\n    </ul>\n    <p>{`They can be used to interact with other UI Component JavaScript classes. While the full use of them is a separate topic, those values can use a colon (`}<inlineCode parentName=\"p\">{`:`}</inlineCode>{`) to separate an expression, which should evaluate to a UI Component's name, from the properties to be accessed in that class. Take this example: `}<inlineCode parentName=\"p\">{`'\\${ $.provider }:user.theme'`}</inlineCode>{`. If the `}<inlineCode parentName=\"p\">{`\\${ $.provider }`}</inlineCode>{` expression evaluates to the name of a UI Component that is currently in the registry, that component will be loaded and the value of its `}<inlineCode parentName=\"p\">{`user.theme`}</inlineCode>{` property returned.`}</p>\n    <p>{`As a result, a template literal used in the value of one the objects listed above can be used to succinctly access data from an `}<em parentName=\"p\">{`entirely different`}</em>{` UI Component JavaScript class.`}</p>\n    <h3 {...{\n      \"id\": \"template-literal--context\"\n    }}>{`Template literal `}<inlineCode parentName=\"h3\">{`$`}</inlineCode>{` context`}</h3>\n    <p>{`Perhaps the most important part of template literals in the application is the `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` object that can be used inside expressions. (Remember an expression is anything within `}<inlineCode parentName=\"p\">{`\\${ }`}</inlineCode>{`.) The `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` provides access to the `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` context in the JavaScript class where the template literals are. To take it a step further, `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{` (and the related `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{`) is the KnockoutJS context for the template that can be bound to the UI Component. This object should not be confused with the `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` that marks the beginning of an expression. The `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` object can only appear inside of an expression. Here is an example: `}<inlineCode parentName=\"p\">{`\\${ $.submitUrl }`}</inlineCode>{`: the `}<inlineCode parentName=\"p\">{`$`}</inlineCode>{` references the current KnockoutJS context, and `}<inlineCode parentName=\"p\">{`.submitUrl`}</inlineCode>{` will return the `}<inlineCode parentName=\"p\">{`provider`}</inlineCode>{` property from that object.`}</p>\n    <h3 {...{\n      \"id\": \"ignoretmpls-property\"\n    }}><inlineCode parentName=\"h3\">{`ignoreTmpls`}</inlineCode>{` property`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ignoreTmpls`}</inlineCode>{` property is an object that prevents template processing for selected properties.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`return Element.extend({\n    defaults: {\n        value: 'some component value',\n        propertyIgnoreTempls: '\\${ $.value }', // template literals will be ignored for this property\n        ignoreTmpls: {\n            propertyIgnoreTempls: true\n        } // ignoreTmpls object contains a list of properties with template literals ignored\n    }\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Perhaps the most useful aspect of template literals is the ability to access other UI Component JavaScript classes in the registry so we will use this as an example. First, there are a few things to explain.`}</p>\n    <p>{`UI Components can have a `}<inlineCode parentName=\"p\">{`<item name=\"config\" xsi:type=\"array\">...</item>`}</inlineCode>{` node in the primary XML declaration file (`}<a parentName=\"p\" {...{\n        \"href\": \"xml-declaration.md#example-of-a-basic-components-configuration-file\"\n      }}>{`see an example`}</a>{`). In that file, a `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{` element can be added with a path reference to the RequireJS file. That file is loaded into the registry when it runs on the frontend and other JavaScript files can then access it by the `}<em parentName=\"p\">{`name`}</em>{` of the UI Component instead of the path to the file itself. The name often will look something like this: `}<inlineCode parentName=\"p\">{`example_component.example_component`}</inlineCode>{`.`}</p>\n    <p>{`Names of other registered modules can be added to the server side configuration (XML or PHP) that is output through JSON. Those names can then be easily accessed in the JavaScript on the frontend. In the following example, the other UI Component's name will be obtained with a template literal in the `}<inlineCode parentName=\"p\">{`imports`}</inlineCode>{` object. When this JavaScript file is loaded, it will process the template literal and look up the name in the registry. If found, it will load that class. Because there is a colon (`}<inlineCode parentName=\"p\">{`:`}</inlineCode>{`), it will go on to find the property that is accessed in the other JavaScript class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`return Element.extend({\n    defaults: {\n        template: 'Example_Component/message-list',\n        imports: {\n            messages: '\\${ $.messageHandler }:data.userMessages'\n        }\n    },\n\n    // ...\n\n    initialize: function() {\n        this._super();\n        this.addHtmlClassesToMessages();\n    },\n\n    addHtmlClassesToMessages: function() {\n        this.messages.forEach(function(currentValue) {\n            currentValue['htmlClass'] = 'message message--' + currentValue['type'];\n        });\n    }\n\n    // ...\n})\n`}</code></pre>\n    <p>{`Notice how the `}<inlineCode parentName=\"p\">{`addHtmlClassesToMessages()`}</inlineCode>{` method accesses the `}<inlineCode parentName=\"p\">{`messages`}</inlineCode>{` property of `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`. When the class was initialized, the `}<inlineCode parentName=\"p\">{`data.userMessages`}</inlineCode>{` array was obtained from the `}<inlineCode parentName=\"p\">{`$.messageHandler`}</inlineCode>{` UI Component and was then assigned to the primary object.`}</p>\n    <p>{`In the template, the messages can be displayed like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!-- File: app/code/Example/Component/view/frontend/web/template/message-list.html -->\n<div>\n  <ul data-bind=\"foreach: messages\" class=\"message-list\">\n      <li data-bind=\"text: content, css: htmlClass\"></li>\n  </ul>\n</div>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"conclusion\"\n    }}>{`Conclusion`}</h3>\n    <p>{`Template literals provide a simple and concise way to evaluate expressions. In Magento, they facilitate a great way to load data into a Javascript class. They also play a part in interacting with other classes to create a fully interactive frontend framework.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}