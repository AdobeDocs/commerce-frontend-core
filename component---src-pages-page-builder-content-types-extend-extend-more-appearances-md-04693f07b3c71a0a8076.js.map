{"version":3,"file":"component---src-pages-page-builder-content-types-extend-extend-more-appearances-md-04693f07b3c71a0a8076.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/content-types/extend/extend-more-appearances.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"extend-another-appearance\"\n    }}>{`Extend another appearance`}</h1>\n    <p>{`Out of the box, Page Builder provides a variety of interactive CSS styling options for your content types. For example, Page Builder's `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` content type provides options for setting heading types (`}<inlineCode parentName=\"p\">{`h1`}</inlineCode>{` through `}<inlineCode parentName=\"p\">{`h6`}</inlineCode>{`), text alignments, border properties, margins, and paddings. It also lets users apply one or more static CSS classes by entering them into a text input field.`}</p>\n    <p>{`But what if you want to give users even more styling options? For example, maybe you want to add Heading color options. Or Heading text-style options. This topic shows you how to use the `}<inlineCode parentName=\"p\">{`attribute`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` configuration options to style the elements in your content types.`}</p>\n    <h2 {...{\n      \"id\": \"understanding-the-big-picture\"\n    }}>{`Understanding the big picture`}</h2>\n    <p>{`Before we dive into the details of using different configuration options, let's take a moment to understand the role of the configurations within a Page Builder content type. The following diagram shows how the configuration options for the `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` content type connect or map the inputs from the Heading form to the bindings in the Heading templates and finally to the rendered output in the DOM:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/87b66afde7630532c160c20aa58a740b/styling-big-picture.svg\",\n        \"alt\": \"Understanding the big picture\"\n      }}></img></p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Heading Form`}</strong>{` (`}<inlineCode parentName=\"p\">{`pagebuilder_heading_form.xml`}</inlineCode>{`). This form inherits from the `}<inlineCode parentName=\"p\">{`pagebuilder_base_form.xml`}</inlineCode>{`, which provides most of the input fields for the Heading. The Heading form itself provides input fields selecting an `}<inlineCode parentName=\"p\">{`appearance`}</inlineCode>{`, entering the `}<inlineCode parentName=\"p\">{`heading_text`}</inlineCode>{`, and selecting a `}<inlineCode parentName=\"p\">{`heading_type`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`h1`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`h6`}</inlineCode>{`). The text to the left of each field specifies which form the field comes from, the `}<inlineCode parentName=\"p\">{`heading_form`}</inlineCode>{` or the `}<inlineCode parentName=\"p\">{`base_form`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Heading Configuration`}</strong>{` (`}<inlineCode parentName=\"p\">{`heading.xml`}</inlineCode>{`). The main purpose of all content type configuration files is to provide the data mapping between the form fields and the HTML templates. Configurations map to fields with matching names.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Heading Template`}</strong>{` (`}<inlineCode parentName=\"p\">{`master.html`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{`). Template Knockout bindings map to configurations using their element naming hierarchies.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Heading Rendered in DOM`}</strong>{`. Page Builder renders the template bindings to the DOM. The `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` configurations are rendered as custom attributes for the element. The `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` configurations are rendered as inline styles on the element. The `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` configuration is rendered as a `}<inlineCode parentName=\"p\">{`class`}</inlineCode>{` attribute for the element. And the `}<inlineCode parentName=\"p\">{`<html>`}</inlineCode>{` configuration renders the text for the element.`}</p>\n      </li>\n    </ol>\n    <p>{`You may not understand all the details right away, but we hope that by providing the whole story up front, it will help you start putting the pieces together as you work your way through this topic and play with the companion example module.`}</p>\n    <h2 {...{\n      \"id\": \"install-the-example-module\"\n    }}>{`Install the example module`}</h2>\n    <p>{`To help you get started and follow along, we created an example module you can clone and install from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/commerce-docs/PageBuilderStylingOptions\"\n      }}>{`commerce-docs/PageBuilderStylingOptions`}</a>{`. The instructions for installing the module are provided from the `}<inlineCode parentName=\"p\">{`README`}</inlineCode>{` file on the repo.`}</p>\n    <p>{`For this example module, we chose to extend the `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` content type by adding three new Heading fields: `}<inlineCode parentName=\"p\">{`Heading Colors`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Heading Styles`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`Heading Opacity`}</inlineCode>{`, as shown here:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1024px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"48.4375%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/1f1e1fa229a4fb87a0f52b39958b18c3/5530d/heading-extension-using-attributes-and-style.webp 320w\", \"/commerce-frontend-core/static/1f1e1fa229a4fb87a0f52b39958b18c3/0c8fb/heading-extension-using-attributes-and-style.webp 640w\", \"/commerce-frontend-core/static/1f1e1fa229a4fb87a0f52b39958b18c3/d71bc/heading-extension-using-attributes-and-style.webp 1024w\"],\n            \"sizes\": \"(max-width: 1024px) 100vw, 1024px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/1f1e1fa229a4fb87a0f52b39958b18c3/dd4a7/heading-extension-using-attributes-and-style.png 320w\", \"/commerce-frontend-core/static/1f1e1fa229a4fb87a0f52b39958b18c3/0f09e/heading-extension-using-attributes-and-style.png 640w\", \"/commerce-frontend-core/static/1f1e1fa229a4fb87a0f52b39958b18c3/42a19/heading-extension-using-attributes-and-style.png 1024w\"],\n            \"sizes\": \"(max-width: 1024px) 100vw, 1024px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-frontend-core/static/1f1e1fa229a4fb87a0f52b39958b18c3/42a19/heading-extension-using-attributes-and-style.png\",\n            \"alt\": \"Add an appearance\",\n            \"title\": \"Add an appearance\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p><em parentName=\"p\">{`Extended `}<inlineCode parentName=\"em\">{`Heading`}</inlineCode>{` form with color, text style, and opacity options`}</em></p>\n    <p>{`The example module provides all the code used here to describe how to style elements using `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes. It also shows the use of a custom converter for our `}<inlineCode parentName=\"p\">{`opacity`}</inlineCode>{` style to ensure that users can enter the opacity as a percentage.`}</p>\n    <h2 {...{\n      \"id\": \"steps-overview\"\n    }}>{`Steps overview`}</h2>\n    <p>{`An overview of the steps for styling content type elements is shown here, followed by the detailed instructions for each step:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/b51f6263f2db00eaeb66fb5477124d0d/how-to-style-using-attributes.svg\",\n        \"alt\": \"Style content types using attributes\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"step-1-add-form-fields-for-user-input\"\n    }}>{`Step 1: Add form fields for user input`}</h2>\n    <p>{`First, you need to add fields to your content type's form so that users have a way of selecting or entering styling options. In our Heading extension, we add three new fields:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`heading_color`}</inlineCode>{` for selecting a color for the Heading text`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`heading_style`}</inlineCode>{` for selecting text styles`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`heading_opacity`}</inlineCode>{` for entering an opacity for the Heading text`}</p>\n      </li>\n    </ul>\n    <p>{`The UI component form for these fields looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<form xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Ui:etc/ui_configuration.xsd\">\n    <fieldset name=\"general\">\n        <field name=\"heading_color\" sortOrder=\"25\" formElement=\"select\" component=\"Magento_PageBuilder/js/form/element/visual-select\">\n            <argument name=\"data\" xsi:type=\"array\">\n                <item name=\"config\" xsi:type=\"array\">\n                    <item name=\"default\" xsi:type=\"string\">brand-black</item>\n                </item>\n            </argument>\n            <settings>\n                <dataType>text</dataType>\n                <label translate=\"true\">Heading Colors</label>\n                <elementTmpl>Magento_PageBuilder/form/element/visual-select</elementTmpl>\n                <notice translate=\"true\">Select from one of the approved Acme brand colors.</notice>\n            </settings>\n            <formElements>\n                <select>\n                    <settings>\n                        <options class=\"BrandColorSource\"/>\n                    </settings>\n                </select>\n            </formElements>\n        </field>\n        <field name=\"heading_style\" sortOrder=\"26\" formElement=\"select\" component=\"Magento_PageBuilder/js/form/element/visual-select\">\n            <argument name=\"data\" xsi:type=\"array\">\n                <item name=\"config\" xsi:type=\"array\">\n                    <item name=\"default\" xsi:type=\"string\">style-default</item>\n                </item>\n            </argument>\n            <settings>\n                <dataType>text</dataType>\n                <label translate=\"true\">Heading Styles</label>\n                <elementTmpl>Magento_PageBuilder/form/element/visual-select</elementTmpl>\n            </settings>\n            <formElements>\n                <select>\n                    <settings>\n                        <options class=\"TextStyleSource\"/>\n                    </settings>\n                </select>\n            </formElements>\n        </field>\n        <field name=\"heading_opacity\" sortOrder=\"27\" formElement=\"input\">\n            <argument name=\"data\" xsi:type=\"array\">\n                <item name=\"config\" xsi:type=\"array\">\n                    <item name=\"default\" xsi:type=\"string\">100</item>\n                </item>\n            </argument>\n            <settings>\n                <label translate=\"true\">Heading Opacity</label>\n                <additionalClasses>\n                    <class name=\"admin__field-small\">true</class>\n                </additionalClasses>\n                <addAfter translate=\"true\">%</addAfter>\n                <validation>\n                    <rule name=\"validate-number\" xsi:type=\"boolean\">true</rule>\n                    <rule name=\"greater-than-equals-to\" xsi:type=\"number\">0</rule>\n                    <rule name=\"less-than-equals-to\" xsi:type=\"number\">100</rule>\n                </validation>\n            </settings>\n        </field>\n    </fieldset>\n</form>\n`}</code></pre>\n    <p><em parentName=\"p\">{`New fields to extend the `}<inlineCode parentName=\"em\">{`Heading`}</inlineCode>{` form`}</em></p>\n    <p>{`The names of these fields, `}<inlineCode parentName=\"p\">{`heading_color`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`heading_style`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`heading_opacity`}</inlineCode>{` are particularly important. They are the same names you must assign to their corresponding `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes for the `}<inlineCode parentName=\"p\">{`<element>`}</inlineCode>{` in your configuration file. We'll do that next.`}</p>\n    <h2 {...{\n      \"id\": \"step-2-add-element-configuration-options\"\n    }}>{`Step 2: Add element configuration options`}</h2>\n    <p>{`Adding `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes to an `}<inlineCode parentName=\"p\">{`<element>`}</inlineCode>{` configuration is how you add custom attributes and inline styles to the DOM, respectively. Both `}<inlineCode parentName=\"p\">{`<attributes>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes have a `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` property and a `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` property.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` properties of these nodes `}<strong parentName=\"p\">{`must`}</strong>{` match the corresponding field's name in the form. Using the same names (between config and field) is what allows Page Builder to map the field's input values to the template's output values.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` property for `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` nodes defines the name of the custom attribute added to the element's DOM so you can use it for targeting the element with your attribute-based CSS classes (step 4).`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` property for `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes specifies the CSS property (in `}<inlineCode parentName=\"p\">{`snake_case`}</inlineCode>{`) added to the element's `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` attribute in the DOM.`}</p>\n    <p>{`In our extended Heading configuration, we added two `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` nodes and one `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` node, with names corresponding to the previously defined `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` form fields: `}<inlineCode parentName=\"p\">{`heading_color`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`heading_style`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`heading_opacity`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<!-- heading.xml config extension -->\n\n<?xml version=\"1.0\"?>\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_PageBuilder:etc/content_type.xsd\">\n     <type name=\"heading\">\n        <appearances>\n            <appearance name=\"default\">\n                <elements>\n                    <element name=\"main\">\n                        <attribute name=\"heading_color\" source=\"data-heading-color\"/>\n                        <attribute name=\"heading_style\" source=\"data-heading-style\"/>\n                        <style name=\"heading_opacity\" source=\"opacity\"/>\n                    </element>\n                </elements>\n            </appearance>\n        </appearances>\n    </type>\n</config>\n`}</code></pre>\n    <p><em parentName=\"p\">{`NewConfiguration attributes for the `}<inlineCode parentName=\"em\">{`Heading`}</inlineCode>{` element`}</em></p>\n    <p>{`In this example, the `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` values for the nodes (`}<inlineCode parentName=\"p\">{`data-heading-color`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`data-heading-style`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`opacity`}</inlineCode>{`) renders in the DOM for the Heading's `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element (which is `}<inlineCode parentName=\"p\">{`h2`}</inlineCode>{` by default), as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<h2 data-content-type=\"heading\"\n    data-appearance=\"default\"\n    data-heading-color=\"brand-green\"\n    data-heading-style=\"style-italic\"\n    data-element=\"main\"\n    style=\"...; opacity: 1;\">\n    My Heading Text\n</h2>\n`}</code></pre>\n    <p>{`The values shown for these attributes and inline-style properties are set by the user from the form fields. In this example, the user selected `}<inlineCode parentName=\"p\">{`brand-green`}</inlineCode>{` from the `}<inlineCode parentName=\"p\">{`heading_color`}</inlineCode>{` field, `}<inlineCode parentName=\"p\">{`style-italic`}</inlineCode>{` from the `}<inlineCode parentName=\"p\">{`heading_style`}</inlineCode>{` field, and entered `}<inlineCode parentName=\"p\">{`100`}</inlineCode>{` (in percent) in the `}<inlineCode parentName=\"p\">{`heading_opacity`}</inlineCode>{` field (converted to the decimal form you see here using a custom converter you will find in the example).`}</p>\n    <p>{`But before Page Builder can render the `}<inlineCode parentName=\"p\">{`attributes`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{` to the DOM as shown, we need to add the necessary Knockout bindings to our HTML templates.`}</p>\n    <h2 {...{\n      \"id\": \"step-3-add-template-knockout-bindings\"\n    }}>{`Step 3: Add template Knockout bindings`}</h2>\n    <p>{`In our example module, we are using the Heading's native `}<inlineCode parentName=\"p\">{`master.html`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{` templates, which already have all the Knockout bindings needed to render our new `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` configurations to the DOM. But its critical that you understand what these bindings are and what they do. Because without them, Page Builder renders nothing to the screen.`}</p>\n    <p>{`To render our configuration options in the DOM (as described in step 2), we must ensure that Knockout bindings are in our HTML templates. The three Knockout bindings for the `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` configuration nodes are `}<inlineCode parentName=\"p\">{`attr`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ko-style`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{`, respectively:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<h2 attr=\"data.main.attributes\" ko-style=\"data.main.style\" css=\"data.main.css\"...></h2>\n`}</code></pre>\n    <p>{`For all three Knockout bindings, `}<inlineCode parentName=\"p\">{`data.main`}</inlineCode>{` references the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element in the configuration file (`}<inlineCode parentName=\"p\">{`heading.xml`}</inlineCode>{`). The other binding references are as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`For the `}<inlineCode parentName=\"p\">{`attr`}</inlineCode>{` binding, the `}<inlineCode parentName=\"p\">{`attributes`}</inlineCode>{` property references the collection of `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` nodes defined for the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`For the `}<inlineCode parentName=\"p\">{`ko-style`}</inlineCode>{` binding, the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` property references the collection of `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes defined for the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`For the `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` binding, the `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` property references the `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` node defined for the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element.`}</p>\n      </li>\n    </ul>\n    <p>{`You need to add these Knockout bindings to the Heading's `}<inlineCode parentName=\"p\">{`master.html`}</inlineCode>{` template (as well as the `}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{` template), as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!-- Heading master.html -->\n\n<h1 if=\"data.main.heading_type() == 'h1'\" attr=\"data.main.attributes\" ko-style=\"data.main.style\" css=\"data.main.css\" html=\"data.main.html\"></h1>\n<h2 if=\"data.main.heading_type() == 'h2'\" attr=\"data.main.attributes\" ko-style=\"data.main.style\" css=\"data.main.css\" html=\"data.main.html\"></h2>\n<h3 if=\"data.main.heading_type() == 'h3'\" attr=\"data.main.attributes\" ko-style=\"data.main.style\" css=\"data.main.css\" html=\"data.main.html\"></h3>\n<h4 if=\"data.main.heading_type() == 'h4'\" attr=\"data.main.attributes\" ko-style=\"data.main.style\" css=\"data.main.css\" html=\"data.main.html\"></h4>\n<h5 if=\"data.main.heading_type() == 'h5'\" attr=\"data.main.attributes\" ko-style=\"data.main.style\" css=\"data.main.css\" html=\"data.main.html\"></h5>\n<h6 if=\"data.main.heading_type() == 'h6'\" attr=\"data.main.attributes\" ko-style=\"data.main.style\" css=\"data.main.css\" html=\"data.main.html\"></h6>\n`}</code></pre>\n    <p><em parentName=\"p\">{`Knockout bindings for the Heading's `}<inlineCode parentName=\"em\">{`data.main`}</inlineCode>{` config elements`}</em></p>\n    <p>{`With these bindings in place, Page Builder will render them to the DOM, using the values from the form fields (as noted in step 2), to look something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<h2 data-content-type=\"heading\"\n    data-appearance=\"default\"\n    data-heading-color=\"brand-green\"\n    data-heading-style=\"style-italic\"\n    data-element=\"main\"\n    style=\"...; opacity: 1;\">\n    My Heading Text\n</h2>\n`}</code></pre>\n    <p>{`After you understand how Page Builder writes attributes and their user-selected values to the DOM, you can target the content type's `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element (`}<inlineCode parentName=\"p\">{`<h2>`}</inlineCode>{` in this example) using attribute-based CSS classes from our `}<inlineCode parentName=\"p\">{`_default.less`}</inlineCode>{` files. We'll do this next.`}</p>\n    <h2 {...{\n      \"id\": \"step-4-add-css-classes\"\n    }}>{`Step 4: Add CSS classes`}</h2>\n    <p>{`To target our DOM output, we want to use attribute-based CSS classes in our `}<inlineCode parentName=\"p\">{`_default.less`}</inlineCode>{` files for both the `}<inlineCode parentName=\"p\">{`adminhtml`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`frontend`}</inlineCode>{`, as shown here (from our module's adminhtml area):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`/*-- adminhtml _default.less attribute-based classes */\n/*-- the frontend  _default.less is the same, but without the .pagebuilder-stage wrapper */\n\n& when (@media-common = true) {\n    // Heading Colors\n    .pagebuilder-stage {\n        [data-heading-color='brand-black'] {\n            color: #333333;\n        }\n        [data-heading-color='brand-blue'] {\n            color: #007ab9;\n        }\n        [data-heading-color='brand-green'] {\n            color: #009900;\n        }\n        [data-heading-color='brand-red'] {\n            color: #990000;\n        }\n        [data-heading-color='brand-purple'] {\n            color: #990099;\n        }\n    }\n    // Heading Styles\n    [data-heading-style='style-default'] {\n        font-weight: normal;\n        font-style: normal;\n    }\n    [data-heading-style='style-bold'] {\n        font-weight: bold;\n    }\n    [data-heading-style='style-italic'] {\n        font-style: italic;\n    }\n    [data-heading-style='style-quotes'] {\n        &:before {\n            content: '\\\\201C';\n        }\n        &:after {\n            content: '\\\\201D';\n        }\n    }\n}\n`}</code></pre>\n    <p><em parentName=\"p\">{`Attribute-based CSS classes`}</em></p>\n    <p>{`To provide end users with styling options in the Admin UI's form fields, we can add a variety of different CSS properties for each available value. This makes it easy to target and style your content type elements in both small and large ways, depending on your use cases.`}</p>\n    <h2 {...{\n      \"id\": \"discussion\"\n    }}>{`Discussion`}</h2>\n    <p>{`Page Builder provides three configuration options for styling the elements in your content types. You can:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` nodes to style content-type elements with attribute-based CSS classes.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes to style content-type elements with specific CSS properties.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` nodes to style content-type elements with one or more static CSS classes chosen by the end user.`}</p>\n      </li>\n    </ul>\n    <p>{`You can add the `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes many times to a content-type `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{`. But you can add the `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` node only once per element. Refer to `}<a parentName=\"p\" {...{\n        \"href\": \"#understanding-the-css-node\"\n      }}>{`Understanding the `}<inlineCode parentName=\"a\">{`<css>`}</inlineCode>{` node`}</a>{` for more information.`}</p>\n    <p>{`To aid in our discussion of these configuration nodes and how to use them, we will refer to the `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` configuration from `}<inlineCode parentName=\"p\">{`heading.xml`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`PageBuilder/view/adminhtml/pagebuilder/content_type/heading.xml`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<!-- snippet from heading.xml -->\n\n<element name=\"main\">\n    <style name=\"text_align\" source=\"text_align\"/>\n    <style name=\"border\" source=\"border_style\" converter=\"Magento_PageBuilder/js/converter/style/border-style\"/>\n    <style name=\"border_color\" source=\"border_color\"/>\n    <style name=\"border_width\" source=\"border_width\" converter=\"Magento_PageBuilder/js/converter/style/border-width\"/>\n    <style name=\"border_radius\" source=\"border_radius\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n    <style name=\"display\" source=\"display\" converter=\"Magento_PageBuilder/js/converter/style/display\" preview_converter=\"Magento_PageBuilder/js/converter/style/preview/display\"/>\n    <style name=\"margins\" storage_key=\"margins_and_padding\" reader=\"Magento_PageBuilder/js/property/margins\" converter=\"Magento_PageBuilder/js/converter/style/margins\"/>\n    <style name=\"padding\" storage_key=\"margins_and_padding\" reader=\"Magento_PageBuilder/js/property/paddings\" converter=\"Magento_PageBuilder/js/converter/style/paddings\"/>\n    <attribute name=\"name\" source=\"data-content-type\"/>\n    <attribute name=\"appearance\" source=\"data-appearance\"/>\n    <tag name=\"heading_type\"/>\n    <html name=\"heading_text\" converter=\"Magento_PageBuilder/js/converter/html/tag-escaper\"/>\n    <css name=\"css_classes\"/>\n</element>\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`<tag>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<html>`}</inlineCode>{` nodes are beyond the scope of this topic, but like the other nodes, they also map to fields in a form. In this case, the `}<inlineCode parentName=\"p\">{`<tag>`}</inlineCode>{` node maps to the Heading's `}<inlineCode parentName=\"p\">{`heading_type`}</inlineCode>{` field and the `}<inlineCode parentName=\"p\">{`<html>`}</inlineCode>{` node maps to the `}<inlineCode parentName=\"p\">{`heading_text`}</inlineCode>{` field from the `}<inlineCode parentName=\"p\">{`pagebuilder_heading_form.xml`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"understanding-and-using-style-nodes\"\n    }}>{`Understanding and using `}<inlineCode parentName=\"h3\">{`style`}</inlineCode>{` nodes`}</h3>\n    <p>{`By configuring `}<inlineCode parentName=\"p\">{`<elements>`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes, you can provide end users with a form field that changes a `}<em parentName=\"p\">{`specific`}</em>{` CSS property, such as we did with `}<inlineCode parentName=\"p\">{`opacity`}</inlineCode>{`.`}</p>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`heading.xml`}</inlineCode>{` config example, the `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes map to the same-named fields defined in the `}<inlineCode parentName=\"p\">{`pagebuilder_base_form.xml`}</inlineCode>{`. This form gives users the fields needed to change each of the CSS properties specified. When rendered to the DOM, Page Builder adds these `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{`-defined properties (and their user-entered values) to the inline `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` attribute of the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` DOM element, `}<inlineCode parentName=\"p\">{`<h1>`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`<h6>`}</inlineCode>{` depending on the Heading Type selected from the Heading's form.`}</p>\n    <p>{`For example, if a user selected a value for each of the styles defined in the `}<inlineCode parentName=\"p\">{`heading.xml`}</inlineCode>{` config, the inline `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` attribute in the storefront DOM would list the `}<inlineCode parentName=\"p\">{`property:values`}</inlineCode>{` for all the `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes defined, as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<h2 data-content-type=\"heading\"\n    data-element=\"main\"\n    style=\"text-align: left;\n           border-style: solid;\n           border-color: rgb(240, 240, 240);\n           border-width: 1px;\n           border-radius: 3px;\n           margin: 5px;\n           padding: 2px;\">\n    My Heading Text\n</h2>\n`}</code></pre>\n    <p>{`Each `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` node defined for the element's configuration gets added to the DOM as another CSS property in the element's `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` attribute. In the example module for this topic, we added `}<inlineCode parentName=\"p\">{`<style name=\"heading_opacity\" source=\"opacity\"/>`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`heading.xml`}</inlineCode>{` config. So when Page Builder renders the extended Heading content type in the DOM, it adds `}<inlineCode parentName=\"p\">{`opacity`}</inlineCode>{` to the existing list of CSS properties in the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` attribute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<h2 data-content-type=\"heading\"\n    data-element=\"main\"\n    style=\"text-align: left;\n           border-style: solid;\n           border-color: rgb(240, 240, 240);\n           border-width: 1px;\n           border-radius: 3px;\n           margin: 5px;\n           padding: 2px;\n           opacity: 1;\">\n    My Heading Text\n</h2>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"deciding-to-use-attribute-or-style-configurations\"\n    }}>{`Deciding to use `}<inlineCode parentName=\"h3\">{`attribute`}</inlineCode>{` or `}<inlineCode parentName=\"h3\">{`style`}</inlineCode>{` configurations`}</h3>\n    <p>{`As mentioned, adding an `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` node to an `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` configuration gives you a way to provide end users with a form field that can use `}<em parentName=\"p\">{`CSS classes`}</em>{`, allowing you to change `}<em parentName=\"p\">{`several`}</em>{` CSS properties at once. This can be more powerful that using `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` configurations that can only change single CSS properties. But depending on your use case, you may not need to use `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` configurations.`}</p>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` configurations is transparent to end users. But for you, the developer, the choice really depends on how much you need to change the element. If the user option needs to change the element significantly, you may want to use an `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` so you can apply CSS classes to the element. And if the user option is focused on making a simple property change to the element, you can use a `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` configuration.`}</p>\n    <h3 {...{\n      \"id\": \"understanding-the-css-node\"\n    }}>{`Understanding the `}<inlineCode parentName=\"h3\">{`css`}</inlineCode>{` node`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` config node is a bit different from the `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` nodes. The `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` node wasn't designed to be added to an element more than once like the other two nodes. Instead, it was designed to capture multiple CSS classes from a single form field and render those classes to the DOM within the `}<inlineCode parentName=\"p\">{`class`}</inlineCode>{` attribute. For this reason, it is currently not possible to add CSS classes to an element's `}<inlineCode parentName=\"p\">{`class`}</inlineCode>{` attribute from other form fields.`}</p>\n    <p>{`Out of the box, Page Builder maps the `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` config node (for each content type) to the `}<inlineCode parentName=\"p\">{`css_classes`}</inlineCode>{` input field from the `}<inlineCode parentName=\"p\">{`pagebuilder_base_form.xml`}</inlineCode>{`. For example, if you were to enter two CSS classes into this field within the Heading form, Page Builder would add the `}<inlineCode parentName=\"p\">{`class`}</inlineCode>{` attribute to the Heading's `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element (`}<inlineCode parentName=\"p\">{`<h2>`}</inlineCode>{`) and populate it with the CSS classes entered, as shown on the first line here:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"878px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"15.937499999999998%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/a249bf4cd90020c90095dbc2c88c4bba/5530d/css-class-input-output.webp 320w\", \"/commerce-frontend-core/static/a249bf4cd90020c90095dbc2c88c4bba/0c8fb/css-class-input-output.webp 640w\", \"/commerce-frontend-core/static/a249bf4cd90020c90095dbc2c88c4bba/8fd2c/css-class-input-output.webp 878w\"],\n            \"sizes\": \"(max-width: 878px) 100vw, 878px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/a249bf4cd90020c90095dbc2c88c4bba/dd4a7/css-class-input-output.png 320w\", \"/commerce-frontend-core/static/a249bf4cd90020c90095dbc2c88c4bba/0f09e/css-class-input-output.png 640w\", \"/commerce-frontend-core/static/a249bf4cd90020c90095dbc2c88c4bba/7bc11/css-class-input-output.png 878w\"],\n            \"sizes\": \"(max-width: 878px) 100vw, 878px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-frontend-core/static/a249bf4cd90020c90095dbc2c88c4bba/7bc11/css-class-input-output.png\",\n            \"alt\": \"CSS Classes input field\",\n            \"title\": \"CSS Classes input field\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<h2 class=\"fall-heading-style halloween-heading-style\"\n    data-content-type=\"heading\"\n    data-appearance=\"default\"\n    data-heading-color=\"brand-blue\"\n    data-heading-style=\"style-default\"\n    data-element=\"main\"\n    style=\"text-align: left; border-style: solid; border-color: rgb(240, 240, 240); border-width: 1px; border-radius: 3px; margin: 5px; padding: 2px; opacity: 1;\">\n    My Heading Text\n</h2>\n`}</code></pre>\n    <p>{`As mentioned, you can override the `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` node to map it to a different field name and/or type. You just can't use it more than once per element.`}</p>\n    <p>{`Regardless of the limitation, you can still use the `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` node to provide creative styling options for a content type. For example, if a merchant has a set of standard CSS classes they use during the year for holidays, you could map the `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` node to a `}<inlineCode parentName=\"p\">{`select`}</inlineCode>{` field that allows end users to choose from sets of merchant-approved classes with descriptive names, like Halloween styling, Christmas styling, and so on.`}</p>\n    <h2 {...{\n      \"id\": \"final-thoughts\"\n    }}>{`Final thoughts`}</h2>\n    <p>{`Knowing how to create new content styling options by connecting form inputs to template outputs is one of the most important skills to have as a Page Builder developer. And knowing how to make those connections using `}<inlineCode parentName=\"p\">{`<attribute>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`<css>`}</inlineCode>{` configurations will give you a variety of powerful and flexible content styling options to offer your end users. So get creative and have fun!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}