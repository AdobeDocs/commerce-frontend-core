{"version":3,"file":"component---src-pages-ui-components-howto-add-category-attribute-md-56dea3032d1164db728e.js","mappings":"uSAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,4BACH,6BACL,kBAAK,0RAAwR,uBAAYC,WAAW,KAAM,gBAA6B,SAAO,uBAAYA,WAAW,KAAM,gCAA6C,2BACxa,eACE,GAAM,+BACH,kCACL,kBAAK,2JACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,swCAsCP,eACE,GAAM,gCACH,mCACL,kBAAK,sEAAoE,uBAAYA,WAAW,KAAM,qBAAkC,wGAAsG,uBAAYA,WAAW,KAAM,qBAAkC,iBAAe,uBAAYA,WAAW,KAAM,+BAA4C,+BACrY,kBAAK,8GAA4G,uBAAYA,WAAW,KAAM,gBAA6B,kFAC3K,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,wpCAsBP,eACE,GAAM,0BACH,6BACL,mBAAG,cAAGA,WAAW,IACb,KAAQ,wGACL,+BAAmC,8BAA4B,cAAGA,WAAW,IAChF,KAAQ,mHACL,wBAA4B,MACnC,eACE,GAAM,gBACH,iBACL,kBAAK,gLAA8K,uBAAYA,WAAW,KAAM,qBAAkC,yJAAuJ,uBAAYA,WAAW,KAAM,UAAuB,SAAO,uBAAYA,WAAW,KAAM,cAA2B,0BAAwB,uBAAYA,WAAW,KAAM,WAAwB,sGACzkB,kBAAK,QAAM,uBAAYA,WAAW,KAAM,WAAwB,oCAAkC,uBAAYA,WAAW,KAAM,sEAAmF,yCAAuC,uBAAYA,WAAW,KAAM,WAAwB,gHAA8G,uBAAYA,WAAW,KAAM,UAAuB,0EAAwE,uBAAYA,WAAW,KAAM,6BAA0C,MAAI,uBAAYA,WAAW,KAAM,YAAyB,2BAAyB,uBAAYA,WAAW,KAAM,kBAA+B,sBAAoB,uBAAYA,WAAW,KAAM,cAA2B,wEAAsE,uBAAYA,WAAW,KAAM,WAAwB,yCAAuC,uBAAYA,WAAW,KAAM,eAA4B,yCAAuC,uBAAYA,WAAW,KAAM,cAA2B,kFACpnC,kBAAK,+GAA6G,uBAAYA,WAAW,KAAM,2BAAwC,2GAAyG,uBAAYA,WAAW,KAAM,6EAA0F,wCAAsC,uBAAYA,WAAW,KAAM,YAAyB,mGAAiG,uBAAYA,WAAW,KAAM,+BAA4C,oCAAkC,uBAAYA,WAAW,KAAM,qCAAkD,+HAC9wB,kBAAK,sNAGR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/ui-components/howto/add-category-attribute.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-a-category-attribute\"\n    }}>{`Add a category attribute`}</h1>\n    <p>{`Category attributes were automatically displayed in the admin panel of Magento 1. In Magento 2, it is necessary to explicitly render it with a UI Component. This is quite easy to do and provides a great degree of control over the form input. In the code examples below, replace `}<inlineCode parentName=\"p\">{`attribute_id`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Your Category Attribute Name`}</inlineCode>{` with your own values.`}</p>\n    <h2 {...{\n      \"id\": \"step-1-create-the-attribute\"\n    }}>{`Step #1: Create the attribute`}</h2>\n    <p>{`The following is a full example of an install script that creates a category attribute. If you already have a category attribute, it is not necessary.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// File: Namespace/Module/Setup/InstallData.php\n\nnamespace Namespace\\\\Module\\\\Setup;\n\nuse Magento\\\\Framework\\\\Setup\\\\{\n    ModuleContextInterface,\n    ModuleDataSetupInterface,\n    InstallDataInterface\n};\n\nuse Magento\\\\Eav\\\\Setup\\\\EavSetup;\nuse Magento\\\\Eav\\\\Setup\\\\EavSetupFactory;\n\nclass InstallData implements InstallDataInterface\n{\n    private $eavSetupFactory;\n\n    public function __construct(EavSetupFactory $eavSetupFactory) {\n        $this->eavSetupFactory = $eavSetupFactory;\n    }\n\n    public function install(ModuleDataSetupInterface $setup, ModuleContextInterface $context)\n    {\n        $eavSetup = $this->eavSetupFactory->create(['setup' => $setup]);\n        $eavSetup->addAttribute(\\\\Magento\\\\Catalog\\\\Model\\\\Category::ENTITY, 'attribute_id', [\n            'type'     => 'int',\n            'label'    => 'Your Category Attribute Name',\n            'input'    => 'boolean',\n            'source'   => 'Magento\\\\Eav\\\\Model\\\\Entity\\\\Attribute\\\\Source\\\\Boolean',\n            'visible'  => true,\n            'default'  => '0',\n            'required' => false,\n            'global'   => \\\\Magento\\\\Eav\\\\Model\\\\Entity\\\\Attribute\\\\ScopedAttributeInterface::SCOPE_STORE,\n            'group'    => 'Display Settings',\n        ]);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-2-display-the-attribute\"\n    }}>{`Step #2: Display the attribute`}</h2>\n    <p>{`The category UI Component is rendered with configuration from the `}<inlineCode parentName=\"p\">{`category_form.xml`}</inlineCode>{` file. All files with that name are merged together. As a result, you can add a field by creating a `}<inlineCode parentName=\"p\">{`category_form.xml`}</inlineCode>{` file in the `}<inlineCode parentName=\"p\">{`view/adminhtml/ui_component`}</inlineCode>{` directory in your module.`}</p>\n    <p>{`Here is a full example of adding a field under the \"Display Settings\" group. It is important to note that `}<inlineCode parentName=\"p\">{`attribute_id`}</inlineCode>{` should match the ID of the attribute that you created in the install script.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<!-- Namespace/Module/view/adminhtml/ui_component/category_form.xml -->\n<?xml version=\"1.0\"?>\n<form xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Ui:etc/ui_configuration.xsd\">\n    <fieldset name=\"display_settings\">\n        <field name=\"attribute_id\">\n            <argument name=\"data\" xsi:type=\"array\">\n                <item name=\"config\" xsi:type=\"array\">\n                    <item name=\"dataType\" xsi:type=\"string\">boolean</item>\n                    <item name=\"formElement\" xsi:type=\"string\">checkbox</item>\n                    <item name=\"label\" xsi:type=\"string\" translate=\"true\">Your Category Attribute Name</item>\n                    <item name=\"prefer\" xsi:type=\"string\">toggle</item>\n                    <item name=\"valueMap\" xsi:type=\"array\">\n                        <item name=\"true\" xsi:type=\"string\">1</item>\n                        <item name=\"false\" xsi:type=\"string\">0</item>\n                    </item>\n                    <item name=\"default\" xsi:type=\"number\">0</item>\n                </item>\n            </argument>\n        </field>\n    </fieldset>\n</form>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-3-upgrade-and-run\"\n    }}>{`Step #3: Upgrade and run`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://devdocs.magento.com/guides/v2.4/install-gde/install/cli/install-cli-subcommands-db-upgr.html\"\n      }}>{`Upgrade the database schema`}</a>{` to install the attribute `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/php/development/components/clear-directories/#how-to-clear-the-directories\"\n      }}>{`and clear your cache`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How it works`}</h2>\n    <p>{`UI Component configuration is merged. When you add a new file, the application will merge that with the base UI Component configuration file. In the example above, that is `}<inlineCode parentName=\"p\">{`category_form.xml`}</inlineCode>{`. The nodes inside of that reflect the structure of the base file. There are only two nodes necessary in this case before the custom field is added: `}<inlineCode parentName=\"p\">{`<form>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<fieldset>`}</inlineCode>{`. Inside of that, the `}<inlineCode parentName=\"p\">{`<field>`}</inlineCode>{` node is used to add a field with a name that matches the id of the attribute you want to render.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<field>`}</inlineCode>{` node is declared originally in `}<inlineCode parentName=\"p\">{`vendor/magento/module-ui/view/base/ui_component/etc/definition.xml`}</inlineCode>{`. If you open that file and look for `}<inlineCode parentName=\"p\">{`<field>`}</inlineCode>{`, you will notice that there is only a PHP class referencedâ€”nothing particularly helpful. This is where the `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` elements in the example above come in important. Notice the value of `}<inlineCode parentName=\"p\">{`<item name=\"formElement\">`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`checkbox`}</inlineCode>{`)? Now, if you look in `}<inlineCode parentName=\"p\">{`definition.xml`}</inlineCode>{`, you will find a `}<inlineCode parentName=\"p\">{`<checkbox>`}</inlineCode>{` node that has some configuration values. In the PHP class that the `}<inlineCode parentName=\"p\">{`<field>`}</inlineCode>{` element references, it looks up the `}<inlineCode parentName=\"p\">{`formElement`}</inlineCode>{` to use and loads that. As a result, `}<inlineCode parentName=\"p\">{`<checkbox>`}</inlineCode>{` is the node. In this case, that has the information that we are looking for.`}</p>\n    <p>{`One of those elements is particularly useful when determining what XML you need to provide for your field: `}<inlineCode parentName=\"p\">{`<item name=\"component\">`}</inlineCode>{`. That is a Javascript file that handles the functionality of the field. In our case, it is located in `}<inlineCode parentName=\"p\">{`vendor/magento/module-ui/view/base/web/js/form/element/single-checkbox.js`}</inlineCode>{`. If you open that file, there is a `}<inlineCode parentName=\"p\">{`defaults`}</inlineCode>{` object which contains values that can be modified through the XML above. For example, notice: `}<inlineCode parentName=\"p\">{`defaults.prefer: 'checkbox'`}</inlineCode>{`. In the XML above, we declared `}<inlineCode parentName=\"p\">{`<item name=\"prefer\">toggle</item>`}</inlineCode>{`. As a result, the XML value overrides the default value, and the Javascript renders a toggle instead of a plain checkbox.`}</p>\n    <p>{`This opens up the opportunity for you to customize nearly anything about the UI Component. It also should provide you with a basis of how to determine what configuration is available for you to set through XML.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}