"use strict";(self.webpackChunkcommerce_frontend_core=self.webpackChunkcommerce_frontend_core||[]).push([[262],{22591:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return d},default:function(){return u}});var n,r=a(87462),i=a(63366),o=(a(15007),a(64983)),l=a(91515),m=["components"],d={},s=(n="InlineAlert",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)}),p={_frontmatter:d},c=l.Z;function u(e){var t=e.components,a=(0,i.Z)(e,m);return(0,o.mdx)(c,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"migrate-custom-email-templates"},"Migrate custom email templates"),(0,o.mdx)("p",null,"This topic explains how to migrate custom email templates between versions of Adobe Commerce and Magento Open Source."),(0,o.mdx)("h2",{id:"remove-the-legacy-variable-resolver"},"Remove the legacy variable resolver"),(0,o.mdx)("p",null,"With the release of Adobe Commerce and Magento Open Source 2.4.4 and 2.4.3-p2, ",(0,o.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Framework\\Filter\\VariableResolver\\LegacyResolver")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Framework\\Filter\\VariableResolver\\StrategyResolver")," have been removed and any legacy templates in the database will only be resolved using strict mode. Database templates can be checked using CLI commands to verify\ncompatibility with strict mode."),(0,o.mdx)("h2",{id:"verify-compatibility-with-strict-mode"},"Verify compatibility with strict mode"),(0,o.mdx)("p",null,"The following command scans all database email templates overridden using the Admin ",(0,o.mdx)("strong",{parentName:"p"},"Marketing")," > Communications > ",(0,o.mdx)("strong",{parentName:"p"},"Email Templates")," > ",(0,o.mdx)("strong",{parentName:"p"},"Add New Template")," area for potential variable usage compatibility issues."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento dev:email:override-compatibility-check\n")),(0,o.mdx)("p",null,"To scan email templates overriden using a custom ",(0,o.mdx)("a",{parentName:"p",href:"email.md"},"theme"),", please consider using the ",(0,o.mdx)("a",{parentName:"p",href:"https://experienceleague.adobe.com/docs/commerce-operations/upgrade-guide/upgrade-compatibility-tool/install.html"},"Upgrade Compatibility Tool"),"."),(0,o.mdx)("p",null,"The following command scans newsletter templates for any potential variable usage compatibility issues."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento dev:email:newsletter-compatibility-check\n")),(0,o.mdx)("h2",{id:"changes-to-the-custom-email-template-workflow"},"Changes to the custom email template workflow"),(0,o.mdx)("p",null,"As of Adobe Commerce and Magento Open Source 2.3.4, custom email templates are only allowed to use scalar values for variable data.\nDirect calls to methods are no longer allowed.\nTo be more specific, methods can no longer be called from variables from either the ",(0,o.mdx)("inlineCode",{parentName:"p"},"var")," directive or when used as parameters.\nFor example ",(0,o.mdx)("inlineCode",{parentName:"p"},"{{var order.getEmailCustomerNote()}}")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"{{something myVar=$obj.method()}}")," will fail to resolve."),(0,o.mdx)("p",null,"A 'custom email template' is any new template created in the Admin ",(0,o.mdx)("strong",{parentName:"p"},"Marketing")," > Communications > ",(0,o.mdx)("strong",{parentName:"p"},"Email Templates")," > ",(0,o.mdx)("strong",{parentName:"p"},"Add New Template")," area.\nNotice in the incorrect example, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"getConfirmationLink()")," method is called directly."),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Old way: ",(0,o.mdx)("inlineCode",{parentName:"li"},"{{var subscriber.getConfirmationLink()}}")),(0,o.mdx)("li",{parentName:"ul"},"New way: ",(0,o.mdx)("inlineCode",{parentName:"li"},"{{var subscriber_data.confirmation_link}}"))),(0,o.mdx)("p",null,"Note that spaces should be not be used next to the braces:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Correct: ",(0,o.mdx)("inlineCode",{parentName:"li"},"{{var subscriber_data.confirmation_link}}")),(0,o.mdx)("li",{parentName:"ul"},"Incorrect: ",(0,o.mdx)("inlineCode",{parentName:"li"},"{{ var subscriber_data.confirmation_link }}"))),(0,o.mdx)("p",null,"We refer to this as 'strict mode' for email templates.\nAll default templates have been converted to this strict mode."),(0,o.mdx)(s,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"All existing custom email templates will continue to work after upgrading to 2.3.4.\nAny new email template created after installing 2.3.4 must be written in strict mode.\nAs of 2.4.0, the template filter, specifically anything that uses or extends ",(0,o.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Framework\\Filter\\Template"),", will use strict mode by default."),(0,o.mdx)("h2",{id:"abstraction-example"},"Abstraction example"),(0,o.mdx)("p",null,"Pre-2.3.4, the New Order email template had a line with a direct method call:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-html"},'<p class="greeting">{{trans "%customer_name", customer_name=$order.getCustomerName()}}</p>\n')),(0,o.mdx)("p",null,"As of 2.3.4, with the method call removed:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-html"},'<p class="greeting">{{trans "%customer_name", customer_name=$order_data.customer_name}}</p>\n')),(0,o.mdx)("p",null,"Below, within the ",(0,o.mdx)("inlineCode",{parentName:"p"},"$transport")," block, ",(0,o.mdx)("inlineCode",{parentName:"p"},"customer_name")," is defined in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"order_data")," object and the method call place there.\nThis ",(0,o.mdx)("inlineCode",{parentName:"p"},"order_data")," object is passed to the view page as a ",(0,o.mdx)("inlineCode",{parentName:"p"},"DataObject")," and is referenced in the variable as above."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"public function send(Invoice $invoice, $forceSyncMode = false)\n{\n    $this->identityContainer->setStore($invoice->getStore());\n    $invoice->setSendEmail($this->identityContainer->isEnabled());\n    if (!$this->globalConfig->getValue('sales_email/general/async_sending') || $forceSyncMode) {\n        $order = $invoice->getOrder();\n        if ($this->checkIfPartialInvoice($order, $invoice)) {\n            $order->setBaseSubtotal((float) $invoice->getBaseSubtotal());\n            $order->setBaseTaxAmount((float) $invoice->getBaseTaxAmount());\n            $order->setBaseShippingAmount((float) $invoice->getBaseShippingAmount());\n        }\n        $transport = [\n            'order' => $order,\n            'order_id' => $order->getId(),\n            'invoice' => $invoice,\n            'invoice_id' => $invoice->getId(),\n            'comment' => $invoice->getCustomerNoteNotify() ? $invoice->getCustomerNote() : '',\n            'billing' => $order->getBillingAddress(),\n            'payment_html' => $this->getPaymentHtml($order),\n            'store' => $order->getStore(),\n            'formattedShippingAddress' => $this->getFormattedShippingAddress($order),\n            'formattedBillingAddress' => $this->getFormattedBillingAddress($order),\n            'order_data' => [\n                'customer_name' => $order->getCustomerName(),\n                'is_not_virtual' => $order->getIsNotVirtual(),\n                'email_customer_note' => $order->getEmailCustomerNote(),\n                'frontend_status_label' => $order->getFrontendStatusLabel()\n            ]\n        ];\n        $transportObject = new DataObject($transport);\n")),(0,o.mdx)("p",null,"In this example, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"customer.name")," is being computed within the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Sales/Model/Order/Email/Sender/InvoiceSender.php"},"model")," file.\nDepending on the particular instance, this data point can be appended within a custom module, directive or any manner of ways."),(0,o.mdx)("h2",{id:"create-a-custom-directive"},"Create a custom directive"),(0,o.mdx)("p",null,"The above examples show changes to default application files. We do not recommend editing core files as changes may be lost when upgrading.\nInstead, if you need to call a method for a custom email template variable, create a custom directive.\nIn this example, we will create and pass a ",(0,o.mdx)("inlineCode",{parentName:"p"},"lifetime_spend")," custom value."),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Create a class that implements ",(0,o.mdx)("inlineCode",{parentName:"p"},"Magento\\Framework\\Filter\\SimpleDirective\\ProcessorInterface"),":"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-php"}," declare(strict_types=1);\n namespace GadgetCorp\\CustomEmailDirective\\Model;\n use Magento\\Framework\\Filter\\SimpleDirective\\ProcessorInterface;\n use Magento\\Framework\\Pricing\\PriceCurrencyInterface;\n /**\n * Calculates the lifetime spend of all customers\n */\n class LifetimeSpendDirective implements ProcessorInterface\n {\n     /**\n     * @var PriceCurrencyInterface\n     */\n     private $priceCurrency;\n     /**\n     * @param PriceCurrencyInterface $priceCurrency\n     */\n     public function __construct(PriceCurrencyInterface $priceCurrency)\n     {\n         $this->priceCurrency = $priceCurrency;\n     }\n     /**\n     * @inheritDoc\n     */\n     public function getName(): string\n     {\n         return 'lifetime_spend';\n     }\n     /**\n     * @inheritDoc\n     */\n     public function process($value, array $parameters, ?string $html): string\n     {\n         $shouldBold = !empty($parameters['should_bold']);\n         $amount = $this->priceCurrency->getCurrencySymbol() . $this->calculateLifetimeSpend();\n         return ($shouldBold ? '<strong>' . $amount . '</strong>' : $amount);\n     }\n     /**\n     * @inheritDoc\n     */\n     public function getDefaultFilters(): ?array\n     {\n         // Make sure newlines are converted to <br /> tags by default\n         return ['nl2br'];\n     }\n     /**\n     * Calculate the total amount of money spent by all customers for all time\n     *\n     * @return float\n     */\n     private function calculateLifetimeSpend(): float\n     {\n         // Add code here to calculate the lifetime spend\n         return 123.45;\n     }\n }\n")),(0,o.mdx)("p",{parentName:"li"},"and save the file to ",(0,o.mdx)("inlineCode",{parentName:"p"},"<Vendor>/<module>/Model"),".")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Add the new directive to the pool by adding this block to ",(0,o.mdx)("inlineCode",{parentName:"p"},"di.xml"),"."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">\n <type name="Magento\\Framework\\Filter\\SimpleDirective\\ProcessorPool">\n     <arguments>\n         <argument name="processors" xsi:type="array">\n             <item name="lifetime_spend" xsi:type="object">GadgetCorp\\CustomEmailDirective\\Model\\LifetimeSpendDirective</item>\n         </argument>\n     </arguments>\n </type>\n</config>\n')))),(0,o.mdx)("p",null,"The new variable is now available within the email template as ",(0,o.mdx)("inlineCode",{parentName:"p"},"{{lifetime_spend}}"),".\nNote in the class above, we also defined the parameter ",(0,o.mdx)("inlineCode",{parentName:"p"},"shouldBold"),". We can use that with ",(0,o.mdx)("inlineCode",{parentName:"p"},"{{lifetime_spend should_bold=1}}"),".\nYou may also use multiple filters within a var statement: ",(0,o.mdx)("inlineCode",{parentName:"p"},"{{lifetime_spend should_bold=1 |escape|nl2br}}"),"."),(0,o.mdx)("h2",{id:"data-objects-and-geturl"},"Data objects and getUrl"),(0,o.mdx)("p",null,"There are a couple of exceptions to strict mode."),(0,o.mdx)("p",null,"One exception is for objects that extend from ",(0,o.mdx)("inlineCode",{parentName:"p"},"DataObject"),". These can still be called directly.\nEven then, we do not actually call the getter method directly, but rather, resolve which key is needed and call ",(0,o.mdx)("inlineCode",{parentName:"p"},"getData(<keyname>)")," instead."),(0,o.mdx)("p",null,"For example, if we have:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"$template->setVariables(['customer_data'=>new DataObject('my_key' => 'foo')]);\n")),(0,o.mdx)("p",null,"and in the template where we have"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"{{somedir mydir mydir=$customer_data.getMyKey()}}\n")),(0,o.mdx)("p",null,"the directive will resolve to “foo”."),(0,o.mdx)("p",null,"The same is true for ",(0,o.mdx)("inlineCode",{parentName:"p"},"{{directive foo foo=$customer_data.my_key()}}"),".\nBut note that in both cases the DataObject will not have ",(0,o.mdx)("inlineCode",{parentName:"p"},"getMyKey")," invoked but rather ",(0,o.mdx)("inlineCode",{parentName:"p"},"getData(‘my_key’)")," is invoked instead."),(0,o.mdx)("p",null,"The second exception is for ",(0,o.mdx)("inlineCode",{parentName:"p"},"getUrl"),".\nDirectives that use the format ",(0,o.mdx)("inlineCode",{parentName:"p"},"{{var this.getUrl(params)}}")," will still continue to work for now."),(0,o.mdx)("h2",{id:"advanced-filtering"},"Advanced filtering"),(0,o.mdx)("p",null,"As part of this change, we have removed the limit of processing 2 filters per directive.\nNow ",(0,o.mdx)("inlineCode",{parentName:"p"},"{{var order_data.shipping_description|filter1|filter2|filter3}}")," will work."),(0,o.mdx)("h2",{id:"nested-arrays"},"Nested arrays"),(0,o.mdx)("p",null,"Getting data from nested arrays is now supported.\nFor example, if we have:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"$template->setVariables(['customer_data'=> ['name' => ['first_name' => 'John']]]);\n")),(0,o.mdx)("p",null,"and in the template:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"{{mydir test fname=$customer_data.name.first_name}}\n")),(0,o.mdx)("p",null,"it will resolve to “John”."),(0,o.mdx)("p",null,"This new syntax also works in combination with the ",(0,o.mdx)("inlineCode",{parentName:"p"},"DataObject")," exception.\nFor example, if we have:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"$template->setVariables(['customer_data'=> ['name' => new DataObject('first_name' => 'John')]]);\n")),(0,o.mdx)("p",null,"and in the template we have:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-php"},"{{mydir dir fname=$customer_data.name.first_name}}\n")),(0,o.mdx)("p",null,"it will resolve to “John”."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guide-templates-email-migration-md-4b0b8964f7ac96d1d9ef.js.map