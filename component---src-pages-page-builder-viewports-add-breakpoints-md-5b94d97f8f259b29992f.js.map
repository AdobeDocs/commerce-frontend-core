{"version":3,"file":"component---src-pages-page-builder-viewports-add-breakpoints-md-5b94d97f8f259b29992f.js","mappings":"uSAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,mBACH,oBACL,kBAAK,wGAAsG,uBAAYC,WAAW,KAAM,YAAyB,WAAS,uBAAYA,WAAW,KAAM,oCAAiD,aAAW,uBAAYA,WAAW,KAAM,YAAyB,2DAAyD,uBAAYA,WAAW,KAAM,aAA0B,SAAO,uBAAYA,WAAW,KAAM,aAA0B,gBACve,mBAAG,mBAAQA,WAAW,KAAM,4CAA0C,uBAAYA,WAAW,UAAW,aAA0B,QAAM,uBAAYA,WAAW,UAAW,SAAsB,OAChM,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,wBAAsB,uBAAYA,WAAW,KAAM,gBAA6B,qBAAmB,uBAAYA,WAAW,KAAM,oCAAiD,OAExM,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,sBAAoB,uBAAYA,WAAW,KAAM,YAAyB,2CAEjG,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,eAAa,uBAAYA,WAAW,KAAM,QAAqB,SAAO,uBAAYA,WAAW,KAAM,aAA0B,gBAEpJ,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,uBAAqB,uBAAYA,WAAW,KAAM,WAAwB,aAAW,uBAAYA,WAAW,KAAM,YAAyB,+BAGpK,kBAAK,QAAM,uBAAYA,WAAW,KAAM,WAAwB,oJAAkJ,uBAAYA,WAAW,KAAM,YAAyB,oCAAkC,uBAAYA,WAAW,KAAM,WAAwB,kBAAgB,uBAAYA,WAAW,KAAM,YAAyB,iIACra,kBAAK,wDAAsD,uBAAYA,WAAW,KAAM,eAA4B,uCAAqC,uBAAYA,WAAW,KAAM,aAA0B,QAAM,uBAAYA,WAAW,KAAM,SAAsB,0CAAwC,uBAAYA,WAAW,KAAM,oCAAiD,qCAAmC,uBAAYA,WAAW,KAAM,WAAwB,SAAO,uBAAYA,WAAW,KAAM,cAA2B,OACthB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,ycAkBP,SAACX,EAAD,CAAaY,QAAQ,UAAUC,MAAM,OAAOH,QAAQ,iBACpD,kBAAK,gDAA8C,uBAAYC,WAAW,KAAM,WAAwB,qKAAmK,uBAAYA,WAAW,KAAM,WAAwB,8BAGnU,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/viewports/add-breakpoints.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-breakpoints\"\n    }}>{`Add breakpoints`}</h1>\n    <p>{`Adding new breakpoints is as easy as copying and pasting an existing breakpoint from Page Builder's `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file (`}<inlineCode parentName=\"p\">{`Magento/PageBuilder/etc/view.xml`}</inlineCode>{`) to the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file in your Admin theme or module, then changing its `}<inlineCode parentName=\"p\">{`min-width`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` as needed.`}</p>\n    <p><strong parentName=\"p\">{`Example: Create a new breakpoint with a `}<inlineCode parentName=\"strong\">{`max-width`}</inlineCode>{` of `}<inlineCode parentName=\"strong\">{`320px`}</inlineCode>{`:`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Copy Page Builder's `}<inlineCode parentName=\"p\">{`mobile-small`}</inlineCode>{` breakpoint from `}<inlineCode parentName=\"p\">{`Magento/PageBuilder/etc/view.xml`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Paste it into the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file for your Admin theme or module.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Change its `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` property.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Change the display `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` for the `}<inlineCode parentName=\"p\">{`products`}</inlineCode>{` content type as needed.`}</p>\n      </li>\n    </ol>\n    <p>{`The `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` node in step 4 is for the Products content type. This node provides the ideal number of products to show for the breakpoint. In Page Builder's `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file, every breakpoint defines `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` data for the `}<inlineCode parentName=\"p\">{`products`}</inlineCode>{` content type. Your new breakpoint must also define this data, in addition to any other custom data added to the breakpoint.`}</p>\n    <p>{`The following example shows a new breakpoint called `}<inlineCode parentName=\"p\">{`mobile-tiny`}</inlineCode>{`. It's active for viewports with a `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`320px`}</inlineCode>{`, showing only one product at a time (`}<inlineCode parentName=\"p\">{`<var name=\"slidesToShow\">1</var>`}</inlineCode>{`) for both Products appearances (`}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`continuous`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<!-- Your view.xml file -->\n\n<var name=\"mobile-tiny\">\n    <var name=\"conditions\">\n        <var name=\"max-width\">320px</var>\n    </var>\n    <var name=\"options\">\n        <var name=\"products\">\n            <var name=\"default\">\n                <var name=\"slidesToShow\">1</var>\n            </var>\n            <var name=\"continuous\">\n                <var name=\"slidesToShow\">1</var>\n            </var>\n        </var>\n    </var>\n</var>\n`}</code></pre>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If your new breakpoint does not include the `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` node, the Products content type will default to show five products at a time, no matter how small the breakpoint width. That's why its important to include the `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` data for new breakpoints.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}