{"version":3,"file":"component---src-pages-page-builder-viewports-index-md-bc2f4a802f112070af4c.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/viewports/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction-to-viewports-for-responsive-content\"\n    }}>{`Introduction to viewports for responsive content`}</h1>\n    <p>{`What's a viewport? It's a window in a spacecraft. But that's not important right now. `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=AK3gB7DpaM0\",\n        \"title\": \"What's That Movie?\"\n      }}>{`(WTM?)`}</a>{` For development, we know a viewport refers to the size of the window (or device) used to view content. But in Page Builder, the term has more specific meanings.`}</p>\n    <p>{`Page Builder viewports refer to the buttons and their related device widths shown on the stage. So when we say things like viewport buttons, viewport widths, and viewport configuration data, we're usually talking about the UI elements and settings for the stage.`}</p>\n    <h2 {...{\n      \"id\": \"viewports-for-the-stage\"\n    }}>{`Viewports for the stage`}</h2>\n    <p>{`By default, Page Builder provides two viewports: `}<strong parentName=\"p\">{`desktop`}</strong>{` and `}<strong parentName=\"p\">{`mobile`}</strong>{`, as shown here:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/cdcb3265451053fc743fd5f09730b24d/pagebuilder-viewport-ui.svg\",\n        \"alt\": \"Viewports overview\"\n      }}></img></p>\n    <p>{`When the buttons are clicked, the stage width changes to the width defined in the viewport's CSS class for the stage. For example, the default `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{` viewport narrows the stage canvas to 768px, as shown here:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/1b33504a14548b95ea055013b4b8de39/pagebuilder-viewport-ui-mobile.svg\",\n        \"alt\": \"Viewports overview\"\n      }}></img></p>\n    <p>{`The stage width is controlled by the `}<inlineCode parentName=\"p\">{`.mobile-viewport`}</inlineCode>{` CSS (Less):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`.mobile-viewport {\n    &.pagebuilder-stage-wrapper {\n        &.stage-content-snapshot,\n        &.stage-full-screen {\n            .pagebuilder-stage {\n                .pagebuilder-canvas {\n                    left: 50%;\n                    margin: 0;\n                    transform: translateX(-50%);\n                    width: 768px;\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"viewports-for-property-breakpoints\"\n    }}>{`Viewports for property breakpoints`}</h2>\n    <p>{`In addition to providing the UI for frontend previews, viewports deliver one of Page Builder's best features: User-controlled property values that are breakpoint-specific. As a developer, you define the breakpoint for a viewport, and the end user defines the property value for that viewport. Without viewports, users can't set breakpoints on content properties.`}</p>\n    <p>{`So let's define another term: `}<em parentName=\"p\">{`viewport properties`}</em>{`.`}</p>\n    <p>{`Viewport properties refer to the properties of a content type that can accept different values for different viewport breakpoints.`}</p>\n    <p>{`Page Builder defines the `}<strong parentName=\"p\">{`Minimum Height`}</strong>{` form field as a viewport property for Rows, Columns, Tabs, Tab Items, Banners, Sliders, and Slides. Users can save two different minimum height values for these content types, one for the `}<inlineCode parentName=\"p\">{`desktop`}</inlineCode>{` viewport (`}<inlineCode parentName=\"p\">{`min-width: 1024px`}</inlineCode>{`) and one for the `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{` viewport (`}<inlineCode parentName=\"p\">{`max-width: 768px`}</inlineCode>{`).`}</p>\n    <h2 {...{\n      \"id\": \"how-viewport-properties-work\"\n    }}>{`How viewport properties work`}</h2>\n    <p>{`First, the user clicks the `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{` viewport button. This changes the stage width accordingly. The user then opens a form for a content type that defines a viewport property field. The user adds a value to the field and clicks the Save button on the form. Page Builder saves that value `}<em parentName=\"p\">{`with`}</em>{` the viewport, which connects it to the breakpoint.`}</p>\n    <p>{`Later, when rendering content for the frontend, Page Builder starts generating styles for the content types on the page. When Page Builder gets to the viewport properties it adds, it adds them to a media query on the frontend that is defined in the viewport `}<inlineCode parentName=\"p\">{`media`}</inlineCode>{` node of the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` configuration.`}</p>\n    <p>{`Finally, Page Builder adds all its content type styles — for both viewport properties and common properties — to an internal stylesheet on the page (see `}<a parentName=\"p\" {...{\n        \"href\": \"../styles/index.md#internal-stylesheets\"\n      }}>{`Internal stylesheets`}</a>{`). So when the viewport of a device matches the media queries assigned to the viewport properties, those properties change accordingly.`}</p>\n    <p>{`If this is all a bit confusing right now, don't worry. These things will become clear later in this topic as you learn about the parts of the viewport architecture.`}</p>\n    <p><strong parentName=\"p\">{`The main takeaway`}</strong>{`: Viewports are what make breakpoint-specific properties possible.`}</p>\n    <h2 {...{\n      \"id\": \"how-viewports-work\"\n    }}>{`How viewports work`}</h2>\n    <p>{`The viewport files listed below provide all the HTML templates, functions, properties, configuration data, and events that make up the viewport framework in Page Builder.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`To access the linked source code for each file listed here, you must have access to the private Page Builder repository: `}<inlineCode parentName=\"p\">{`magento/magento2-page-builder`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2-page-builder/blob/develop/app/code/Magento/PageBuilder/etc/view.xml\"\n          }}>{`Magento/PageBuilder/etc/view.xml`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2-page-builder/blob/develop/app/code/Magento/PageBuilder/view/adminhtml/web/template/page-builder.html\"\n          }}>{`Magento/PageBuilder/view/adminhtml/web/template/page-builder.html`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2-page-builder/blob/develop/app/code/Magento/PageBuilder/view/adminhtml/web/template/viewport/switcher.html\"\n          }}>{`Magento/PageBuilder/view/adminhtml/web/template/viewport/switcher.html`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2-page-builder/blob/develop/app/code/Magento/PageBuilder/view/adminhtml/web/ts/js/page-builder.ts\"\n          }}>{`Magento/PageBuilder/view/adminhtml/web/ts/js/page-builder.ts`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2-page-builder/blob/develop/app/code/Magento/PageBuilder/view/adminhtml/web/css/source/_mobile-viewport.less\"\n          }}>{`Magento/PageBuilder/view/adminhtml/web/css/source/_mobile-viewport.less`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2-page-builder/blob/develop/app/code/Magento/PageBuilder/view/adminhtml/web/css/images/switcher/switcher-desktop.svg\"\n          }}>{`Magento/PageBuilder/view/adminhtml/web/css/images/switcher/switcher-desktop.svg`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2-page-builder/blob/develop/app/code/Magento/PageBuilder/view/adminhtml/web/css/images/switcher/switcher-mobile.svg\"\n          }}>{`Magento/PageBuilder/view/adminhtml/web/css/images/switcher/switcher-mobile.svg`}</a></p>\n      </li>\n    </ul>\n    <p>{`The following diagram shows how these files interact to make viewports work.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/421bb0e9776c64b3e4a4883a1b14ca71/pagebuilder-viewport-files.svg\",\n        \"alt\": \"Viewports overview\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"summary-descriptions\"\n    }}>{`Summary descriptions`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#page-builderhtml\"\n          }}>{`page-builder.html`}</a>{`—Template parent that hosts Page Builder's header, viewport buttons, template buttons, panel, and stage.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#switcherhtml\"\n          }}>{`switcher.html`}</a>{`—Template (`}<inlineCode parentName=\"p\">{`viewportTemplate`}</inlineCode>{`) that defines the viewport buttons using Knockout bindings for the `}<inlineCode parentName=\"p\">{`toggleViewport()`}</inlineCode>{` function, button images, and tooltips.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#page-builderts\"\n          }}>{`page-builder.ts`}</a>{`—ViewModel that defines the viewport properties and functions for the `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` template bindings.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#viewxml\"\n          }}>{`view.xml`}</a>{`—Configuration data that defines properties for viewport names, visibility, defaults, min- and max-widths, button icons, tooltip labels, and more.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#_mobile-viewportless\"\n          }}>{`_mobile_viewport.less`}</a>{`—Defines CSS classes that change the stage width. Classes in this file are assigned to the observable `}<inlineCode parentName=\"p\">{`viewportClasses`}</inlineCode>{` property and switched when `}<inlineCode parentName=\"p\">{`toggleViewport()`}</inlineCode>{` is triggered by the viewport buttons.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#button-icons\"\n          }}>{`Button icons`}</a>{`—SVG images for the viewport buttons.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#stage-event-triggers\"\n          }}>{`Stage events`}</a>{`—The events triggered from the `}<inlineCode parentName=\"p\">{`toggleViewport()`}</inlineCode>{` function—`}<a parentName=\"p\" {...{\n            \"href\": \"../architecture/events.md#stageviewportchangeafter\"\n          }}><inlineCode parentName=\"a\">{`stage:viewportChangeAfter`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n            \"href\": \"../architecture/events.md#stagepreviewcontenttypestageidviewportchangeafter\"\n          }}><inlineCode parentName=\"a\">{`stage:\\${this.id}:viewportChangeAfter`}</inlineCode></a>{`. Content type JavaScript components (`}<inlineCode parentName=\"p\">{`preview.ts`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`widget.js`}</inlineCode>{`) can listen for these events and make responsive changes as needed.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"viewport-bindings-and-events\"\n    }}>{`Viewport bindings and events`}</h2>\n    <p>{`The following diagram is similar to the previous one, but focuses more on how the viewport bindings and events work. The numbers are not meant to show a strict operational sequence. They simply call out the important actions and connections between the files.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/97ce93a7a7eb91af9b20d0d51a3f27f5/pagebuilder-viewports-overview.svg\",\n        \"alt\": \"Viewports overview\"\n      }}></img></p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Templates`}</strong>{`—The `}<inlineCode parentName=\"p\">{`page-builder.html`}</inlineCode>{` template renders the `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` viewport template in the header section of the Page Builder stage.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Bindings`}</strong>{`—The `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` binds to the properties and functions of its parent ViewModel: `}<inlineCode parentName=\"p\">{`page-builder.ts`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Initialization`}</strong>{`—The `}<inlineCode parentName=\"p\">{`page-builder.ts`}</inlineCode>{` ViewModel initializes its properties from the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` config file and sets the default viewport.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Button icons`}</strong>{`—The button icons are referenced by URLs in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` for display on the stage.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Toggle function`}</strong>{`—The `}<inlineCode parentName=\"p\">{`toggleViewport()`}</inlineCode>{` function is bound to the button click event in the `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` template. This function does two things:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Sets the `}<inlineCode parentName=\"li\">{`viewportClasses`}</inlineCode>{` observable to a CSS class referenced by the selected viewport.`}</li>\n          <li parentName=\"ul\">{`Triggers the `}<inlineCode parentName=\"li\">{`stage:viewportChangeAfter`}</inlineCode>{` events for listeners.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Events`}</strong>{`—Content types handle the viewport events within their `}<inlineCode parentName=\"p\">{`widget.js`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`preview.ts`}</inlineCode>{` files.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"page-builderhtml\"\n    }}>{`page-builder.html`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`Magento/PageBuilder/view/adminhtml/web/template/page-builder.html\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`page-builder.html`}</inlineCode>{` template hosts the `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` template (`}<inlineCode parentName=\"p\">{`viewportTemplate`}</inlineCode>{`) in the Page Builder's header:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!-- page-builder.html -->\n\n<div class=\"admin__field pagebuilder-header\"...>\n    <span class=\"viewport-buttons\">\n        <render args=\"viewportTemplate\"/> <!-- switcher.html -->\n    </span>\n    ...\n</div>\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`page-builder.html`}</inlineCode>{` template also includes the `}<inlineCode parentName=\"p\">{`viewportClasses`}</inlineCode>{` observable. When this observable changes, the stage width changes to match the `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` defined in the viewport's CSS class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!-- page-builder.html -->\n\n<div class=\"pagebuilder-stage-wrapper\"\n     css=\"Object.assign({'stage-full-screen': isFullScreen, 'stage-content-snapshot': isSnapshot},\n     viewportClasses)\"\n`}</code></pre>\n    <p>{`For more information about `}<inlineCode parentName=\"p\">{`viewportClasses`}</inlineCode>{`, see `}<a parentName=\"p\" {...{\n        \"href\": \"#viewport-properties\"\n      }}>{`Viewport properties`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#_mobile-viewportless\"\n      }}>{`_mobile-viewports.less`}</a>{`, later in this topic.`}</p>\n    <h2 {...{\n      \"id\": \"switcherhtml\"\n    }}>{`switcher.html`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`Magento/PageBuilder/view/adminhtml/web/template/viewport/switcher.html\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` file is the template for the viewport buttons. Page Builder uses this template to render a button for each viewport defined in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file. The switcher template uses Knockout bindings to retrieve data and call the button click function from `}<inlineCode parentName=\"p\">{`page-builder.js`}</inlineCode>{`, as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!-- switcher.html -->\n\n<each args=\"data: Object.keys(viewports), as: 'name'\">\n    <span class=\"tooltip\">\n        <button type=\"button\"\n                class=\"page-builder-viewport\"\n                css=\"$parent.viewports[name].class\"\n                disable=\"name === $parent.viewport()\"\n                click=\"$parent.toggleViewport.bind($parent, name)\">\n            <img data-bind=\"attr:{src: $parent.viewports[name].icon}\" draggable=\"false\" aria-hidden=\"true\"/>\n        </button>\n        <span class=\"tooltip-content\">\n            <span class=\"tooltip-label\" translate=\"$parent.viewports[name].label\"/><br/>\n            <span translate=\"'View your content for '\"/><text args=\"name\"/><br/>\n            <span translate=\"'Width'\"/>: <text args=\"Object.values($parent.viewports[name].conditions)[0]\"/>\n        </span>\n    </span>\n</each>\n`}</code></pre>\n    <p>{`Notice how the `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` template uses dot syntax to access viewport data from the `}<inlineCode parentName=\"p\">{`page-builder.ts`}</inlineCode>{` ViewModel. This syntax corresponds to the data hierarchy in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` configuration. For example, the `}<inlineCode parentName=\"p\">{`<img src>`}</inlineCode>{` and the `}<inlineCode parentName=\"p\">{`tooltip-label`}</inlineCode>{` are bound as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!-- switcher.html -->\n\n<img data-bind=\"attr:{src: $parent.viewports[name].icon}\"/>\n<span class=\"tooltip-label\" translate=\"$parent.viewports[name].label\"/>\n`}</code></pre>\n    <p>{`These bindings map to the `}<inlineCode parentName=\"p\">{`icon`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{` nodes defined in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file, starting with the viewport name, as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<!-- view.xml -->\n\n<var name=\"desktop\">\n    <var name=\"label\">Desktop</var>\n    <var name=\"icon\">Magento_PageBuilder::css/images/switcher/switcher-desktop.svg</var>\n</var>\n\n<var name=\"mobile\">\n    <var name=\"label\">Mobile</var>\n    <var name=\"icon\">Magento_PageBuilder::css/images/switcher/switcher-mobile.svg</var>\n</var>\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file makes it easy to customize the template without having to change it directly.`}</p>\n    <h2 {...{\n      \"id\": \"page-builderts\"\n    }}>{`page-builder.ts`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`Magento/PageBuilder/view/adminhtml/web/ts/js/page-builder.ts\n`}</code></pre>\n    <p>{`As previously noted, Page Builder's `}<inlineCode parentName=\"p\">{`page-builder.ts`}</inlineCode>{` file is the `}<inlineCode parentName=\"p\">{`$parent`}</inlineCode>{` ViewModel for the `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` template. This ViewModel includes a viewport's properties and functions bound to the `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` template. The details follow.`}</p>\n    <h3 {...{\n      \"id\": \"viewport-properties\"\n    }}>{`Viewport properties`}</h3>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`viewports`}</inlineCode></strong>{`—Object that contains all the viewports (and their properties) defined in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` config file. These properties include viewport names, stage visibility, defaults, min- and max-widths, button icons, tooltip labels, and more. See `}<a parentName=\"p\" {...{\n        \"href\": \"#viewxml\"\n      }}>{`view.xml`}</a>{` below for details.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`viewport`}</inlineCode></strong>{`-`}<inlineCode parentName=\"p\">{`KnockoutObservable<string>`}</inlineCode>{` that provides the currently selected viewport by name: `}<inlineCode parentName=\"p\">{`desktop`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{` by default.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`defaultViewport`}</inlineCode></strong>{`—Name of the viewport selected by default. This property is set in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` configuration.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`viewportClasses`}</inlineCode></strong>{`—Observable object array of CSS classes used to change the stage width. The `}<inlineCode parentName=\"p\">{`toggleViewport()`}</inlineCode>{` appends the selected viewport name with `}<inlineCode parentName=\"p\">{`'-viewport'`}</inlineCode>{`, then assigns it as a CSS class to the`}<inlineCode parentName=\"p\">{`viewportClasses`}</inlineCode>{` observable. By default, Page Builder only sets one stage width for its `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{` viewport, using the `}<inlineCode parentName=\"p\">{`.mobile-viewport`}</inlineCode>{` class. The `}<inlineCode parentName=\"p\">{`desktop`}</inlineCode>{` viewport does not have a class because it does not set a stage width that is different from the stage's default width. See `}<a parentName=\"p\" {...{\n        \"href\": \"#_mobile-viewportless\"\n      }}>{`_mobile-viewport.less`}</a>{` for more information.`}</p>\n    <h3 {...{\n      \"id\": \"viewport-functions\"\n    }}>{`Viewport functions`}</h3>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`initViewports(config)`}</inlineCode></strong>{`—Sets the viewport property values from the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` config file. The `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` template (`}<inlineCode parentName=\"p\">{`viewportTemplate`}</inlineCode>{`) binds to these properties as previously described. This function also sets the default viewport for the stage. You can set the default viewport in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`toggleViewport(viewport)`}</inlineCode></strong>{`—Assigns CSS classes to the `}<inlineCode parentName=\"p\">{`viewportClasses`}</inlineCode>{` observable, based on the selected viewport name. The CSS classes assigned to `}<inlineCode parentName=\"p\">{`viewportClasses`}</inlineCode>{` control the stage width. This function also triggers the `}<inlineCode parentName=\"p\">{`stage:viewportChangeAfter`}</inlineCode>{` event. Content types can then change their layouts from event handlers. For more details, see `}<a parentName=\"p\" {...{\n        \"href\": \"#stage-event-triggers\"\n      }}>{`Stage event triggers`}</a>{` at the end of this topic.`}</p>\n    <h2 {...{\n      \"id\": \"viewxml\"\n    }}>{`view.xml`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`Magento/PageBuilder/etc/view.xml\n`}</code></pre>\n    <p>{`Page Builder's `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file provides breakpoint `}<em parentName=\"p\">{`and`}</em>{` viewport configurations for the `}<inlineCode parentName=\"p\">{`desktop`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{` viewports, but only breakpoint configurations for the `}<inlineCode parentName=\"p\">{`tablet`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`mobile-small`}</inlineCode>{` breakpoints.`}</p>\n    <p>{`Page Builder's entire `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` configuration (minus the `}<inlineCode parentName=\"p\">{`media`}</inlineCode>{` node) is listed here to help show and explain the difference between viewport and breakpoint configurations.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<!-- view.xml -->\n<view xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Config/etc/view.xsd\">\n    <vars module=\"Magento_PageBuilder\">\n        <var name=\"breakpoints\">\n            <var name=\"desktop\">\n                <var name=\"label\">Desktop</var>\n                <var name=\"stage\">true</var>\n                <var name=\"default\">true</var>\n                <var name=\"class\">desktop-switcher</var>\n                <var name=\"icon\">Magento_PageBuilder::css/images/switcher/switcher-desktop.svg</var>\n                <var name=\"conditions\">\n                    <var name=\"min-width\">1024px</var>\n                </var>\n                <var name=\"options\">\n                    <var name=\"products\">\n                        <var name=\"default\">\n                            <var name=\"slidesToShow\">5</var>\n                        </var>\n                    </var>\n                </var>\n            </var>\n            <var name=\"tablet\">\n                <var name=\"conditions\">\n                    <var name=\"max-width\">1024px</var>\n                    <var name=\"min-width\">768px</var>\n                </var>\n                <var name=\"options\">\n                    <var name=\"products\">\n                        <var name=\"default\">\n                            <var name=\"slidesToShow\">4</var>\n                        </var>\n                        <var name=\"continuous\">\n                            <var name=\"slidesToShow\">3</var>\n                        </var>\n                    </var>\n                </var>\n            </var>\n            <var name=\"mobile\">\n                <var name=\"label\">Mobile</var>\n                <var name=\"stage\">true</var>\n                <var name=\"class\">mobile-switcher</var>\n                <var name=\"icon\">Magento_PageBuilder::css/images/switcher/switcher-mobile.svg</var>\n                <var name=\"media\">only screen and (max-width: 768px)</var>\n                <var name=\"conditions\">\n                    <var name=\"max-width\">768px</var>\n                    <var name=\"min-width\">640px</var>\n                </var>\n                <var name=\"options\">\n                    <var name=\"products\">\n                        <var name=\"default\">\n                            <var name=\"slidesToShow\">3</var>\n                        </var>\n                    </var>\n                </var>\n            </var>\n            <var name=\"mobile-small\">\n                <var name=\"conditions\">\n                    <var name=\"max-width\">640px</var>\n                </var>\n                <var name=\"options\">\n                    <var name=\"products\">\n                        <var name=\"default\">\n                            <var name=\"slidesToShow\">2</var>\n                        </var>\n                        <var name=\"continuous\">\n                            <var name=\"slidesToShow\">1</var>\n                        </var>\n                    </var>\n                </var>\n            </var>\n        </var>\n    </vars>\n</view>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"viewport-configurations\"\n    }}>{`Viewport configurations`}</h2>\n    <p>{`Notice that the `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{` breakpoint has a `}<inlineCode parentName=\"p\">{`media`}</inlineCode>{` node query. Page Builder uses this query for content type properties that can be assigned to a viewport using `}<em parentName=\"p\">{`breakpoint-aware`}</em>{` form fields. So let's call the `}<inlineCode parentName=\"p\">{`media`}</inlineCode>{` node a `}<strong parentName=\"p\">{`viewport media query`}</strong>{`. This name will help us distinguish it from the `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`min-width`}</inlineCode>{` breakpoints, which are used for a different purpose, described later in this topic.`}</p>\n    <p><strong parentName=\"p\">{`Viewport configuration nodes`}</strong>{`:`}</p>\n    <p>{`The following nodes in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file provide configuration data for viewports:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`label`}</inlineCode>{` - (string) Sets a viewport name or description for the tooltip.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`stage`}</inlineCode>{` - (bool) If set to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`, the viewport is added to the stage. If set to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`, it is not, and users will not be able to set responsive properties on a content type for that viewport.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`default`}</inlineCode>{` - (bool) Determines if the viewport is selected by default when the stage is loaded. Make sure at least one viewport has a `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` setting of `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`. Be aware that if you delete the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` node entirely from the `}<inlineCode parentName=\"p\">{`desktop`}</inlineCode>{` viewport, Page Builder will always set it as the default, and ignore the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` settings from all other viewports.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`class`}</inlineCode>{` - (string) Defines a CSS class to style the viewport switcher button.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`icon`}</inlineCode>{` - (string) - URL to the viewport button image (SVG) location.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`media`}</inlineCode>{` - (string) Defines the media query Page Builder uses to save breakpoint-specific properties for a viewport. Page Builder then adds the media query (and assigned properties) to its internal stylesheet on the page where the property values are applied at the breakpoints.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"breakpoint-configurations\"\n    }}>{`Breakpoint configurations`}</h2>\n    <p>{`Page Builder uses the `}<inlineCode parentName=\"p\">{`min-width`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` breakpoints to build `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{` media queries for content types that require more than CSS to behave responsively. For example, the Products content type uses these breakpoints in its `}<inlineCode parentName=\"p\">{`widget.js`}</inlineCode>{` file to control the responsive behavior of its carousel control, described later in this topic.`}</p>\n    <p><strong parentName=\"p\">{`Breakpoint configuration nodes`}</strong>{`:`}</p>\n    <p>{`The following nodes from the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file provide configuration data for breakpoints:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`breakpoints`}</inlineCode>{` - Defines the parent object for all the named breakpoint objects in Page Builder.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`desktop`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{` - Defines the two breakpoint objects Page Builder uses for its default viewports.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`conditions`}</inlineCode>{` - Contains the `}<inlineCode parentName=\"p\">{`min-width`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` breakpoints Page Builder uses to build media queries for JavaScript widgets and preview components.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`min-width`}</inlineCode>{` - Define the breakpoint widths used to construct a media query in JavaScript. The default values are in pixels (`}<inlineCode parentName=\"p\">{`px`}</inlineCode>{`), but `}<inlineCode parentName=\"p\">{`em`}</inlineCode>{` units can also be used.`}</p>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`Breakpoint custom data`}</strong>{`:`}</p>\n    <p>{`Breakpoint configurations also include any custom nodes you add to defined breakpoint-specific data for your `}<inlineCode parentName=\"p\">{`preview`}</inlineCode>{` components and `}<inlineCode parentName=\"p\">{`widgets`}</inlineCode>{`. Page Builder uses these particular nodes to define the breakpoint-specific data it needs to make its Products `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{` responsive:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`options`}</inlineCode>{` - Parent object that defines custom data used by the `}<inlineCode parentName=\"p\">{`Products`}</inlineCode>{` content type. You can define similar nodes with unique names for your own content type options.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`products`}</inlineCode>{` - Parent object that defines the content type for the data. You can define similar nodes with unique names for your own content types.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`default`}</inlineCode>{` - Parent object that groups `}<inlineCode parentName=\"p\">{`Products`}</inlineCode>{` data by appearance. You can define similar nodes with unique names for your own content types.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`slidesToShow`}</inlineCode>{` - Property defined for a content type appearance. The Products content type uses the `}<inlineCode parentName=\"p\">{`slidesToShow`}</inlineCode>{` property within the `}<inlineCode parentName=\"p\">{`preview.js`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`widget.js`}</inlineCode>{` components to control responsive behavior in the Admin and the frontend. You can define similar properties for your own content types.`}</p>\n      </li>\n    </ul>\n    <p>{`As shown for `}<inlineCode parentName=\"p\">{`Products`}</inlineCode>{`, you can define custom nodes for your own breakpoint-specific data. Then use that data to control your content type's layout on the Admin stage (using your `}<inlineCode parentName=\"p\">{`preview`}</inlineCode>{` component) and the storefront (using your `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{`).`}</p>\n    <h3 {...{\n      \"id\": \"adding-custom-data-to-breakpoints\"\n    }}>{`Adding custom data to breakpoints`}</h3>\n    <p>{`Let's say you want to create a content type that shows customer testimonials in a carousel. Like Products, you could use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://kenwheeler.github.io/slick/\"\n      }}>{`slick control`}</a>{` to auto-loop the quotes across the screen. But you need a way to tell slick to increase or decrease the number of quotes to show on the screen for a given breakpoint. You can't do that with CSS media queries because slick is a contained control. You have to do it from your content type's `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{`. In this case, you could create a custom property for each breakpoint called `}<inlineCode parentName=\"p\">{`testimonialsToShow`}</inlineCode>{`. This property would define the ideal number of testimonials to show for a given breakpoint.`}</p>\n    <p>{`Your content type's custom configuration data might look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<!-- view.xml -->\n\n<var name=\"mobile\">\n   ...\n    <var name=\"options\">\n        <var name=\"testimonials\">\n            <var name=\"default\">\n                <var name=\"testimonialsToShow\">3</var>\n            </var>\n            <var name=\"with-images\">\n                <var name=\"testimonialsToShow\">2</var>\n            </var>\n        </var>\n    </var>\n</var>\n`}</code></pre>\n    <p>{`In short, whenever you need breakpoint-specific data in your `}<inlineCode parentName=\"p\">{`widget.js`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`preview.js`}</inlineCode>{` components, you can define your own custom data for a breakpoint in your `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file. See `}<a parentName=\"p\" {...{\n        \"href\": \"use-breakpoints.md\"\n      }}>{`Use breakpoints for widgets`}</a>{` for details.`}</p>\n    <h2 {...{\n      \"id\": \"_mobile-viewportless\"\n    }}>{`_mobile-viewport.less`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`Magento/PageBuilder/view/adminhtml/web/css/source/_mobile-viewport.less\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`_mobile-viewport.less`}</inlineCode>{` file includes the CSS class that `}<strong parentName=\"p\">{`changes the stage width`}</strong>{` to match the widths defined for the `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{` breakpoint in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file. As mentioned in `}<a parentName=\"p\" {...{\n        \"href\": \"#viewport-properties\"\n      }}>{`Viewport properties`}</a>{`, Page Builder assigns this class to the `}<inlineCode parentName=\"p\">{`viewportClasses`}</inlineCode>{` observable after the mobile viewport button is clicked. When this happens, the stage width changes to the width in the `}<inlineCode parentName=\"p\">{`.mobile-viewport`}</inlineCode>{` class. For new viewports, the class name that controls the stage width must follow this naming convention:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`.[breakpoint-name] + -viewport\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`[breakpoint-name]`}</inlineCode>{` refers to the name of the breakpoint for the viewport, as defined in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file. For example, the `}<inlineCode parentName=\"p\">{`mobile-small`}</inlineCode>{` breakpoint requires a CSS class named `}<inlineCode parentName=\"p\">{`.mobile-small-viewport`}</inlineCode>{`. If your viewport CSS class name doesn't follow this convention, it won't match the class name generated by the `}<inlineCode parentName=\"p\">{`toggleViewport()`}</inlineCode>{` function and assigned to `}<inlineCode parentName=\"p\">{`viewportClasses`}</inlineCode>{` for the stage. The code that determines this convention is shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// page-builder.ts\npublic toggleViewport(viewport: string) {\n    ...\n    this.viewportClasses[\\`\\${viewport}-viewport\\`](true);\n    ...\n}\n`}</code></pre>\n    <p>{`Page Builder's default `}<inlineCode parentName=\"p\">{`.mobile-viewport`}</inlineCode>{` class shows the nesting of CSS selectors required to target the `}<inlineCode parentName=\"p\">{`pagebuilder-canvas`}</inlineCode>{` on the stage:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// _mobile-viewport.less\n\n.mobile-viewport {\n    &.pagebuilder-stage-wrapper {\n        &.stage-content-snapshot,\n        &.stage-full-screen {\n            .pagebuilder-stage {\n                .pagebuilder-canvas {\n                    left: 50%;\n                    transform: translateX(-50%);\n                    width: 768px;\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"button-icons\"\n    }}>{`Button icons`}</h2>\n    <p>{`Page Builder's viewport buttons use SVG images. The URLs to these images are defined in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file for each viewport (`}<inlineCode parentName=\"p\">{`desktop`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{`), as shown in these snippets:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<!-- view.xml -->\n\n<var name=\"desktop\">\n    <var name=\"icon\">Magento_PageBuilder::css/images/switcher/switcher-desktop.svg</var>\n</var>\n\n<var name=\"mobile\">\n    <var name=\"icon\">Magento_PageBuilder::css/images/switcher/switcher-mobile.svg</var>\n</var>\n`}</code></pre>\n    <p>{`As the URLs indicate, Page Builder's SVG images for the buttons are located here:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/adc44aad26d3ac7074209ef7a10c12db/pagebuilder-switcher-icon-location.svg\",\n        \"alt\": \"Viewport switcher button images\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"stage-event-triggers\"\n    }}>{`Stage event triggers`}</h2>\n    <p>{`Page Builder triggers the viewport stage events from the `}<inlineCode parentName=\"p\">{`toggleViewport()`}</inlineCode>{` function. This function is bound to the viewport button in the `}<inlineCode parentName=\"p\">{`switcher.html`}</inlineCode>{` template. After the user clicks the viewport button, Page Builder calls `}<inlineCode parentName=\"p\">{`toggleViewport()`}</inlineCode>{`, which triggers the stage events as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// page-builder.ts\n\npublic toggleViewport(viewport: string) {\n    ...\n    events.trigger(\\`stage:\\${this.id}:viewportChangeAfter\\`, {\n        viewport,\n        previousViewport,\n    });\n    events.trigger(\\`stage:viewportChangeAfter\\`, {\n        viewport,\n        previousViewport,\n    });\n}\n`}</code></pre>\n    <p>{`Event handlers within Page Builder's content types (and yours) can then make responsive changes based on the selected `}<inlineCode parentName=\"p\">{`viewport`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`previousViewport`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"summary\"\n    }}>{`Summary`}</h2>\n    <p>{`Understanding the elements of Page Builder's responsive framework and how it works is the first step toward making your content types responsive. To begin developing responsive content for Page Builder, we recommended the following sequence of topics:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"add-viewports.md\"\n          }}>{`Add viewports to the stage`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"add-breakpoints.md\"\n          }}>{`Add breakpoints`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"use-breakpoints.md\"\n          }}>{`Use breakpoints for widgets`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"change-breakpoints-viewports.md\"\n          }}>{`Change breakpoints and viewports`}</a></p>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}