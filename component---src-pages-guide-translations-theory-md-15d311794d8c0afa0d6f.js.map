{"version":3,"file":"component---src-pages-guide-translations-theory-md-15d311794d8c0afa0d6f.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/guide/translations/theory.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"theme-strings\"\n    }}>{`Theme strings`}</h1>\n    <p>{`This topic describes how to add theme strings so that the i18n tool can collect and add the strings to the dictionary.`}</p>\n    <p>{`Your custom theme may contain new strings that are not present in out-of-the-box themes.\nTo ensure your theme displays correctly with any language applied on a store view, verify the unique strings of your theme are added to the translation `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/cli/localization.html\"\n      }}>{`i18n tool`}</a>{` when `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/cli/localization.html\"\n      }}>{`generating the dictionary`}</a>{`.\nThen when a new language package is created and used to translate a store view, all theme strings are also translated.`}</p>\n    <h2 {...{\n      \"id\": \"strings-added-in-phtml-templates\"\n    }}>{`Strings added in .phtml templates`}</h2>\n    <p>{`To ensure that your new string is added to the dictionary and translated, use the `}<inlineCode parentName=\"p\">{`__('<your_string>')`}</inlineCode>{` method when outputting a string in a `}<a parentName=\"p\" {...{\n        \"href\": \"../templates/index.md\"\n      }}>{`.phtml template`}</a>{`.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?= __('Create Backup') ?>\n`}</code></pre>\n    <p>{`If your string contains a variable, to add a placeholder for this variable in the dictionary, use syntax similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?= __('Hello %1', $yourVariable) ?>\n`}</code></pre>\n    <p>{`In this example, the `}<em parentName=\"p\">{`'Hello %1'`}</em>{` string is added to the dictionary when the i18n tool is run.`}</p>\n    <h2 {...{\n      \"id\": \"strings-added-in-email-templates\"\n    }}>{`Strings added in email templates`}</h2>\n    <p>{`If your theme contains `}<a parentName=\"p\" {...{\n        \"href\": \"../templates/email.md\"\n      }}>{`custom email templates`}</a>{`, their strings can be added to the dictionary as well.\nTo add the email template strings to the dictionary, use the `}<inlineCode parentName=\"p\">{`{{trans}}`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"../templates/email.md#localization\"\n      }}>{`directive`}</a>{`.`}</p>\n    <p>{`Custom email templates `}<a parentName=\"p\" {...{\n        \"href\": \"../templates/email.md#admin-based-customizations\"\n      }}>{`added using the Admin panel`}</a>{` are not stored in the file system, and their strings are not added to the dictionary.`}</p>\n    <p>{`To ensure that your new string is added to the dictionary and translated, use the `}<inlineCode parentName=\"p\">{`{{trans}}`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"../templates/email.md#localization\"\n      }}>{`directive`}</a>{` when outputting a string in an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Customer/view/frontend/email/account_new.html\"\n      }}>{`email template`}</a>{`.`}</p>\n    <p>{`For example:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When only a string is added in the email template:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`{{trans \"Lorem Ipsum is simply dummy text of the printing\"}}\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When only a string is added with a variable value in the email template:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`{{trans \"%items items\" items=\"numItems\"}}\n`}</code></pre>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"strings-added-in-ui-component-templates\"\n    }}>{`Strings added in UI component templates`}</h2>\n    <p>{`To ensure that the text you add in `}<inlineCode parentName=\"p\">{`.html`}</inlineCode>{` templates of UI components is added to the dictionary, mark the text using the `}<inlineCode parentName=\"p\">{`i18n`}</inlineCode>{` custom binding. The following code samples illustrate how to use custom bindings:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a string is added in the scope of an HTML element, both of the following examples result in the same output:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<span data-bind=\"i18n: 'Sign In'\"></span>\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<span translate=\"'Sign In'\"></span>\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a string is added with no binding to an HTML element, both of the following examples result in the same output:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<!-- ko i18n: 'You have no items in your shopping cart.' --><!-- /ko -->\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<translate args=\"'You have no items in your shopping cart.'\"/>\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a string is added as an attribute of an HTML element:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<input type=\"text\" data-bind=\"attr: {placeholder: $t('First Name')}\" />\n`}</code></pre>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"strings-added-in-ui-components-configuration-files\"\n    }}>{`Strings added in UI components configuration files`}</h2>\n    <p>{`To ensure that the text you add in UI components configuration `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` files is added to the dictionary, use the `}<inlineCode parentName=\"p\">{`translate`}</inlineCode>{` attribute. Set the attribute to true for the corresponding element: `}<inlineCode parentName=\"p\">{`translate=true`}</inlineCode></p>\n    <p>{`In this example, the `}<em parentName=\"p\">{`Delete`}</em>{` string is added to the dictionary when the i18n tool is run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<item name=\"label\" xsi:type=\"string\" translate=\"true\">Delete</item>\n`}</code></pre>\n    <p>{`Translated strings that originate from `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` files will not render unless they are called with a `}<inlineCode parentName=\"p\">{`__(<variable>)`}</inlineCode>{` method in `}<inlineCode parentName=\"p\">{`.php`}</inlineCode>{` files. In this example, you would use a call similar to the following to display the translated `}<em parentName=\"p\">{`Delete`}</em>{` string.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`__($this->config->getData('label'))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"strings-added-in-underscore-templates\"\n    }}>{`Strings added in Underscore templates`}</h2>\n    <p>{`To ensure that the text you add in `}<inlineCode parentName=\"p\">{`.html`}</inlineCode>{` Underscore templates is collected by the `}<inlineCode parentName=\"p\">{`i18n`}</inlineCode>{` tool, use the `}<inlineCode parentName=\"p\">{`_.i18n('')`}</inlineCode>{` Underscore function.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`When a string is added to the template:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<%= _.i18n('Hello') %>\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If the string contains a variable, use the variable placeholder:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-html\"\n          }}>{`<%= _.i18n('Hello %1').replace('%1', yourVariable) %>\n`}</code></pre>\n        <p parentName=\"li\">{`In this example, the `}<em parentName=\"p\">{`'Hello %1'`}</em>{` string is added to the dictionary when the i18n tool is run.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"strings-added-in-js-files\"\n    }}>{`Strings added in .js files`}</h2>\n    <p>{`To ensure that the text you add in a `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file is collected by the i18n tool and added to the dictionary:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Link the `}<inlineCode parentName=\"p\">{`mage/translate`}</inlineCode>{` library:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`define (['jquery', 'mage/translate'], function ($, $t) {...});\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Use the `}<inlineCode parentName=\"p\">{`$.mage.__('')`}</inlineCode>{` function when adding a string:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`$.mage.__('<string>');\n`}</code></pre>\n        <p parentName=\"li\">{`or`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`$t('<string>');\n`}</code></pre>\n        <p parentName=\"li\">{`If your string contains a variable, to add a placeholder for this variable to the string stored in the dictionary, use the following syntax:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`$.mage.__('Hello %1').replace('%1', yourVariable);\n`}</code></pre>\n        <p parentName=\"li\">{`or`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`$t('Hello %1').replace('%1', yourVariable);\n`}</code></pre>\n      </li>\n    </ol>\n    <p>{`In this example, the `}<inlineCode parentName=\"p\">{`'Hello %1'`}</inlineCode>{` string is added to the dictionary when the i18n tool is run.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}