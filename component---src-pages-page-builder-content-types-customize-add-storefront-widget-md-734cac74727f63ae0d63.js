"use strict";(self.webpackChunkcommerce_frontend_core=self.webpackChunkcommerce_frontend_core||[]).push([[7886],{93644:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return m},default:function(){return p}});var a=n(87462),o=n(45987),r=(n(35776),n(3905)),i=n(91515);const d=["components"],m={},c={_frontmatter:m},s=i.Z;function p(e){let{components:t}=e,n=(0,o.Z)(e,d);return(0,r.mdx)(s,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"add-a-storefront-widget"},"Add a storefront widget"),(0,r.mdx)("p",null,"A storefront widget is a JavaScript component that handles the behavior of a content type after Page Builder renders it on the storefront. For example, the Tabs and Sliders have their own storefront widgets to handle the end-user's tapping of tabs and swiping of slides on the storefront."),(0,r.mdx)("p",null,"However, Page Builder also executes storefront widgets on the Admin stage for block and dynamic block content types. This allows end-users to preview how Page Builder will render the blocks and dynamic blocks on the storefront."),(0,r.mdx)("p",null,"Adding a storefront widget to your content type is a simple two-step process:"),(0,r.mdx)("p",null,(0,r.mdx)("img",{parentName:"p",src:"/commerce-frontend-core/assets/33708e5e6ea838b3b783b0ce4c996a44/how-to-add-storefront-widget.svg",alt:"Adding a storefront widget"})),(0,r.mdx)("h2",{id:"step-1-create-the-javascript"},"Step 1: Create the JavaScript"),(0,r.mdx)("p",null,"Name your JavaScript file ",(0,r.mdx)("inlineCode",{parentName:"p"},"widget.js")," and put it in the following directory structure: ",(0,r.mdx)("inlineCode",{parentName:"p"},"/view/base/web/js/content-type/{content-type-name}/appearance/{appearance-name}/widget.js"),". An example from the PageBuilderQuote content type follows:"),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"954px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"52.1875%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/commerce-frontend-core/static/2d87e6708bd390c3925d9c294e4f70f1/5530d/where-to-add-widget.webp 320w","/commerce-frontend-core/static/2d87e6708bd390c3925d9c294e4f70f1/0c8fb/where-to-add-widget.webp 640w","/commerce-frontend-core/static/2d87e6708bd390c3925d9c294e4f70f1/8ef22/where-to-add-widget.webp 954w"],sizes:"(max-width: 954px) 100vw, 954px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/commerce-frontend-core/static/2d87e6708bd390c3925d9c294e4f70f1/dd4a7/where-to-add-widget.png 320w","/commerce-frontend-core/static/2d87e6708bd390c3925d9c294e4f70f1/0f09e/where-to-add-widget.png 640w","/commerce-frontend-core/static/2d87e6708bd390c3925d9c294e4f70f1/65dc2/where-to-add-widget.png 954w"],sizes:"(max-width: 954px) 100vw, 954px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/commerce-frontend-core/static/2d87e6708bd390c3925d9c294e4f70f1/65dc2/where-to-add-widget.png",alt:"Where to add storefront widget",title:"Where to add storefront widget",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("p",null,"The JavaScript for the widget can handle events, initialize third-party controls, or do whatever else you need to control your content type's behavior ",(0,r.mdx)("em",{parentName:"p"},"after")," Page Builder renders the master format template on the frontend (or within a block or dynamic block on the Admin stage)."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"define([\n    'jquery',\n], function ($) {\n    'use strict';\n\n    return function (config, element) {\n        var element = $(element);\n        console.log(\"ELEMENT: \" + element.data('element'));\n    };\n});\n")),(0,r.mdx)("h2",{id:"step-2-configure-the-widget-initializer"},"Step 2: Configure the widget initializer"),(0,r.mdx)("p",null,"To configure your ",(0,r.mdx)("inlineCode",{parentName:"p"},"widget.js")," so that Page Builder can initialize and load it, create a new ",(0,r.mdx)("inlineCode",{parentName:"p"},"WidgetInitializerConfig")," type in your module's global ",(0,r.mdx)("inlineCode",{parentName:"p"},"di.xml")," file (",(0,r.mdx)("inlineCode",{parentName:"p"},"etc/di.xml"),"). Then add your custom configuration (that includes your widget) as a replacement argument. The following example is from the PageBuilderQuote module:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">\n    <type name="Magento\\PageBuilder\\Model\\WidgetInitializerConfig">\n        <arguments>\n            <argument name="config" xsi:type="array">\n                <item name="example_quote" xsi:type="array">\n                \x3c!-- Name is the appearance name --\x3e\n                <item name="default" xsi:type="array">\n                    \x3c!--required argument--\x3e\n                        <item name="component" xsi:type="string">Example_PageBuilderQuote/js/content-type/example-quote/appearance/default/widget</item>\n                    </item>\n                </item>\n            </argument>\n        </arguments>\n    </type>\n</config>\n')),(0,r.mdx)("p",null,"That's it! For more examples, look at several of Page Builder's native widget implementations within ",(0,r.mdx)("inlineCode",{parentName:"p"},"app/code/Magento/PageBuilder/view/base/web/js/content-type/"),"."))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-page-builder-content-types-customize-add-storefront-widget-md-734cac74727f63ae0d63.js.map