{"version":3,"file":"component---src-pages-ui-components-concepts-configuration-flow-md-481f6d7d91281174eb04.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/ui-components/concepts/configuration-flow.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"configuration-flow\"\n    }}>{`Configuration flow`}</h1>\n    <p>{`The following section covers the configuration flow of UI components. Before a `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/ui-component\"\n      }}>{`UI component`}</a>{` is finally displayed on a web page, its configuration undergoes a series of modifications. Starting from the initial reading of the top-level component instance’s `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/xml\"\n      }}>{`XML`}</a>{` declaration, all the way to the merging of module-specific options.`}</p>\n    <p>{`When the server generates a page response, the configuration of these components in the `}<a parentName=\"p\" {...{\n        \"href\": \"xml-declaration.md\"\n      }}><inlineCode parentName=\"a\">{`.xml`}</inlineCode>{` declaration files`}</a>{` is then modified by the `}<a parentName=\"p\" {...{\n        \"href\": \"modifier.md\"\n      }}><inlineCode parentName=\"a\">{`.php`}</inlineCode>{` modifiers`}</a>{`, and then finally this combined configuration is packed into JSON format and added into the HTTP response body.`}</p>\n    <p>{`On the client-side, this JSON is processed by `}<inlineCode parentName=\"p\">{`Magento_Ui/js/core/app`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`Magento_Ui/js/core/app`}</inlineCode>{` is an alias for the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/core/app.js\"\n      }}><inlineCode parentName=\"a\">{`app.js`}</inlineCode></a>{` file. The JSON could be seen in the page source. The `}<inlineCode parentName=\"p\">{`Magento_Ui/js/core/app`}</inlineCode>{` creates the UI components instances according to the configuration of the JSON using `}<inlineCode parentName=\"p\">{`uiLayout`}</inlineCode>{`.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/javascript\"\n      }}>{`JavaScript`}</a>{` application bounds these instances to the corresponding `}<inlineCode parentName=\"p\">{`.html`}</inlineCode>{` templates, if there are any `}<inlineCode parentName=\"p\">{`.html`}</inlineCode>{` templates declared in JSON for that particular component. The top-level UI component is bound to the page by the `}<inlineCode parentName=\"p\">{`scope`}</inlineCode>{` Knockout binding.`}</p>\n    <h2 {...{\n      \"id\": \"implementation-details\"\n    }}>{`Implementation details`}</h2>\n    <p>{`This section provides more detailed steps about the configuration flow.`}</p>\n    <p>{`Lets consider an example with the top-level UI component, `}<inlineCode parentName=\"p\">{`form`}</inlineCode>{`.`}</p>\n    <p>{`Lets imagine we have the following file structure in our `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{` `}<inlineCode parentName=\"p\">{`<My_Module>`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://glossary.magento.com/layout\"\n        }}>{`layout`}</a>{` `}<inlineCode parentName=\"li\">{`.xml`}</inlineCode>{` file of the Module’s page: `}<inlineCode parentName=\"li\">{`my_page.xml`}</inlineCode></li>\n      <li parentName=\"ul\">{`top-level UI Component (form or listing) configuration: `}<inlineCode parentName=\"li\">{`my_form.xml`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.php`}</inlineCode>{` modifiers that are specific to the module`}</li>\n    </ul>\n    <p>{`Keep in mind that the Magento_UI module contains these important files:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A general, module-agnostic form definition in the `}<inlineCode parentName=\"li\">{`<form>`}</inlineCode>{` node of the `}<inlineCode parentName=\"li\">{`.xml`}</inlineCode>{` definition file: `}<inlineCode parentName=\"li\">{`<Magento_Ui_module_dir>/view/base/ui_component/etc/definition.xml`}</inlineCode></li>\n      <li parentName=\"ul\">{`Default `}<inlineCode parentName=\"li\">{`.xhtml`}</inlineCode>{` template for the form, which is referenced in `}<inlineCode parentName=\"li\">{`definition.xml`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Magento_Ui_module_dir>/view/base/ui_component/templates/form/default.xhtml`}</inlineCode></li>\n      <li parentName=\"ul\">{`The Form class, which is referenced in `}<inlineCode parentName=\"li\">{`definition.xml`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`<Magento_Ui_module_dir>/view/base/web/js/form/form.js`}</inlineCode></li>\n    </ul>\n    <p>{`When the request for my_page comes, the server does the following:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Determines which UI components are used in this particular layout. In the example, the UI components that are used are defined in the `}<inlineCode parentName=\"li\">{`my_form`}</inlineCode>{` component’s `}<inlineCode parentName=\"li\">{`.xml`}</inlineCode>{` declaration file.`}</li>\n      <li parentName=\"ol\">{`Searches the `}<inlineCode parentName=\"li\">{`.xml`}</inlineCode>{` files with name `}<inlineCode parentName=\"li\">{`my_form`}</inlineCode>{` among all modules. The server then merges all the `}<inlineCode parentName=\"li\">{`my_form.xml`}</inlineCode>{` file(s) into a single configuration object, thus overriding the common properties, so that the latest `}<inlineCode parentName=\"li\">{`my_form.xml`}</inlineCode>{` file always has the highest priority.`}</li>\n      <li parentName=\"ol\">{`Merges the resulting configuration (from Step 2 above) with the configuration from the UI module `}<inlineCode parentName=\"li\">{`definition.xml`}</inlineCode>{`. The UI module `}<inlineCode parentName=\"li\">{`definition.xml`}</inlineCode>{` configuration file has the lowest priority, and is overwritten by the merged configuration of all `}<inlineCode parentName=\"li\">{`my_form.xml`}</inlineCode>{` files.`}</li>\n      <li parentName=\"ol\">{`Translates the resulting configuration into JSON format and adds it to response body the following way:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<script type=\"text/x-magento-init\">{\"*\": {\"Magento_Ui/js/core/app\":{<JSON_configuration>}}}</script>\n`}</code></pre>\n    <p>{`Now it is the client's turn to process this JSON and generate the UI component's instances. The flow is following:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`RequireJS requires `}<inlineCode parentName=\"li\">{`Magento_Ui/js/core/app`}</inlineCode>{` and passes `}<a parentName=\"li\" {...{\n          \"href\": \"../../javascript/init.md#declarative-notation\"\n        }}>{`JSON configuration`}</a>{` as a parameter.`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`Magento_Ui/js/core/app`}</inlineCode>{` calls `}<inlineCode parentName=\"li\">{`layout.js`}</inlineCode>{` and passes the UI component’s configuration into the layout: `}<inlineCode parentName=\"li\">{`<Magento_Ui_module_dir>/view/base/web/js/core/renderer/layout.js`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`layout.js`}</inlineCode>{` creates instances of UI components. That means that each UI component’s configuration must have an explicitly declared the `}<inlineCode parentName=\"li\">{`component`}</inlineCode>{` property in JSON. This property references the `}<inlineCode parentName=\"li\">{`.js`}</inlineCode>{` file. For example, our form has the component declared in JSON like this: `}<inlineCode parentName=\"li\">{`\"my_form\":{\"component\":\"Magento_Ui/js/form/form\"}`}</inlineCode>{`. So the instance of this class is created, and properties from the JSON overwrites the properties from the UI component’s `}<inlineCode parentName=\"li\">{`defaults`}</inlineCode>{` property. Then resulting properties become the first-level properties of the newly created UI component's instance, and the original `}<inlineCode parentName=\"li\">{`defaults`}</inlineCode>{` property is deleted.`}</li>\n      <li parentName=\"ol\">{`The UI components’ `}<inlineCode parentName=\"li\">{`.html`}</inlineCode>{` templates (if there are any) are rendered by `}<inlineCode parentName=\"li\">{`knockout.js`}</inlineCode>{` template engine. This means, that `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/lib/knockout/bootstrap.js\"\n        }}>{`bootstrap.js`}</a>{` (required by `}<inlineCode parentName=\"li\">{`app.js`}</inlineCode>{`) passes our own `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/lib/knockout/template/engine.js\"\n        }}>{`template engine`}</a>{` for the Knockout.`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`bootstrap.js`}</inlineCode>{` binds the component as a Model behind this View (template) using Knockout bindings. The UI components are now displayed on the page, and are fully interactive.`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}