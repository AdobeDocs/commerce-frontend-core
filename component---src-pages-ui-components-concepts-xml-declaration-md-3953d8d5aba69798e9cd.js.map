{"version":3,"file":"component---src-pages-ui-components-concepts-xml-declaration-md-3953d8d5aba69798e9cd.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/ui-components/concepts/xml-declaration.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"xml-declaration\"\n    }}>{`XML declaration`}</h1>\n    <p>{`This topic discusses the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/xml\"\n      }}>{`XML`}</a>{` declaration of UI components.`}</p>\n    <h2 {...{\n      \"id\": \"about-the-layout-configuration-file-and-ui-component-declaration\"\n    }}>{`About the layout configuration file and UI component declaration`}</h2>\n    <p>{`Every `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{` that has view representation contains the directory named `}<inlineCode parentName=\"p\">{`layout`}</inlineCode>{`. In this directory, the `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` declarations of the pages are stored. These `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` declarations are, in fact, the pages' `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/markup\"\n      }}>{`markup`}</a>{`.`}</p>\n    <p>{`In a typical `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` layout file we see a `}<inlineCode parentName=\"p\">{`<head/>`}</inlineCode>{` node, `}<inlineCode parentName=\"p\">{`<title/>`}</inlineCode>{` node with the name of the page, and sometimes `}<a parentName=\"p\" {...{\n        \"href\": \"../../guide/layouts/xml-manage.md#include-static-resources-javascript-css-fonts\"\n      }}>{`links to CSS and JS files`}</a>{`. There are other nodes as well, the most important for us now is the `}<a parentName=\"p\" {...{\n        \"href\": \"../../guide/layouts/xml-instructions.md#referenceblock-and-referencecontainer\"\n      }}><inlineCode parentName=\"a\">{`<referenceContainer/>`}</inlineCode>{` node`}</a>{`. (The `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` attribute in this node is responsible for the position of the container on the page.). `}<a parentName=\"p\" {...{\n        \"href\": \"../index.md#general-structure\"\n      }}>{`Basic`}</a>{` UI components are declared in this node. All nested components are declared in the basic components' instances configuration files (not in the page layouts).`}</p>\n    <p>{`Example of a basic `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/ui-component\"\n      }}>{`UI component`}</a>{` declaration:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<referenceContainer name=\"page-container\">\n    <uiComponent name=\"%instance_name%\"/>\n</referenceContainer>\n`}</code></pre>\n    <p>{`A UI component is declared using the `}<inlineCode parentName=\"p\">{`<uiComponent/>`}</inlineCode>{` node. The `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` attribute in the `}<inlineCode parentName=\"p\">{`<uiComponent/>`}</inlineCode>{` node references the XML configuration of the basic UI component's instance. This configuration is a separate `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` file. It is stored in the `}<inlineCode parentName=\"p\">{`<module_dir>/view/<area>/ui_component/`}</inlineCode>{` directory. For example `}<inlineCode parentName=\"p\">{`<module_dir>/view/<area>/ui_component/%instance_name%.xml`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"about-the-basic-component-configuration-file\"\n    }}>{`About the basic component configuration file`}</h2>\n    <p>{`The instance configuration file name is the name of instance (`}<inlineCode parentName=\"p\">{`%instance_name%`}</inlineCode>{`). The `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/namespace\"\n      }}>{`namespace`}</a>{` of the names is global; meaning that if the file names in different modules are the same, they are merged into a single configuration for the particular instance.`}</p>\n    <p>{`Following are the rules for the instance configuration files:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The top node must have the name of one of the basic UI components. `}{\n          /* need to mention or link what components */\n        }</li>\n      <li parentName=\"ul\">{`The top node must contain a link to the `}<a parentName=\"li\" {...{\n          \"href\": \"https://glossary.magento.com/xsd\"\n        }}>{`XSD`}</a>{` schema.`}</li>\n    </ul>\n    <p>{`In the top node, there can be an `}<inlineCode parentName=\"p\">{`<argument/>`}</inlineCode>{` node. The `}<inlineCode parentName=\"p\">{`<argument/>`}</inlineCode>{` node contains the configuration for that basic UI component. The `}<inlineCode parentName=\"p\">{`<argument/>`}</inlineCode>{` node's `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` attribute value must be `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`. The child nodes of the `}<inlineCode parentName=\"p\">{`<argument>`}</inlineCode>{` node will be the argument properties that will be passed in to the component.`}</p>\n    <p>{`The top node can have nested nodes. Every nested node is regarded as a separate UI component (i.e. the toolbar). For example, if you want your listing to have a toolbar, then the top node is for the listing and a nested node represents a toolbar. Nested nodes can also contain the `}<inlineCode parentName=\"p\">{`<argument>`}</inlineCode>{` node.`}</p>\n    <h2 {...{\n      \"id\": \"example-of-a-basic-components-configuration-file\"\n    }}>{`Example of a basic component's configuration file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n/**\n * Copyright Â© Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n-->\n<form xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Ui:etc/ui_configuration.xsd\">\n    <argument name=\"data\" xsi:type=\"array\">\n        <item name=\"js_config\" xsi:type=\"array\">\n            <item name=\"provider\" xsi:type=\"string\">category_form.category_form_data_source</item>\n        </item>\n        <item name=\"label\" xsi:type=\"string\" translate=\"true\">Category Information</item>\n        <item name=\"template\" xsi:type=\"string\">templates/form/collapsible</item>\n        <item name=\"reverseMetadataMerge\" xsi:type=\"boolean\">true</item>\n    </argument>\n    <settings>\n        <buttons>\n            <button name=\"save\" class=\"Magento\\\\Catalog\\\\Block\\\\Adminhtml\\\\Category\\\\Edit\\\\SaveButton\"/>\n            <button name=\"delete\" class=\"Magento\\\\Catalog\\\\Block\\\\Adminhtml\\\\Category\\\\Edit\\\\DeleteButton\"/>\n        </buttons>\n        <namespace>category_form</namespace>\n        <dataScope>data</dataScope>\n        <deps>\n            <dep>category_form.category_form_data_source</dep>\n        </deps>\n    </settings>\n    <dataSource name=\"category_form_data_source\">\n        <argument name=\"data\" xsi:type=\"array\">\n            <item name=\"js_config\" xsi:type=\"array\">\n                <item name=\"component\" xsi:type=\"string\">Magento_Ui/js/form/provider</item>\n            </item>\n        </argument>\n        <settings>\n            <validateUrl path=\"catalog/category/validate\"/>\n            <submitUrl path=\"catalog/category/save\"/>\n        </settings>\n        <dataProvider class=\"Magento\\\\Catalog\\\\Model\\\\Category\\\\DataProvider\" name=\"category_form_data_source\">\n            <settings>\n                <requestFieldName>id</requestFieldName>\n                <primaryFieldName>entity_id</primaryFieldName>\n            </settings>\n        </dataProvider>\n    </dataSource>\n    <fieldset name=\"general\" sortOrder=\"5\">\n        <settings>\n            <collapsible>false</collapsible>\n            <label/>\n        </settings>\n        <field name=\"id\" formElement=\"hidden\">\n            <argument name=\"data\" xsi:type=\"array\">\n                <item name=\"config\" xsi:type=\"array\">\n                    <item name=\"source\" xsi:type=\"string\">category</item>\n                </item>\n            </argument>\n            <settings>\n                <dataType>text</dataType>\n            </settings>\n        </field>\n    </fieldset>\n</form>\n`}</code></pre>\n    <p>{`In the above example, within the top-level `}<inlineCode parentName=\"p\">{`<form>`}</inlineCode>{` node the `}<inlineCode parentName=\"p\">{`<fieldset>`}</inlineCode>{` node is nested. It declares the Fieldset UI component.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` attribute value must be a unique among the other components on the same hierarchical level of the same parent node. Look at the `}<inlineCode parentName=\"p\">{`<argument>`}</inlineCode>{` node which `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` attribute has `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` value. The child nodes of this node are the arguments that will be passed in to the component.`}</p>\n    <p>{`All other child nodes are declared as items. `}<inlineCode parentName=\"p\">{`<item name=\"config\"> ...</item>`}</inlineCode>{` contains the children nodes that describe the configuration of the current UI component. Please note that although configuration for all components is different, there are base properties that are mostly the same for different components. For example, we can use `}<inlineCode parentName=\"p\">{`<item name=\"component\">...</item>`}</inlineCode>{` to define which JS file will be used as the Model for the Fieldset UI component in the above example. Reference to this JS file can be either be the full path to this file or the alias which is defined in `}<a parentName=\"p\" {...{\n        \"href\": \"../../javascript/requirejs.md\"\n      }}><inlineCode parentName=\"a\">{`require.js`}</inlineCode></a>{` configuration.`}</p>\n    <p>{`In this example we showed only a small part of the possible configuration.`}</p>\n    <p>{`The default configuration of a UI component is declared in one of the following ways:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`inside the UI component itself, in the `}<inlineCode parentName=\"li\">{`.js`}</inlineCode>{` file`}</li>\n      <li parentName=\"ul\">{`in the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/ui_component/etc/definition.xml\"\n        }}><inlineCode parentName=\"a\">{`definition.xml`}</inlineCode>{` file`}</a></li>\n      <li parentName=\"ul\">{`in both places, in which case the configurations merge (the UI component `}<inlineCode parentName=\"li\">{`.js`}</inlineCode>{` file has priority).`}</li>\n    </ul>\n    <p>{`In the example, the `}<inlineCode parentName=\"p\">{`<item name=\"component\">...</item>`}</inlineCode>{` node within `}<inlineCode parentName=\"p\">{`<fieldset>`}</inlineCode>{` is omitted, because this property of the Fieldset UI component is already defined in `}<inlineCode parentName=\"p\">{`definition.xml`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-of-the-fieldset-node-configuration-in-the-definitionxml\"\n    }}>{`Example of the `}<inlineCode parentName=\"h3\">{`fieldset`}</inlineCode>{` node configuration in the `}<inlineCode parentName=\"h3\">{`definition.xml`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<fieldset class=\"Magento\\\\Ui\\\\Component\\\\Form\\\\Fieldset\">\n    <argument name=\"data\" xsi:type=\"array\">\n        <item name=\"js_config\" xsi:type=\"array\">\n            <item name=\"component\" xsi:type=\"string\">Magento_Ui/js/form/components/fieldset</item>\n        </item>\n    </argument>\n</fieldset>\n`}</code></pre>\n    <p>{`In the example of a basic component's configuration file, the Fieldset UI component uses a merged configuration from both the `}<inlineCode parentName=\"p\">{`xml`}</inlineCode>{` file and from the UI component's `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file.`}</p>\n    <p>{`For more information about the configuration flow, refer to  the `}<a parentName=\"p\" {...{\n        \"href\": \"configuration-flow.md\"\n      }}>{`Configuration Flow of UI Components`}</a>{` topic.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}