{"version":3,"file":"component---src-pages-guide-validations-custom-rules-md-29d90cc4b89ec534f5ba.js","mappings":"iSAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,gCADR,iCAGA,kGAAmF,uBAAYC,WAAW,KAAvB,mBAAnF,4BAA0K,uBAAYA,WAAW,KAAvB,yBAA1K,6EACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,2MAUL,0IACA,mBAAG,uBAAYA,WAAW,KAAvB,qDACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,yJAYL,mBAAG,uBAAYA,WAAW,KAAvB,4DACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,2SAgBL,eACE,GAAM,yCADR,0CAGA,qJACuD,cAAGA,WAAW,IACjE,KAAQ,4HACP,uBAAYA,WAAW,KAAvB,yBAFkD,WADvD,MAIA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,sxBAyBL,0BAAW,uBAAYA,WAAW,KAAvB,YAAX,iPAEA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,yOAWL,mHAGH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/guide/validations/custom-rules.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"custom-form-validation-rules\"\n    }}>{`Custom form validation rules`}</h1>\n    <p>{`Custom validation rules can be added by creating a Javascript mixin for the `}<inlineCode parentName=\"p\">{`mage/validation`}</inlineCode>{` module and calling the `}<inlineCode parentName=\"p\">{`$.validator.addMethod`}</inlineCode>{` function with the custom validation rule parameters as described below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`$.validator.addMethod(\n  'rule-name',\n  function(value, element) {\n    // Return true or false after validation rule check\n  },\n  $.mage.__('Error message to display if validation fails')\n)\n`}</code></pre>\n    <p>{`This code snippet adds a simple new validation rule to the mixin to validate if an input field has only five words.`}</p>\n    <p><inlineCode parentName=\"p\">{`Vendor/Module/view/frontend/requirejs-config.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var config = {\n  config: {\n    mixins: {\n      'mage/validation': {\n        'Vendor_Module/js/validation-mixin': true\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Vendor/Module/view/frontend/web/js/validation-mixin.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`define(['jquery'], function($) {\n  'use strict';\n\n  return function() {\n    $.validator.addMethod(\n      'validate-five-words',\n      function(value, element) {\n        return value.split(' ').length == 5;\n      },\n      $.mage.__('Please enter exactly five words')\n    )\n  }\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"modify-an-existing-validation-message\"\n    }}>{`Modify an existing validation message`}</h2>\n    <p>{`It is possible to adjust the existing error message for form fields.\nThis is implemented in the core codebase in scope of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CatalogSearch/view/frontend/templates/advanced/form.phtml\"\n      }}><inlineCode parentName=\"a\">{`Magento_CatalogSearch`}</inlineCode>{` module`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<script>\nrequire([\n    \"jquery\",\n    \"mage/mage\",\n    \"mage/validation\"\n], function($){\n    $('#form-validate').mage('validation', {\n        errorPlacement: function (error, element) {\n            var parent = element.parent();\n            if (parent.hasClass('range')) {\n                parent.find(this.errorElement + '.' + this.errorClass).remove().end().append(error);\n            } else {\n                error.insertAfter(element);\n            }\n        },\n        messages: {\n            'price[to]': {'greater-than-equals-to': '<?= $block->escapeJs(__('Please enter a valid price range.')) ?>'},\n            'price[from]': {'less-than-equals-to': '<?= $block->escapeJs(__('Please enter a valid price range.')) ?>'}\n        }\n    });\n});\n</script>\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`messages`}</inlineCode>{` object is the one that does the job - they key is the input name and the value is a list of validation rules that should be modified for the specified input field.\nHere the rule name is the key and the validation message is the value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`$('#form-to-validate').mage('validation', {\n    messages: {\n        'input-name': {\n            'validation-rule-1': 'Validation message 1',\n            'validation-rule-2': 'Validation message 2',\n        },\n    }\n});\n`}</code></pre>\n    <p>{`This comes in handy when the error message needs to be specific but the rule does not change.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}