"use strict";(self.webpackChunkcommerce_frontend_core=self.webpackChunkcommerce_frontend_core||[]).push([[6494],{43128:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return m}});var o=t(87462),a=t(45987),r=(t(35776),t(3905)),l=t(91515);const i=["components"],s={},c={_frontmatter:s},p=l.Z;function m(e){let{components:n}=e,t=(0,a.Z)(e,i);return(0,r.mdx)(p,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"update-the-page-url-type"},"Update the page URL type"),(0,r.mdx)("p",null,"This topic describes how to extend the existing ",(0,r.mdx)("a",{parentName:"p",href:"../components/url-input.md"},(0,r.mdx)("inlineCode",{parentName:"a"},"UrlInput")," component")," to implement a new link type, or update an existing one, for your module."),(0,r.mdx)("h2",{id:"create-the-link-class"},"Create the link class"),(0,r.mdx)("p",null,"Create a ",(0,r.mdx)("inlineCode",{parentName:"p"},".php")," file implementing the new link class in the module directory containing the applicable UI component, such as ",(0,r.mdx)("inlineCode",{parentName:"p"},"<your-module>/Ui/Component/UrlInput/"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-php"},"<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndeclare(strict_types=1);\n\nnamespace %your module namespace%;\n\nuse Magento\\Framework\\UrlInterface;\n\n/** Provides configuration for url input with type CMS page */\nclass Page implements \\Magento\\Ui\\Model\\UrlInput\\ConfigInterface\n{\n    /**\n     * @var \\Magento\\Framework\\UrlInterface\n     */\n    private $urlBuilder;\n    /**\n     * @param UrlInterface $urlBuilder\n     */\n    public function __construct(UrlInterface $urlBuilder)\n    {\n        $this->urlBuilder = $urlBuilder;\n    }\n    /**\n     * {@inheritdoc}\n     */\n    public function getConfig(): array\n    {\n        return [\n            'label' => __('Page'),\n            'component' => '%link to .js component you will complete in next step%',\n            'disableLabel' => true,\n            'filterOptions' => true,\n            'searchOptions' => true,\n            'chipsEnabled' => true,\n            'levelsVisibility' => '1',\n            'options' => [],\n            'sortOrder' => 45,\n            'multiple' => false,\n            'closeBtn' => true,\n            'template' => 'ui/grid/filters/elements/ui-select',\n            'searchUrl' => $this->urlBuilder->getUrl('%path for search controller%'),\n            'filterPlaceholder' => __('Page Name'),\n            'isDisplayEmptyPlaceholder' => true,\n            'emptyOptionsHtml' => __('Start typing to find cms page'),\n            'missingValuePlaceholder' => __('Cms Page with ID: %s doesn\\'t exist'),\n            'isDisplayMissingValuePlaceholder' => true,\n            'validationUrl' => $this->urlBuilder->getUrl('%path for validation controller%'),\n        ];\n    }\n}\n")),(0,r.mdx)("h2",{id:"add-the-link-to-the-dixml-file"},"Add the link to the ",(0,r.mdx)("inlineCode",{parentName:"h2"},"di.xml")," file"),(0,r.mdx)("p",null,"Add the link class you just created to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"di.xml")," file."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<type name="Magento\\Ui\\Model\\UrlInput\\LinksConfigProvider">\n    <arguments>\n        <argument name="linksConfiguration" xsi:type="array">\n            <item name="page" xsi:type="string">%link to your class%</item>\n        </argument>\n    </arguments>\n</type>\n')),(0,r.mdx)("h2",{id:"create-the-components-javascript-implementation"},"Create the component's JavaScript implementation"),(0,r.mdx)("p",null,"Create the JavaScript implementation for the applicable UI component in your module-specific directory, such as ",(0,r.mdx)("inlineCode",{parentName:"p"},"<your-module>/view/<area>/web/js/form/element/page-ui-select.js"),"."),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"<area>")," would be ",(0,r.mdx)("inlineCode",{parentName:"p"},"adminhtml"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"frontend"),", or ",(0,r.mdx)("inlineCode",{parentName:"p"},"base")," depending on where you are applying the component implementation."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/ui-select',\n    'jquery',\n    'underscore'\n], function (Select, $, _) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            validationUrl: false,\n            loadedOption: {},\n            validationLoading: true\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n\n            this.validateInitialValue();\n\n            return this;\n        },\n\n        /**\n         * Validate initial value actually exists\n         */\n        validateInitialValue: function () {\n            if (!_.isEmpty(this.value())) {\n                $.ajax({\n                    url: this.validationUrl,\n                    type: 'GET',\n                    dataType: 'json',\n                    context: this,\n                    data: {\n                        cmsPageId: this.value()\n                    },\n\n                    /** @param {Object} response */\n                    success: function (response) {\n                        if (!_.isEmpty(response)) {\n                            this.options([response]);\n                            this.loadedOption = response;\n                        }\n                    },\n\n                    /** set empty array if error occurs */\n                    error: function () {\n                        this.options([]);\n                    },\n\n                    /** stop loader */\n                    complete: function () {\n                        this.validationLoading(false);\n                        this.setCaption();\n                    }\n                });\n            } else {\n                this.validationLoading(false);\n            }\n        },\n\n        /** @inheritdoc */\n        getSelected: function () {\n            var options = this._super();\n\n            if (!_.isEmpty(this.loadedOption)) {\n                return this.value() === this.loadedOption.value ? [this.loadedOption] : options;\n            }\n\n            return options;\n        },\n\n        /**\n         * Get path to current option\n         *\n         * @param {Object} data - option data\n         * @returns {String} path\n         */\n        getPath: function (data) {\n            var path = '';\n\n            if (this.renderPath) {\n                path = data.identifier || path;\n            }\n\n            return path;\n        }\n    });\n});\n")),(0,r.mdx)("h2",{id:"create-a-controller-to-search-the-page"},"Create a controller to search the page"),(0,r.mdx)("p",null,"Create a controller to search the page using a search key."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-php"},"<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndeclare(strict_types=1);\n\nnamespace %path to your module namespace%;\n\nuse Magento\\Framework\\App\\Action\\HttpGetActionInterface;\nuse Magento\\Framework\\App\\Action\\HttpPostActionInterface;\nuse Magento\\Framework\\UrlInterface;\n\nclass Search extends \\Magento\\Backend\\App\\Action implements HttpGetActionInterface, HttpPostActionInterface\n{\n    /**\n     * Authorization level of a basic admin session\n     *\n     * @see _isAllowed()\n     */\n    const ADMIN_RESOURCE = 'Magento_Cms::save';\n    /**\n     * @var \\Magento\\Framework\\Controller\\Result\\JsonFactory\n     */\n    private $resultJsonFactory;\n    /**\n     * @var \\Magento\\Cms\\Model\\ResourceModel\\Page\\CollectionFactory\n     */\n    private $cmsCollectionFactory;\n    /**\n     * @param \\Magento\\Framework\\Controller\\Result\\JsonFactory $resultFactory\n     * @param \\Magento\\Cms\\Model\\ResourceModel\\Page\\CollectionFactory $cmsCollectionFactory\n     * @param \\Magento\\Backend\\App\\Action\\Context $context\n     */\n    public function __construct(\n        \\Magento\\Framework\\Controller\\Result\\JsonFactory $resultFactory,\n        \\Magento\\Cms\\Model\\ResourceModel\\Page\\CollectionFactory $cmsCollectionFactory,\n        \\Magento\\Backend\\App\\Action\\Context $context\n    ) {\n        $this->resultJsonFactory = $resultFactory;\n        $this->cmsCollectionFactory = $cmsCollectionFactory;\n        parent::__construct($context);\n    }\n    /**\n     * @return \\Magento\\Framework\\Controller\\ResultInterface\n     */\n    public function execute(): \\Magento\\Framework\\Controller\\ResultInterface\n    {\n        $searchKey = $this->getRequest()->getParam('searchKey');\n        $pageNum = (int)$this->getRequest()->getParam('page');\n        $limit = (int)$this->getRequest()->getParam('limit');\n        /** @var \\Magento\\Cms\\Model\\ResourceModel\\Page\\Collection $cmsCollection */\n        $cmsCollection = $this->cmsCollectionFactory->create();\n        $cmsCollection->setCurPage($pageNum)->setPageSize($limit);\n        $totalValues = $cmsCollection->getSize();\n        $cmsCollection->addFilter('title', ['in'=> $searchKey]);\n        $pagesById = [];\n       /** @var \\Magento\\Cms\\Model\\Page $cmsPage */\n        foreach ($cmsCollection as $cmsPage) {\n            $cmsId = $cmsPage->getId();\n            $pagesById[$cmsId] = [\n                'value' => $cmsId,\n                'label' => $cmsPage->getTitle(),\n                'identifier' => sprintf(__('ID: %s'), $cmsId)\n            ];\n        }\n        /** @var \\Magento\\Framework\\Controller\\Result\\Json $resultJson */\n        $resultJson = $this->resultJsonFactory->create();\n        return $resultJson->setData([\n            'options' => $pagesById,\n            'total' => empty($pagesById) ? 0 : $totalValues\n        ]);\n    }\n}\n")),(0,r.mdx)("h2",{id:"create-a-controller-to-return-the-page-or-array"},"Create a controller to return the page or array"),(0,r.mdx)("p",null,"Create a controller to return the page, or empty array if the option doesn't exist, by the ",(0,r.mdx)("inlineCode",{parentName:"p"},"cmsPageId"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-php"},"<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndeclare(strict_types=1);\n\nnamespace %path to your module%;\n\nuse Magento\\Framework\\App\\Action\\HttpGetActionInterface;\n\nclass GetSelected extends \\Magento\\Backend\\App\\Action implements HttpGetActionInterface\n{\n    /**\n     * Authorization level of a basic admin session\n     *\n     * @see _isAllowed()\n     */\n    const ADMIN_RESOURCE = 'Magento_Cms::save';\n    /**\n     * @var \\Magento\\Framework\\Controller\\Result\\JsonFactory\n     */\n    private $resultJsonFactory;\n    /**\n     * @var \\Magento\\Cms\\Model\\ResourceModel\\Page\\CollectionFactory\n     */\n    private $cmsCollectionFactory;\n    /**\n     * GetSelected constructor.\n     * @param \\Magento\\Framework\\Controller\\Result\\JsonFactory $jsonFactory\n     * @param \\Magento\\Cms\\Model\\ResourceModel\\Page\\CollectionFactory $cmsCollectionFactory\n     * @param \\Magento\\Backend\\App\\Action\\Context $context\n     */\n    public function __construct(\n        \\Magento\\Framework\\Controller\\Result\\JsonFactory $jsonFactory,\n        \\Magento\\Cms\\Model\\ResourceModel\\Page\\CollectionFactory $cmsCollectionFactory,\n        \\Magento\\Backend\\App\\Action\\Context $context\n    ) {\n        $this->resultJsonFactory = $jsonFactory;\n        $this->cmsCollectionFactory = $cmsCollectionFactory;\n        parent::__construct($context);\n    }\n    /**\n     * @return \\Magento\\Framework\\Controller\\ResultInterface\n     */\n    public function execute() : \\Magento\\Framework\\Controller\\ResultInterface\n    {\n        $cmsPageId = $this->getRequest()->getParam('cmsPageId');\n        /** @var \\Magento\\Cms\\Model\\ResourceModel\\Page\\Collection $cmsPageCollection */\n        $cmsPageCollection = $this->cmsCollectionFactory->create();\n        $cmsPageCollection->addFilter('page_id', $cmsPageId);\n        $option = [];\n        if (!empty($cmsPageCollection->getFirstItem()->getData())) {\n            $cmsPage = $cmsPageCollection->getFirstItem();\n            $option = [\n                'value' => $cmsPageId,\n                'label' => $cmsPage->getTitle(),\n                'identifier' => sprintf(__('ID: %s'), $cmsPageId)\n            ];\n        }\n        /** @var \\Magento\\Framework\\Controller\\Result\\Json $resultJson */\n        $resultJson = $this->resultJsonFactory->create();\n        return $resultJson->setData($option);\n    }\n}\n")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-ui-components-howto-update-url-type-md-2e0d42d56392ce8a33ed.js.map