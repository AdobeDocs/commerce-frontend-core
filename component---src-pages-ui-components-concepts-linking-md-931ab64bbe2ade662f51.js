"use strict";(self.webpackChunkcommerce_frontend_core=self.webpackChunkcommerce_frontend_core||[]).push([[6344],{32584:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return m},default:function(){return u}});var a=t(87462),i=t(45987),o=(t(35776),t(3905)),r=t(91515);const l=["components"],m={},p=(s="InlineAlert",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var s;const d={_frontmatter:m},x=r.Z;function u(e){let{components:n}=e,t=(0,i.Z)(e,l);return(0,o.mdx)(x,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"linking-properties-of-ui-components"},"Linking properties of UI components"),(0,o.mdx)("p",null,"The following properties are used for linking observable properties and methods of UI components:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"exports")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"imports")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"links")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"listens"))),(0,o.mdx)("p",null,"These properties are processed by the ",(0,o.mdx)("inlineCode",{parentName:"p"},"initLinks()")," method of the ",(0,o.mdx)("a",{parentName:"p",href:"element.md"},(0,o.mdx)("inlineCode",{parentName:"a"},"uiElement")," class")," which is called at the moment of a component's instantiation."),(0,o.mdx)("p",null,"Linking properties are set in ",(0,o.mdx)("a",{parentName:"p",href:"configuration-flow.md"},"UI components configuration files"),": XML, JS, or PHP."),(0,o.mdx)("h2",{id:"exports-property"},(0,o.mdx)("inlineCode",{parentName:"h2"},"exports")," property"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"exports")," property is used to copy a local value to some external entity. If the external entity property is anything but a function, it will be set to the value of the local property. If the external property is a function, it will be called with the local properties value as an argument.\nIf the local value is a ko of io-es5 observable, the external entity will also be updated whenever the local property changes. ",(0,o.mdx)("inlineCode",{parentName:"p"},"exports"),"'s value is an object, composed of the following:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"key"),": name of the internal property or method that is tracked for changes."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"value"),": name of the property or method that receives the value. Can use ",(0,o.mdx)("a",{parentName:"li",href:"#template-strings-usage"},"string templates"),".")),(0,o.mdx)("p",null,"Example of setting ",(0,o.mdx)("inlineCode",{parentName:"p"},"exports")," in a component's ",(0,o.mdx)("inlineCode",{parentName:"p"},".js")," file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "defaults": {\n    "exports": {\n      "visible": "${ $.provider }:visibility"\n    }\n  }\n}\n')),(0,o.mdx)("p",null,"Here ",(0,o.mdx)("inlineCode",{parentName:"p"},"visible")," is the ",(0,o.mdx)("inlineCode",{parentName:"p"},"key"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"${ $.provider }:visibility")," is the ",(0,o.mdx)("inlineCode",{parentName:"p"},"value"),". The value of the local ",(0,o.mdx)("inlineCode",{parentName:"p"},"visible")," property is assigned to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"visibility")," property of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"provider")," component. The latter is changed automatically if the value of ",(0,o.mdx)("inlineCode",{parentName:"p"},"visible")," changes if the local ",(0,o.mdx)("inlineCode",{parentName:"p"},"visible")," property is observable (which it isn't given only the code example above)."),(0,o.mdx)("p",null,"Example of setting ",(0,o.mdx)("inlineCode",{parentName:"p"},"exports")," directly using the destination component name:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "defaults": {\n    "exports": {\n      "items": "checkout.sidebar.summary.cart_items:items"\n    }\n  }\n}\n')),(0,o.mdx)("p",null,"The syntax for the destination component name is determined by the hierarchy in the XML handle. Separate parent names with a ",(0,o.mdx)("inlineCode",{parentName:"p"},".")," (dot) followed by the component name."),(0,o.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"To retrieve the full name of the destination component name, open your browser in developer mode, select the element that you want on the ",(0,o.mdx)("strong",{parentName:"p"},"Elements")," tab, go to the ",(0,o.mdx)("strong",{parentName:"p"},"Console")," tab, and execute the following code: ",(0,o.mdx)("inlineCode",{parentName:"p"},"require('ko').contextFor($0).$data.name"),"."),(0,o.mdx)("p",null,"Example of setting ",(0,o.mdx)("inlineCode",{parentName:"p"},"exports")," in a component's configuration ",(0,o.mdx)("inlineCode",{parentName:"p"},".xml")," file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'<argument name="data" xsi:type="array">\n    <item name="config" xsi:type="array">\n        <item name="exports" xsi:type="array">\n            <item name="visible" xsi:type="string">sample_config.sample_provider:visibility</item>\n        </item>\n    </item>\n</argument>\n')),(0,o.mdx)("p",null,"For an example of ",(0,o.mdx)("inlineCode",{parentName:"p"},"exports")," usage, see ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CatalogInventory/view/adminhtml/ui_component/product_form.xml#L76"},(0,o.mdx)("inlineCode",{parentName:"a"},"product_form.xml"),", line 76")),(0,o.mdx)("h2",{id:"imports-property"},(0,o.mdx)("inlineCode",{parentName:"h2"},"imports")," property"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"imports")," property is used for tracking changes of an external entity property. ",(0,o.mdx)("inlineCode",{parentName:"p"},"imports"),"'s value is an object, composed of the following:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"key"),": name of the internal property or method that receives the value."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"value"),": name of the property or method that is tracked for changes. Can use ",(0,o.mdx)("a",{parentName:"li",href:"#template-strings-usage"},"string templates"),".")),(0,o.mdx)("p",null,"Example of using ",(0,o.mdx)("inlineCode",{parentName:"p"},"imports")," in a component's ",(0,o.mdx)("inlineCode",{parentName:"p"},".js")," file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "defaults": {\n    "imports": {\n      "visible": "${ $.provider }:visibility"\n    }\n  }\n}\n')),(0,o.mdx)("p",null,"Here the value of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"visibility")," property of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"provider")," component is assigned to the local ",(0,o.mdx)("inlineCode",{parentName:"p"},"visible")," property. If the latter is a ko or ko-es5 observable, the local property is automatically updated if ",(0,o.mdx)("inlineCode",{parentName:"p"},"visibility")," changes."),(0,o.mdx)("p",null,"Example of using ",(0,o.mdx)("inlineCode",{parentName:"p"},"imports")," in a component's configuration ",(0,o.mdx)("inlineCode",{parentName:"p"},".xml")," file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'<argument name="data" xsi:type="array">\n    <item name="config" xsi:type="array">\n        <item name="imports" xsi:type="array">\n            <item name="visible" xsi:type="string">sample_config.sample_provider:visibility</item>\n        </item>\n    </item>\n</argument>\n')),(0,o.mdx)("p",null,"For an example of ",(0,o.mdx)("inlineCode",{parentName:"p"},"imports")," usage, see ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CatalogInventory/view/adminhtml/ui_component/product_form.xml#L105"},(0,o.mdx)("inlineCode",{parentName:"a"},"product_form.xml"),", line 105")),(0,o.mdx)("h2",{id:"links-property"},(0,o.mdx)("inlineCode",{parentName:"h2"},"links")," property"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"links")," property is used for cross tracking properties changes: both linked properties are tracked and changing of one results in changing the other. ",(0,o.mdx)("inlineCode",{parentName:"p"},"links"),"'s value is an object, composed of the following:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"key"),": name of the internal property or method that sends and receives the notifications."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"value"),": name of the property or method that sends and receives the value. Can use ",(0,o.mdx)("a",{parentName:"li",href:"#template-strings-usage"},"string templates"),".")),(0,o.mdx)("p",null,"Example of using ",(0,o.mdx)("inlineCode",{parentName:"p"},"links")," in a component's ",(0,o.mdx)("inlineCode",{parentName:"p"},".js")," file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "defaults": {\n    "links": {\n      "visible": "${ $.provider }:visibility"\n    }\n  }\n}\n')),(0,o.mdx)("p",null,"Here the local ",(0,o.mdx)("inlineCode",{parentName:"p"},"visible")," property is linked with the ",(0,o.mdx)("inlineCode",{parentName:"p"},"visibility"),"  property of the provider component. If any of them is a ko or ko-es5 observable and changes, the other is changed automatically. If a non-observable linked property is changed the other is not updated automatically."),(0,o.mdx)("p",null,"Example of using ",(0,o.mdx)("inlineCode",{parentName:"p"},"links")," in a component's configuration ",(0,o.mdx)("inlineCode",{parentName:"p"},".xml")," file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'<argument name="data" xsi:type="array">\n    <item name="config" xsi:type="array">\n        <item name="links" xsi:type="array">\n            <item name="visible" xsi:type="string">sample_config.sample_provider:visibility</item>\n        </item>\n    </item>\n</argument>\n')),(0,o.mdx)("p",null,"For an example of ",(0,o.mdx)("inlineCode",{parentName:"p"},"links")," usage, see ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/form/element/text.js#L22"},(0,o.mdx)("inlineCode",{parentName:"a"},"text.js"),", line 22")),(0,o.mdx)("h2",{id:"listens-property"},(0,o.mdx)("inlineCode",{parentName:"h2"},"listens")," property"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"listens")," property is used to track the changes of a component's property. ",(0,o.mdx)("inlineCode",{parentName:"p"},"listens"),"'s value is an object, composed of the following:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"key"),": name of the observable property or method which is tracked for changes. Can use ",(0,o.mdx)("a",{parentName:"li",href:"#template-strings-usage"},"string templates"),"."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"value"),": name of the internal method or property which listens to the changes.")),(0,o.mdx)("p",null,"Example of using ",(0,o.mdx)("inlineCode",{parentName:"p"},"listens")," in a component's ",(0,o.mdx)("inlineCode",{parentName:"p"},".js")," file :"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "defaults": {\n    "listens": {\n      "${ $.provider }:visibility": "visibilityChanged"\n    }\n  }\n}\n')),(0,o.mdx)("p",null,"Here the local ",(0,o.mdx)("inlineCode",{parentName:"p"},"visibilityChanged")," property is a method that will be called when the ",(0,o.mdx)("inlineCode",{parentName:"p"},"visibility")," property of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"provider")," component changes. It receives the new value as an argument. If the local property is not a function, it will be set to the new value.\nThe external property has to be an observable in order for ",(0,o.mdx)("inlineCode",{parentName:"p"},"listens")," to have any effect."),(0,o.mdx)("p",null,"Example of using ",(0,o.mdx)("inlineCode",{parentName:"p"},"listens")," in a component's configuration ",(0,o.mdx)("inlineCode",{parentName:"p"},".xml")," file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'<argument name="data" xsi:type="array">\n    <item name="config" xsi:type="array">\n        <item name="listens" xsi:type="array">\n            <item name="sample_config.sample_provider:visibility" xsi:type="string">visibilityChanged</item>\n        </item>\n    </item>\n</argument>\n')),(0,o.mdx)("p",null,"For an example of ",(0,o.mdx)("inlineCode",{parentName:"p"},"listens")," usage, see ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/view/adminhtml/ui_component/new_category_form.xml#L84"},(0,o.mdx)("inlineCode",{parentName:"a"},"new_category_form.xml"),", line 84")),(0,o.mdx)("h2",{id:"template-strings-usage"},"Template strings usage"),(0,o.mdx)("p",null,"The options of linking properties can contain template strings in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"'${...}'")," format. During the component's initialization, values in this format are processed as template strings using ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals"},"ES6 templates"),". In browsers that do not support ES6 templates, these values are processed as underscore templates."),(0,o.mdx)("p",null,"So if we put a variable name in ",(0,o.mdx)("inlineCode",{parentName:"p"},"'${...}'"),", it is processed into a string representation of the variable's value."),(0,o.mdx)("p",null,"When working with UI components, we often need to use the string representation of a certain property of the UI component. To address a property of the UI component in the scope of this component, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"$.someProperty")," syntax is used."),(0,o.mdx)("p",null,"As a result, if the component's property is the variable for the template string, we get notation similar to the following:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"${ $.provider }:foo\n")),(0,o.mdx)("p",null,"If the string would be built at runtime it would be equivalent to ",(0,o.mdx)("inlineCode",{parentName:"p"},"this.provider + ':foo'"),"."),(0,o.mdx)("p",null,"We can also build complex templates strings using this syntax, as follows:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Using variables from the other component:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"'${ $.provider }:${ $.dataScope }' // 'provider' is the full name of the other component\n"))),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Calling several functions in one string:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"'${ $.provider }:data.overload': 'overload reset validate'// we call 'overload', 'reset', 'validate'\n"))),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Using inline conditions:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"'${ $.provider }:${ $.customScope ? $.customScope + \".\" : \"\"}data.validate': 'validate'\n")))))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-ui-components-concepts-linking-md-931ab64bbe2ade662f51.js.map