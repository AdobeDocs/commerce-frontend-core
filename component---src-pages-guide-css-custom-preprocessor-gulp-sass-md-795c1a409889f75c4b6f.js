"use strict";(self.webpackChunkcommerce_frontend_core=self.webpackChunkcommerce_frontend_core||[]).push([[213],{6277:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return i},default:function(){return l}});var t=a(87462),r=a(63366),s=(a(15007),a(64983)),o=a(91515),p=["components"],i={},d={_frontmatter:i},m=o.Z;function l(e){var n=e.components,a=(0,r.Z)(e,p);return(0,s.mdx)(m,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"use-a-sass-preprocessor-and-gulp-task-runner"},"Use a Sass preprocessor and Gulp task runner"),(0,s.mdx)("p",null,"By default, the application uses ",(0,s.mdx)("a",{parentName:"p",href:"http://lesscss.org/"},"Less")," for themes styling. But you can use other stylesheet languages that can be compiled (processed) to CSS. For example, Sass is a popular alternative."),(0,s.mdx)("p",null,"If you decide not to use Less and the default ",(0,s.mdx)("a",{parentName:"p",href:"../ui-library.md"},"UI library"),", you need to create your own theme from scratch and use an alternative preprocessor. This topic describes how to configure and use the ",(0,s.mdx)("a",{parentName:"p",href:"http://gulpjs.com/"},"Gulp")," task runner and the gulp-sass package for the Sass preprocessor."),(0,s.mdx)("p",null,"For details about adding a custom preprocessor, see ",(0,s.mdx)("a",{parentName:"p",href:"add.md"},"Add custom CSS preprocessor"),"."),(0,s.mdx)("h2",{id:"install-gulp-and-its-sass-preprocessor"},"Install Gulp and its Sass preprocessor"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("p",{parentName:"li"},"In the root of the theme directory, create an empty ",(0,s.mdx)("inlineCode",{parentName:"p"},"package.json")," and copy-paste the following code:"),(0,s.mdx)("pre",{parentName:"li"},(0,s.mdx)("code",{parentName:"pre",className:"language-json"},' {\n   "author": "Adobe Commerce Inc.",\n   "description": "Node module dependencies for local development",\n   "version": "1.0.0",\n   "main": "gulpfile.js",\n   "dependencies": {\n     "path": "^0.12.7"\n   },\n   "devDependencies": {\n     "gulp": "^3.9.1",\n     "gulp-notify": "^3.0.0",\n     "gulp-plumber": "^1.1.0",\n     "gulp-sass": "^3.1.0"\n   },\n   "scripts": {\n     "test": "echo \\"Error: no test specified\\" && exit 1"\n   }\n }\n'))),(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("p",{parentName:"li"},"Install Gulp by running the following command in a command prompt:"),(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("inlineCode",{parentName:"p"},"npm install --save gulp-install"))),(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("p",{parentName:"li"},"Add the gulp-sass package for the Sass preprocessor by running the following command:"),(0,s.mdx)("p",{parentName:"li"},(0,s.mdx)("inlineCode",{parentName:"p"},"npm install gulp-sass")))),(0,s.mdx)("h2",{id:"create-a-theme-and-add-sass-styles"},"Create a theme and add Sass styles"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("p",{parentName:"li"},"Create a theme, as described in ",(0,s.mdx)("a",{parentName:"p",href:"../../themes/create-storefront.md"},"Create a new storefront theme"),".")),(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("p",{parentName:"li"},"Set up a Gulp task for Sass compilation by placing the file with the task code in the root of your theme directory (",(0,s.mdx)("inlineCode",{parentName:"p"},"app/design/frontend/<Vendor>/<theme>"),"). Create an empty ",(0,s.mdx)("inlineCode",{parentName:"p"},"app/design/frontend/<Vendor>/<theme>/gulpfile.js")," file and copy-paste this code into it (no changes needed):"),(0,s.mdx)("pre",{parentName:"li"},(0,s.mdx)("code",{parentName:"pre",className:"language-js"}," var gulp         = require('gulp'),\n     sass         = require('gulp-sass'),\n     plumber      = require('gulp-plumber'),\n     notify       = require('gulp-notify');\n\n var config = {\n     src           : './web/css/*.scss',\n     dest          : './web/css/'\n };\n\n // Error message\n var onError = function (err) {\n     notify.onError({\n         title   : 'Gulp',\n         subtitle: 'Failure!',\n         message : 'Error: <%= error.message %>',\n         sound   : 'Beep'\n     })(err);\n\n     this.emit('end');\n };\n\n // Compile CSS\n   gulp.task('styles', function () {\n       var stream = gulp\n           .src([config.src])\n           .pipe(plumber({errorHandler: onError}))\n           .pipe(sass().on('error', sass.logError));\n\n       return stream\n           .pipe(gulp.dest('./web/css/'));\n   });\n")),(0,s.mdx)("p",{parentName:"li"},"This task uses ",(0,s.mdx)("inlineCode",{parentName:"p"},"styles.scss"),", stored in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"app/design/frontend/<Vendor>/<theme>/web/css/")," directory, as the source of Sass. It stores the generated CSS in ",(0,s.mdx)("inlineCode",{parentName:"p"},"styles.css")," in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"app/design/frontend/<Vendor>/<theme>")," directory.")),(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("p",{parentName:"li"},"Put the source ",(0,s.mdx)("inlineCode",{parentName:"p"},"styles.scss")," file in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"app/design/frontend/<Vendor>/<theme>/web/css/")," directory.")),(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("p",{parentName:"li"},"Declare the resulting CSS file in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"default_head_blocks.xml")," file in the ",(0,s.mdx)("inlineCode",{parentName:"p"},"app/design/frontend/<Vendor>/<theme/Magento_Theme/layout/")," directory to enable your theme to use the generated CSS. You can create an empty ",(0,s.mdx)("inlineCode",{parentName:"p"},"default_head_blocks.xml")," file and copy the following code:"),(0,s.mdx)("pre",{parentName:"li"},(0,s.mdx)("code",{parentName:"pre",className:"language-xml"},'<page xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">\n    <head>\n        <css src="css/styles.css"/>\n    </head>\n</page>\n'))),(0,s.mdx)("li",{parentName:"ol"},(0,s.mdx)("p",{parentName:"li"},"To generate CSS, run\n",(0,s.mdx)("inlineCode",{parentName:"p"},"gulp styles"),"."))),(0,s.mdx)("h2",{id:"using-the-import-directive-in-sass"},"Using the @import directive in Sass"),(0,s.mdx)("p",null,"In the source .",(0,s.mdx)("inlineCode",{parentName:"p"},"scss")," files you can use the ",(0,s.mdx)("inlineCode",{parentName:"p"},"@import")," directive, to import other ",(0,s.mdx)("inlineCode",{parentName:"p"},".scss")," files. You can put the module-related stylesheets in the module directories in the theme, and then include them in the main ",(0,s.mdx)("inlineCode",{parentName:"p"},".scss")," file. For example, if you create a ",(0,s.mdx)("inlineCode",{parentName:"p"},"_catalogstls.scss")," file for styles of the ",(0,s.mdx)("inlineCode",{parentName:"p"},"Magento_Catalog")," module and put it in ",(0,s.mdx)("inlineCode",{parentName:"p"},"app/design/frontend/<Vendor>/<theme>/Magento_Catalog/styles"),", you can import it using the following notation:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-css"},"@import '../Magento_Theme/styles/module'\n")))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guide-css-custom-preprocessor-gulp-sass-md-795c1a409889f75c4b6f.js.map