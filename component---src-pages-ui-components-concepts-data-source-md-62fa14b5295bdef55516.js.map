{"version":3,"file":"component---src-pages-ui-components-concepts-data-source-md-62fa14b5295bdef55516.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/ui-components/concepts/data-source.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"data-sourcing\"\n    }}>{`Data sourcing`}</h1>\n    <p>{`The application provides the DataSource object, which is designed to interact with data in your UI component. Many of the core UI components use this DataSource component. Many UI components require that this object is included. However, there are specific requirements it has in order for it to work correctly.`}</p>\n    <p>{`In this topic, we will explain how to take advantage of the powerful functionality of the data provider in a UI Component.`}</p>\n    <h2 {...{\n      \"id\": \"declaring-the-xml\"\n    }}>{`Declaring the XML`}</h2>\n    <p>{`The DataSource UI component can be included with the `}<inlineCode parentName=\"p\">{`<dataSource />`}</inlineCode>{` node in the component's top-level configuration file. The `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` attribute is recommended and should follow the `}<inlineCode parentName=\"p\">{`%instance_name%_data_source`}</inlineCode>{` pattern where `}<inlineCode parentName=\"p\">{`%instance_name%`}</inlineCode>{` is the name of the component.`}</p>\n    <p>{`The component's data provider class is declared inside `}<inlineCode parentName=\"p\">{`<dataSource />`}</inlineCode>{`. The following provides an example and demonstrates what nodes are required.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<argument name=\"dataProvider\" xsi:type=\"configurableObject\">\n    <argument name=\"class\" xsi:type=\"string\">[YourNameSpace]\\\\[YourModule]\\\\Ui\\\\DataProvider\\\\[YourComponentName]\\\\DataProvider</argument>\n    <argument name=\"name\" xsi:type=\"string\">[YourComponentName]_data_source</argument>\n    <argument name=\"primaryFieldName\" xsi:type=\"string\">entity_id</argument>\n    <argument name=\"requestFieldName\" xsi:type=\"string\">id</argument>\n</argument>\n`}</code></pre>\n    <p>{`In the block of code above, `}{`[YourNameSpace]`}{`[`}{`YourModule] would be the directory that contains all of the module's files and directories. `}{`[YourComponentName]`}{` is the name of this instance of a component, which should be the file name as well.`}</p>\n    <p>{`The main node of interest is `}<inlineCode parentName=\"p\">{`<argument name=\"class\" />.`}</inlineCode>{` This references a PHP class that must implement `}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Framework\\\\View\\\\Element\\\\UiComponent\\\\DataProvider\\\\DataProviderInterface`}</inlineCode>{`. To meet that requirement, it can extend or implement the `}{`[`}<inlineCode parentName=\"p\">{`\\\\Magento\\\\Ui\\\\DataProvider\\\\ModifierPoolDataProvider`}</inlineCode>{`]`}{` class which inherits the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/DataProvider/AbstractDataProvider.php\"\n      }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Ui\\\\DataProvider\\\\AbstractDataProvider`}</inlineCode></a>{`. The `}<inlineCode parentName=\"p\">{`AbstractDataProvider`}</inlineCode>{` class implements all of the required methods in the `}<inlineCode parentName=\"p\">{`DataProviderInterface`}</inlineCode>{`. The DataProvider class is the primary source of any data or metadata that the component needs or will use.`}</p>\n    <p>{`While the XML tells the application about the component's data provider, the application does not do anything in particular with that unless you hook it up to the component's main PHP class. To make the data available in JavaScript, add a `}<inlineCode parentName=\"p\">{`getDataSourceData()`}</inlineCode>{` method to the UI component's PHP class and return `}<inlineCode parentName=\"p\">{`$this->getContext()->getDataProvider()->getData()`}</inlineCode>{`. This will output the result of the data provider's `}<inlineCode parentName=\"p\">{`getData()`}</inlineCode>{` method into the JSON that is sent to the browser along with the rest of the UI component's configuration.`}</p>\n    <p>{`Declare a `}<inlineCode parentName=\"p\">{`getData()`}</inlineCode>{` method in the data provider class that was referenced in the XML and return a value. Since that output will be part of the JSON rendered on the page, it is accessible via the JavaScript class that is associated with the UI component and handles its behavior. Magento's Form Provider JavaScript class is often a good place to start.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`A JavaScript \"component\" is actually a JavaScript file loaded through RequireJS. It should return a JavaScript object that defines a module or function. Do not confuse JavaScript components with UI components.`}</p>\n    <p>{`Include the Form Provider JavaScript component by adding this inside the `}<inlineCode parentName=\"p\">{`<dataSource />`}</inlineCode>{` node:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<argument name=\"data\" xsi:type=\"array\">\n    <item name=\"js_config\" xsi:type=\"array\">\n        <item name=\"component\" xsi:type=\"string\">Magento_Ui/js/form/provider</item>\n    </item>\n</argument>\n`}</code></pre>\n    <p>{`This will include `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/form/provider.js\"\n      }}><inlineCode parentName=\"a\">{`Magento/Ui/view/base/web/js/form/provider.js`}</inlineCode></a>{` on the page as part of this DataSource component. The Form Provider JavaScript can also be extended if the functionality doesn't do what is necessary in your case.`}</p>\n    <p>{`Remember that this data provider is still, technically speaking, a completely separate UI Component. To fully link it to the \"base\" component, there are a few things that need to happen so that the \"base\" UI component's JavaScript can use the data provided by the data provider.`}</p>\n    <p>{`A good way to keep configuration data out of the JavaScript is to declare a \"provider\" in the base component's XML so it will be able to find that data provider component. Under the `}<inlineCode parentName=\"p\">{`<argument name=\"data\" />`}</inlineCode>{` node, add a node like this (where `}<inlineCode parentName=\"p\">{`[ComponentName]`}</inlineCode>{` is the name of the component):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<item name=\"js_config\" xsi:type=\"array\">\n    <item name=\"provider\" xsi:type=\"string\">[ComponentName].[ComponentName]_data_source</item>\n</item>\n`}</code></pre>\n    <p>{`This example declares the name of the data provider class and will be output in the JSON that contains the UI component's configuration. It can then be used to locate the data source component. This is essentially declaring a variable that will be available to a JavaScript class.`}</p>\n    <h2 {...{\n      \"id\": \"javascript-template-literals\"\n    }}>{`JavaScript template literals`}</h2>\n    <p>{`Throughout Magento's core JavaScript components there are strings like this: `}<inlineCode parentName=\"p\">{`'\\${ $.provider }:data.totalRecords'`}</inlineCode>{`. These are ES2015 `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\n      }}>{`template literals`}</a>{`. The `}<inlineCode parentName=\"p\">{`\\${ }`}</inlineCode>{` surrounds an expression that will be parsed as JavaScript. `}<inlineCode parentName=\"p\">{`$.provider`}</inlineCode>{` is the expression, in this example.`}</p>\n    <p>{`The template literal is in a single-quote string, however, not the back-ticks which are standard for ES2015. As a result, they would normally be treated as a string. Since the application needs to support browsers that don't recognize template literals a special interpreter was built for them. If the browser does support standard back-tick template literals, the application will use that, and if not, it evaluates the value manually.`}</p>\n    <p>{`When the component is initialized, it will automatically evaluate all string literals in properties. In the example above, `}<inlineCode parentName=\"p\">{`$.provider`}</inlineCode>{` will become  `}<inlineCode parentName=\"p\">{`[ComponentName].[ComponentName]_data_source`}</inlineCode>{`. The value of this `}<inlineCode parentName=\"p\">{`provider`}</inlineCode>{` was declared in the `}<inlineCode parentName=\"p\">{`js_config`}</inlineCode>{` block in the XML above. It is possible to pass nearly any configuration value this way and access it using template literals.`}</p>\n    <p>{`But, XML is static and while that gets us the name of the data provider component, it still does not actually provide data. There is one more important step in providing data to JavaScript components.`}</p>\n    <h2 {...{\n      \"id\": \"javascript-component-linking\"\n    }}>{`JavaScript component linking`}</h2>\n    <p>{`Every JavaScript component should extend the core Element class in some way (mapped to `}<a parentName=\"p\" {...{\n        \"href\": \"element.md\"\n      }}><inlineCode parentName=\"a\">{`uiElement`}</inlineCode></a>{` with RequireJS and located in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/lib/core/element/element.js\"\n      }}><inlineCode parentName=\"a\">{`Magento/Ui/view/base/web/js/lib/core/element/element.js`}</inlineCode></a>{`.  When this class initializes it runs an `}<inlineCode parentName=\"p\">{`initLinks()`}</inlineCode>{` method. That method, in turn, passes a few class properties into a method that handles linking components together. This file (`}<inlineCode parentName=\"p\">{`lib/core/element/link.js`}</inlineCode>{`) binds the values of those parameters to actual components.`}</p>\n    <p>{`The properties that the application will parse are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`imports`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`exports`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`links`}</inlineCode></li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`links`}</inlineCode>{` property is the same as duplicating a value in both `}<inlineCode parentName=\"p\">{`imports`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`exports`}</inlineCode>{`. Each of those properties expect an object that contains key/value pairs to bind the expression to. In the example above, it would appear in the `}<inlineCode parentName=\"p\">{`defaults`}</inlineCode>{` property like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`imports: {\n    totalRecords: '\\${ $.provider }:data.totalRecords'\n}\n`}</code></pre>\n    <p>{`When the Element class initializes, it will process the link that was declared in `}<inlineCode parentName=\"p\">{`imports`}</inlineCode>{`. Remember that one of the first things the application does is process string literals, though, so it is actually working with something that looks more like the following (where `}<inlineCode parentName=\"p\">{`example`}</inlineCode>{` is the UI Component Name for clarity):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`imports: {\n    totalRecords: 'example.example_data_source:data.totalRecords'\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` is a special separator that is used to divide the component name that it is to link to and the values it should access in the returned value. No `}<inlineCode parentName=\"p\">{`:`}</inlineCode>{` is necessary, though, and the expression, `}<inlineCode parentName=\"p\">{`$.provider`}</inlineCode>{` could be any key that was passed into the JavaScript configuration.`}</p>\n    <p>{`In the example above, it will return the `}<inlineCode parentName=\"p\">{`totalRecords`}</inlineCode>{` property of the `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{` object in the `}<inlineCode parentName=\"p\">{`example.example_data_source`}</inlineCode>{` component. As a result of these connections, `}<inlineCode parentName=\"p\">{`totalRecords`}</inlineCode>{` will display the output of `}<inlineCode parentName=\"p\">{`DataProvider::getData()`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}