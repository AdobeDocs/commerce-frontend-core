{"version":3,"file":"component---src-pages-guide-responsive-design-breakpoints-md-4bad206a5339d280a7c0.js","mappings":"uSAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,2BACH,4BACL,kBAAK,8MAA4M,cAAGC,WAAW,IAC3N,KAAQ,sBACL,uBAA2B,yEAClC,kBAAK,4EACL,oBACE,eAAIA,WAAW,MAAO,8CACtB,eAAIA,WAAW,MAAO,yBAAuB,uBAAYA,WAAW,MAAO,oBAAiC,wDAC5G,eAAIA,WAAW,MAAO,0DAExB,eACE,GAAM,6BACH,8BACL,kBAAK,0CAAwC,uBAAYA,WAAW,KAAM,mCAAgD,mCAC1H,oBACE,eAAIA,WAAW,MAAO,kBAAgB,cAAGA,WAAW,KAChD,KAAQ,4BACL,YAAgB,4CAA0C,uBAAYA,WAAW,MAAO,mBAAgC,MAC/H,eAAIA,WAAW,MAAO,8DAExB,kBAAK,iBAAe,uBAAYA,WAAW,KAAM,mBAAgC,gEACjF,kBAAK,iBACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,kDAGP,kBAAK,oCAAkC,cAAGA,WAAW,IACjD,KAAQ,6EACL,yBAA6B,MACpC,eACE,GAAM,6CACH,aAAW,uBAAYA,WAAW,MAAO,oBAAiC,sBAC/E,kBAAK,kEAAgE,uBAAYA,WAAW,KAAM,kBAA+B,0EAAwE,uBAAYA,WAAW,KAAM,2CAAwD,MAC9R,kBAAK,wDAAsD,uBAAYA,WAAW,KAAM,kBAA+B,qFAAmF,uBAAYA,WAAW,KAAM,oBAAiC,sDACxQ,kBAAK,0CACL,oBACE,eAAIA,WAAW,MAAO,aAAW,uBAAYA,WAAW,MAAO,oBAAiC,kBAAgB,uBAAYA,WAAW,MAAO,wCAAqD,mDACjM,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,+DAA4E,iBAAe,uBAAYA,WAAW,MAAO,oBAAiC,4FAC5M,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,wDAAqE,0BAG3H,eAAIA,WAAW,MAAO,YAAU,uBAAYA,WAAW,MAAO,oBAAiC,mBAAiB,uBAAYA,WAAW,MAAO,gBAA6B,oIAE7K,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,QAAM,uBAAYC,WAAW,KAAM,iBAA8B,kDAAgD,uBAAYA,WAAW,KAAM,OAAoB,MAAI,uBAAYA,WAAW,KAAM,WAAwB,QAAM,uBAAYA,WAAW,KAAM,UAAuB,MAC1R,SAACX,EAAD,CAAaY,QAAQ,UAAUC,MAAM,OAAOH,QAAQ,iBACpD,kBAAK,iHACL,kBAAK,aACL,qBAAK,iBAAMC,WAAW,MAClB,UAAa,iBACV,2KAOP,eACE,GAAM,yBACH,QAAM,uBAAYA,WAAW,MAAO,kBAA+B,WACxE,kBAAK,0BAAwB,uBAAYA,WAAW,KAAM,kBAA+B,8CAA4C,uBAAYA,WAAW,KAAM,SAAsB,YACxL,kBAAK,aACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,iJAMV,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/guide/responsive-design/breakpoints.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-a-custom-breakpoint\"\n    }}>{`Add a custom breakpoint`}</h1>\n    <p>{`Breakpoints are used in stylesheets to set up the screen width at which the design changes, for example, from the mobile to the desktop version. Themes provided with the application implement a list of `}<a parentName=\"p\" {...{\n        \"href\": \"css.md#breakpoints\"\n      }}>{`default breakpoints`}</a>{`. This topic describes how to add a custom breakpoint in your theme.`}</p>\n    <p>{`To add a custom breakpoint in your theme, you need to do the following:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Define a variable for the new breakpoint.`}</li>\n      <li parentName=\"ol\">{`Override the library `}<inlineCode parentName=\"li\">{`_responsive.less`}</inlineCode>{` file, and add the new rule for the new breakpoint.`}</li>\n      <li parentName=\"ol\">{`Implement the screen changes for the new breakpoint.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"add-a-breakpoint-variable\"\n    }}>{`Add a breakpoint variable`}</h2>\n    <p>{`In your custom theme directory, add a `}<inlineCode parentName=\"p\">{`/web/css/source/_variables.less`}</inlineCode>{` in one of the following ways:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`if your theme `}<a parentName=\"li\" {...{\n          \"href\": \"../themes/inheritance.md\"\n        }}>{`inherits`}</a>{` from the other, then copy the parent's `}<inlineCode parentName=\"li\">{`_variables.less`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`if your theme is a standalone one, add a new empty file.`}</li>\n    </ul>\n    <p>{`In your file `}<inlineCode parentName=\"p\">{`_variables.less`}</inlineCode>{` in custom theme, add the variable for your new breakpoint.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-less\"\n      }}>{`@screen__xl: 1280px;\n@screen__lg: 1600px;\n`}</code></pre>\n    <p>{`For variables' naming rules see `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/php/coding-standards/less/#variables\"\n      }}>{`Less coding standards`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"override-_responsiveless-from-the-library\"\n    }}>{`Override `}<inlineCode parentName=\"h2\">{`_responsive.less`}</inlineCode>{` from the library`}</h2>\n    <p>{`According to the approach, implemented in the UI library, the `}<inlineCode parentName=\"p\">{`.media-width()`}</inlineCode>{` mixin calls are defined in many places, but invoked in one place, in `}<inlineCode parentName=\"p\">{`lib/web/css/source/lib/_responsive.less`}</inlineCode>{`.`}</p>\n    <p>{`To implement a new breakpoint, you need to edit the `}<inlineCode parentName=\"p\">{`.media-width()`}</inlineCode>{` mixin by adding the appropriate rule there. So you need to override the library `}<inlineCode parentName=\"p\">{`_responsive.less`}</inlineCode>{` in your theme, and add the customizations there.`}</p>\n    <p>{`To do this, take the following steps:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Copy the `}<inlineCode parentName=\"li\">{`_responsive.less`}</inlineCode>{` file to your `}<inlineCode parentName=\"li\">{`<your_theme_dir>/web/css/source/lib/`}</inlineCode>{` directory from one of the following locations:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<your_parent_theme_dir>/web/css/source/lib/_responsive.less`}</inlineCode>{`: overriding `}<inlineCode parentName=\"li\">{`_responsive.less`}</inlineCode>{` in the parent theme. If there's no such file or no parent theme, use the other option.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<your_theme_dir>/web/css/source/lib/_responsive.less`}</inlineCode>{`: the library file.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`In your `}<inlineCode parentName=\"li\">{`_responsive.less`}</inlineCode>{` file, add the `}<inlineCode parentName=\"li\">{`.media-width`}</inlineCode>{` mixin rule for your breakpoint in the corresponding section (desktop or mobile, depending on the type of breakpoint you add).`}</li>\n    </ol>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`@media-target`}</inlineCode>{` option may have one of the following values: `}<inlineCode parentName=\"p\">{`all`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`desktop`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`mobile`}</inlineCode>{`.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Use single quotes when specifying media-targets. Double quotes may cause unexpected issues with the scripts.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-less\"\n      }}>{`& when (@media-target = 'desktop'), (@media-target = 'all') {\n\n    @media all and (min-width: @screen__xl) {\n        .media-width('min', @screen__xl);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-media-width-calls\"\n    }}>{`Add `}<inlineCode parentName=\"h2\">{`.media-width()`}</inlineCode>{` calls`}</h2>\n    <p>{`Now you can add a new `}<inlineCode parentName=\"p\">{`.media-width()`}</inlineCode>{` mixin call where necessary in your theme `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` files.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-less\"\n      }}>{`.media-width(@extremum, @break) when (@extremum = 'min') and (@break = @screen__xl) {\n    //  Customization for @screen__xl breakpoint\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}