{"version":3,"file":"component---src-pages-page-builder-content-types-customize-add-text-editor-md-ccd434fbb75a8893a9e7.js","mappings":"uSAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,qBACH,sBACL,kBAAK,2HACL,eACE,GAAM,gDACH,iDACL,kBAAK,qDACL,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,MAAO,QAAM,uBAAYA,WAAW,KAAM,mBAAgC,aAAW,uBAAYA,WAAW,KAAM,2EAAwF,2FACxN,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,gBACV,ggBAYT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,+GAA6G,uBAAYA,WAAW,KAAM,UAAuB,WACtL,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,gBACV,0WAUX,eACE,GAAM,6BACH,eAAa,uBAAYA,WAAW,MAAO,cAA2B,UAC3E,kBAAK,kBAAgB,uBAAYA,WAAW,KAAM,kFAA+F,WACjJ,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,2CAAyC,uBAAYA,WAAW,KAAM,4CAAyD,kBACpJ,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,eACV,6LAMP,cAAGA,WAAW,MAAO,yIAAuI,uBAAYA,WAAW,KAAM,4CAAyD,+HAA6H,uBAAYA,WAAW,KAAM,0CAAuD,MACnc,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,eACV,yaAiBT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,wDAAsD,uBAAYA,WAAW,KAAM,2BAAwC,aAGpJ,eACE,GAAM,2EACH,4EACL,kBAAK,8BACL,kBAAK,kJACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,00BAeP,eACE,GAAM,wBACH,yBACL,kBAAK,8HAA4H,uBAAYA,WAAW,KAAM,UAAuB,WACrL,kBAAK,gDACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,6BAA2B,uBAAYA,WAAW,KAAM,UAAuB,2CACpG,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,gBACV,iyCAuBT,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,sFAAoF,uBAAYA,WAAW,KAAM,sBAAmC,MACzK,cAAGA,WAAW,MAAO,gIAA8H,uBAAYA,WAAW,KAAM,WAAwB,iGAE1M,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,gBAAc,uBAAYA,WAAW,KAAM,0BAAuC,iJACvG,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,uBACV,gZAaP,cAAGA,WAAW,MAAO,0EACrB,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,aAClD,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,YAClD,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAO,0BAGtD,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,kCAAgC,uBAAYA,WAAW,KAAM,oBAAiC,iLAErH,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,gBAAc,uBAAYA,WAAW,KAAM,QAAqB,uDAEvF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,gBAAc,uBAAYA,WAAW,KAAM,mBAAgC,kJAElG,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,gBAAc,uBAAYA,WAAW,KAAM,6BAA0C,oJAKjH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/content-types/customize/add-text-editor.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-a-text-editor\"\n    }}>{`Add a text editor`}</h1>\n    <p>{`This topic describes how to add a reusable inline text editing component to the Page Builder stage for a content type.`}</p>\n    <h2 {...{\n      \"id\": \"add-configuration-for-the-inline-text-editor\"\n    }}>{`Add configuration for the inline text editor`}</h2>\n    <p>{`To add configuration for the inline text editor:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Use `}<inlineCode parentName=\"p\">{`additional_data`}</inlineCode>{` in your `}<inlineCode parentName=\"p\">{`<YourModule>/view/base/pagebuilder/content_type/<content-type-name>.xml`}</inlineCode>{` XML config file to add the custom inline text editor configuration to a content type:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_PageBuilder:etc/content_type.xsd\">\n   ...\n       <additional_data>\n           <item name=\"wysiwygConfig\" xsi:type=\"array\">\n               <item name=\"wysiwygConfigData\" xsi:type=\"object\">Magento\\\\PageBuilder\\\\Model\\\\Config\\\\ContentType\\\\AdditionalData\\\\Provider\\\\Wysiwyg\\\\Config</item>\n               </item>\n           </item>\n       </additional_data>\n   </type>\n</config>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add your custom editor adapter class to the list of WYSIWYG adapters supporting inline text editing in the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`  <type name=\"Magento\\\\PageBuilder\\\\Model\\\\Wysiwyg\\\\InlineEditingSupportedAdapterList\">\n      <arguments>\n          <argument name=\"wysiwygAdaptersSupportingInlineEditing\" xsi:type=\"array\">\n              <item name=\"mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter\" xsi:type=\"boolean\">true</item>\n          </argument>\n      </arguments>\n  </type>\n`}</code></pre>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"update-the-previewjs-file\"\n    }}>{`Update the `}<inlineCode parentName=\"h2\">{`preview.js`}</inlineCode>{` file`}</h2>\n    <p>{`To update the `}<inlineCode parentName=\"p\">{`<YourModule>/view/adminhtml/web/js/content-type/<content_type_name>/preview.js`}</inlineCode>{` file:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add the inline text editing component, `}<inlineCode parentName=\"p\">{`Magento_PageBuilder/js/content-type/text`}</inlineCode>{`, dependency:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`define([\n\"Magento_PageBuilder/js/config\",\n\"Magento_PageBuilder/js/content-type/preview\",\n\"Magento_PageBuilder/js/wysiwyg/factory\"\n], function (_config, _preview, _factory) { ...\n`}</code></pre>\n        <p parentName=\"li\">{`If you are creating a custom content type, however, use an existing content type that already implements a WYSIWYG as your template. `}<inlineCode parentName=\"p\">{`Magento_PageBuilder/js/content-type/text`}</inlineCode>{` can be used as a reference for injecting the required inline text editor dependency into your own custom content type via `}<inlineCode parentName=\"p\">{`Magento_PageBuilder/js/wysiwyg/factory`}</inlineCode>{`:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`initWysiwyg: function (element) {\n    var self = this;\n    this.element = element;\n    element.id = this.parent.id + '-editor';\n    factory(\n        this.parent.id,\n        element.id,\n        this.config.name,\n        this.config.additional_data.wysiwygConfig.wysiwygConfigData,\n        this.parent.dataStore,\n        'content'\n    ).then(function (wysiwyg) {\n        self.wysiwyg = wysiwyg;\n    });\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add configuration for the inline text editor in the `}<inlineCode parentName=\"p\">{`<content-type-name>.xml`}</inlineCode>{` file.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"update-the-preview-template-to-display-the-inline-text-editor-component\"\n    }}>{`Update the preview template to display the inline text editor component`}</h2>\n    <p>{`This is an optional step.`}</p>\n    <p>{`If you want to create your own custom template, you can update your custom preview template file to display the inline text editor component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"pagebuilder-content-type pagebuilder-text\" event=\"{ mouseover: onMouseOver, mouseout: onMouseOut }, mouseoverBubble: false\">\n    <div if=\"isWysiwygSupported()\" class=\"inline-wysiwyg\" ko-style=\"data.main.style\" css=\"data.main.css\" attr=\"data.main.attributes\" afterRender=\"initWysiwyg\">\n        <div html=\"data.main.html\" />\n    </div>\n    <div if=\"isWysiwygSupported()\" class=\"placeholder-text\" ifnot=\"data.main.html\" translate=\"'Edit Text'\"></div>\n   <div ifnot=\"isWysiwygSupported()\">\n        <textarea\n            class=\"inline-wysiwyg-textarea\"\n            afterRender=\"initTextarea\"\n            event=\"{keyup: onTextareaKeyUp, focus: onTextareaFocus, blur: onTextareaBlur}\"\n            data-bind=\"attr: { placeholder: $t('Edit Text') }\" />\n    </div>\n    <render args=\"getOptions().template\" />\n</div>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"extend-the-component\"\n    }}>{`Extend the component`}</h2>\n    <p>{`You can override the default inline text editor component with your own component by adding relevant configuration to the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file.`}</p>\n    <p>{`To extend the inline text editor component:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add configuration to the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file for your component type preview:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`<type name=\"Magento\\\\PageBuilder\\\\Model\\\\Config\\\\ContentType\\\\AdditionalData\\\\Provider\\\\Wysiwyg\\\\Config\">\n    <arguments>\n        <argument name=\"editors\" xsi:type=\"array\">\n            <item name=\"mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter\" xsi:type=\"array\">\n                <item name=\"component\" xsi:type=\"string\">Magento_PageBuilder/js/wysiwyg/tinymce4</item>\n                <item name=\"component_initializers\" xsi:type=\"array\">\n                    <item name=\"text\" xsi:type=\"string\">Magento_PageBuilder/js/content-type/text/wysiwyg/tinymce4/component-initializer</item>\n                </item>\n                <item name=\"config_modifiers\" xsi:type=\"array\">\n                    <item name=\"text\" xsi:type=\"string\">Magento_PageBuilder/js/content-type/text/wysiwyg/tinymce4/config-modifier</item>\n                </item>\n                <item name=\"mode\" xsi:type=\"string\">inline</item>\n                <item name=\"minToolbarWidth\" xsi:type=\"number\">360</item>\n                <item name=\"parentSelectorsToUnderlay\" xsi:type=\"array\">\n                    <item name=\"0\" xsi:type=\"string\">.column-container</item>\n                    <item name=\"1\" xsi:type=\"string\">.row-container</item>\n                </item>\n            </item>\n        </argument>\n    </arguments>\n</type>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Specify the name of a preferred editor, as noted in the system configuration path `}<inlineCode parentName=\"p\">{`cms/wysiwyg/editor`}</inlineCode>{`.`}</p>\n        <p parentName=\"li\">{`This configuration can be specified for every editor that is supported for display on the inline editing mode on the stage. `}<inlineCode parentName=\"p\">{`factory`}</inlineCode>{` then returns the WYSIWYG instance referenced in your current Adobe Commerce configuration.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Specify the `}<inlineCode parentName=\"p\">{`component_initializers`}</inlineCode>{`, per content type, where the inline text editor component will be used. Within this configuration, you can extend the existing event logic:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`initialize: function(wysiwyg) {\n    var tinymce = wysiwyg.getAdapter();\n    this.element = $(\"#\" + wysiwyg.elementId);\n    this.config = wysiwyg.config;\n    tinymce.eventBus.attachEventHandler('afterFocus', this.onFocus.bind(this));\n    tinymce.eventBus.attachEventHandler('afterBlur', this.onBlur.bind(this));\n};\n...\n onFocus: function () {\n  //implement your logic here\n };\n...\n`}</code></pre>\n        <p parentName=\"li\">{`The following events can be extended for the default TinyMCE4 editor:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onFocus`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onBlur`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`afterChangeContent`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Specify the list of modifers, `}<inlineCode parentName=\"p\">{`config_modifiers`}</inlineCode>{`, that can update the WYSIWYG configuration before the component is initialized. These configuration keys can also be used to update the default WYSIWYG editor (TinyMCE4).`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Specify the `}<inlineCode parentName=\"p\">{`mode`}</inlineCode>{` in which TinyMCE4 will be rendered on the stage.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Specify the `}<inlineCode parentName=\"p\">{`minToolbarWidth`}</inlineCode>{` to limit the width of TinyMCE4. If a component is used with a content type configured to a small width, this will limit the width to match.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Specify the `}<inlineCode parentName=\"p\">{`parentSelectorsToUnderlay`}</inlineCode>{` for TinyMCE4 to utilize an array of selectors for applying the z-index, which will prevent the toolbar from overlaying content type elements.`}</p>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}