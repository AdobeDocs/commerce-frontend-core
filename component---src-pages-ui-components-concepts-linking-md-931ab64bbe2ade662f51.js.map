{"version":3,"file":"component---src-pages-ui-components-concepts-linking-md-931ab64bbe2ade662f51.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/ui-components/concepts/linking.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"linking-properties-of-ui-components\"\n    }}>{`Linking properties of UI components`}</h1>\n    <p>{`The following properties are used for linking observable properties and methods of UI components:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`exports`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`imports`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`links`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`listens`}</inlineCode></li>\n    </ul>\n    <p>{`These properties are processed by the `}<inlineCode parentName=\"p\">{`initLinks()`}</inlineCode>{` method of the `}<a parentName=\"p\" {...{\n        \"href\": \"element.md\"\n      }}><inlineCode parentName=\"a\">{`uiElement`}</inlineCode>{` class`}</a>{` which is called at the moment of a component's instantiation.`}</p>\n    <p>{`Linking properties are set in `}<a parentName=\"p\" {...{\n        \"href\": \"configuration-flow.md\"\n      }}>{`UI components configuration files`}</a>{`: XML, JS, or PHP.`}</p>\n    <h2 {...{\n      \"id\": \"exports-property\"\n    }}><inlineCode parentName=\"h2\">{`exports`}</inlineCode>{` property`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`exports`}</inlineCode>{` property is used to copy a local value to some external entity. If the external entity property is anything but a function, it will be set to the value of the local property. If the external property is a function, it will be called with the local properties value as an argument.\nIf the local value is a ko of io-es5 observable, the external entity will also be updated whenever the local property changes. `}<inlineCode parentName=\"p\">{`exports`}</inlineCode>{`'s value is an object, composed of the following:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`key`}</inlineCode>{`: name of the internal property or method that is tracked for changes.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value`}</inlineCode>{`: name of the property or method that receives the value. Can use `}<a parentName=\"li\" {...{\n          \"href\": \"#template-strings-usage\"\n        }}>{`string templates`}</a>{`.`}</li>\n    </ul>\n    <p>{`Example of setting `}<inlineCode parentName=\"p\">{`exports`}</inlineCode>{` in a component's `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"defaults\": {\n    \"exports\": {\n      \"visible\": \"\\${ $.provider }:visibility\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Here `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` is the `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`\\${ $.provider }:visibility`}</inlineCode>{` is the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{`. The value of the local `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` property is assigned to the `}<inlineCode parentName=\"p\">{`visibility`}</inlineCode>{` property of the `}<inlineCode parentName=\"p\">{`provider`}</inlineCode>{` component. The latter is changed automatically if the value of `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` changes if the local `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` property is observable (which it isn't given only the code example above).`}</p>\n    <p>{`Example of setting `}<inlineCode parentName=\"p\">{`exports`}</inlineCode>{` directly using the destination component name:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"defaults\": {\n    \"exports\": {\n      \"items\": \"checkout.sidebar.summary.cart_items:items\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The syntax for the destination component name is determined by the hierarchy in the XML handle. Separate parent names with a `}<inlineCode parentName=\"p\">{`.`}</inlineCode>{` (dot) followed by the component name.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`To retrieve the full name of the destination component name, open your browser in developer mode, select the element that you want on the `}<strong parentName=\"p\">{`Elements`}</strong>{` tab, go to the `}<strong parentName=\"p\">{`Console`}</strong>{` tab, and execute the following code: `}<inlineCode parentName=\"p\">{`require('ko').contextFor($0).$data.name`}</inlineCode>{`.`}</p>\n    <p>{`Example of setting `}<inlineCode parentName=\"p\">{`exports`}</inlineCode>{` in a component's configuration `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<argument name=\"data\" xsi:type=\"array\">\n    <item name=\"config\" xsi:type=\"array\">\n        <item name=\"exports\" xsi:type=\"array\">\n            <item name=\"visible\" xsi:type=\"string\">sample_config.sample_provider:visibility</item>\n        </item>\n    </item>\n</argument>\n`}</code></pre>\n    <p>{`For an example of `}<inlineCode parentName=\"p\">{`exports`}</inlineCode>{` usage, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CatalogInventory/view/adminhtml/ui_component/product_form.xml#L76\"\n      }}><inlineCode parentName=\"a\">{`product_form.xml`}</inlineCode>{`, line 76`}</a></p>\n    <h2 {...{\n      \"id\": \"imports-property\"\n    }}><inlineCode parentName=\"h2\">{`imports`}</inlineCode>{` property`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`imports`}</inlineCode>{` property is used for tracking changes of an external entity property. `}<inlineCode parentName=\"p\">{`imports`}</inlineCode>{`'s value is an object, composed of the following:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`key`}</inlineCode>{`: name of the internal property or method that receives the value.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value`}</inlineCode>{`: name of the property or method that is tracked for changes. Can use `}<a parentName=\"li\" {...{\n          \"href\": \"#template-strings-usage\"\n        }}>{`string templates`}</a>{`.`}</li>\n    </ul>\n    <p>{`Example of using `}<inlineCode parentName=\"p\">{`imports`}</inlineCode>{` in a component's `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"defaults\": {\n    \"imports\": {\n      \"visible\": \"\\${ $.provider }:visibility\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Here the value of the `}<inlineCode parentName=\"p\">{`visibility`}</inlineCode>{` property of the `}<inlineCode parentName=\"p\">{`provider`}</inlineCode>{` component is assigned to the local `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` property. If the latter is a ko or ko-es5 observable, the local property is automatically updated if `}<inlineCode parentName=\"p\">{`visibility`}</inlineCode>{` changes.`}</p>\n    <p>{`Example of using `}<inlineCode parentName=\"p\">{`imports`}</inlineCode>{` in a component's configuration `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<argument name=\"data\" xsi:type=\"array\">\n    <item name=\"config\" xsi:type=\"array\">\n        <item name=\"imports\" xsi:type=\"array\">\n            <item name=\"visible\" xsi:type=\"string\">sample_config.sample_provider:visibility</item>\n        </item>\n    </item>\n</argument>\n`}</code></pre>\n    <p>{`For an example of `}<inlineCode parentName=\"p\">{`imports`}</inlineCode>{` usage, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/CatalogInventory/view/adminhtml/ui_component/product_form.xml#L105\"\n      }}><inlineCode parentName=\"a\">{`product_form.xml`}</inlineCode>{`, line 105`}</a></p>\n    <h2 {...{\n      \"id\": \"links-property\"\n    }}><inlineCode parentName=\"h2\">{`links`}</inlineCode>{` property`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`links`}</inlineCode>{` property is used for cross tracking properties changes: both linked properties are tracked and changing of one results in changing the other. `}<inlineCode parentName=\"p\">{`links`}</inlineCode>{`'s value is an object, composed of the following:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`key`}</inlineCode>{`: name of the internal property or method that sends and receives the notifications.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value`}</inlineCode>{`: name of the property or method that sends and receives the value. Can use `}<a parentName=\"li\" {...{\n          \"href\": \"#template-strings-usage\"\n        }}>{`string templates`}</a>{`.`}</li>\n    </ul>\n    <p>{`Example of using `}<inlineCode parentName=\"p\">{`links`}</inlineCode>{` in a component's `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"defaults\": {\n    \"links\": {\n      \"visible\": \"\\${ $.provider }:visibility\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Here the local `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` property is linked with the `}<inlineCode parentName=\"p\">{`visibility`}</inlineCode>{`  property of the provider component. If any of them is a ko or ko-es5 observable and changes, the other is changed automatically. If a non-observable linked property is changed the other is not updated automatically.`}</p>\n    <p>{`Example of using `}<inlineCode parentName=\"p\">{`links`}</inlineCode>{` in a component's configuration `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<argument name=\"data\" xsi:type=\"array\">\n    <item name=\"config\" xsi:type=\"array\">\n        <item name=\"links\" xsi:type=\"array\">\n            <item name=\"visible\" xsi:type=\"string\">sample_config.sample_provider:visibility</item>\n        </item>\n    </item>\n</argument>\n`}</code></pre>\n    <p>{`For an example of `}<inlineCode parentName=\"p\">{`links`}</inlineCode>{` usage, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/form/element/text.js#L22\"\n      }}><inlineCode parentName=\"a\">{`text.js`}</inlineCode>{`, line 22`}</a></p>\n    <h2 {...{\n      \"id\": \"listens-property\"\n    }}><inlineCode parentName=\"h2\">{`listens`}</inlineCode>{` property`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`listens`}</inlineCode>{` property is used to track the changes of a component's property. `}<inlineCode parentName=\"p\">{`listens`}</inlineCode>{`'s value is an object, composed of the following:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`key`}</inlineCode>{`: name of the observable property or method which is tracked for changes. Can use `}<a parentName=\"li\" {...{\n          \"href\": \"#template-strings-usage\"\n        }}>{`string templates`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`value`}</inlineCode>{`: name of the internal method or property which listens to the changes.`}</li>\n    </ul>\n    <p>{`Example of using `}<inlineCode parentName=\"p\">{`listens`}</inlineCode>{` in a component's `}<inlineCode parentName=\"p\">{`.js`}</inlineCode>{` file :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"defaults\": {\n    \"listens\": {\n      \"\\${ $.provider }:visibility\": \"visibilityChanged\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Here the local `}<inlineCode parentName=\"p\">{`visibilityChanged`}</inlineCode>{` property is a method that will be called when the `}<inlineCode parentName=\"p\">{`visibility`}</inlineCode>{` property of the `}<inlineCode parentName=\"p\">{`provider`}</inlineCode>{` component changes. It receives the new value as an argument. If the local property is not a function, it will be set to the new value.\nThe external property has to be an observable in order for `}<inlineCode parentName=\"p\">{`listens`}</inlineCode>{` to have any effect.`}</p>\n    <p>{`Example of using `}<inlineCode parentName=\"p\">{`listens`}</inlineCode>{` in a component's configuration `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<argument name=\"data\" xsi:type=\"array\">\n    <item name=\"config\" xsi:type=\"array\">\n        <item name=\"listens\" xsi:type=\"array\">\n            <item name=\"sample_config.sample_provider:visibility\" xsi:type=\"string\">visibilityChanged</item>\n        </item>\n    </item>\n</argument>\n`}</code></pre>\n    <p>{`For an example of `}<inlineCode parentName=\"p\">{`listens`}</inlineCode>{` usage, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/view/adminhtml/ui_component/new_category_form.xml#L84\"\n      }}><inlineCode parentName=\"a\">{`new_category_form.xml`}</inlineCode>{`, line 84`}</a></p>\n    <h2 {...{\n      \"id\": \"template-strings-usage\"\n    }}>{`Template strings usage`}</h2>\n    <p>{`The options of linking properties can contain template strings in the `}<inlineCode parentName=\"p\">{`'\\${...}'`}</inlineCode>{` format. During the component's initialization, values in this format are processed as template strings using `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals\"\n      }}>{`ES6 templates`}</a>{`. In browsers that do not support ES6 templates, these values are processed as underscore templates.`}</p>\n    <p>{`So if we put a variable name in `}<inlineCode parentName=\"p\">{`'\\${...}'`}</inlineCode>{`, it is processed into a string representation of the variable's value.`}</p>\n    <p>{`When working with UI components, we often need to use the string representation of a certain property of the UI component. To address a property of the UI component in the scope of this component, the `}<inlineCode parentName=\"p\">{`$.someProperty`}</inlineCode>{` syntax is used.`}</p>\n    <p>{`As a result, if the component's property is the variable for the template string, we get notation similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\\${ $.provider }:foo\n`}</code></pre>\n    <p>{`If the string would be built at runtime it would be equivalent to `}<inlineCode parentName=\"p\">{`this.provider + ':foo'`}</inlineCode>{`.`}</p>\n    <p>{`We can also build complex templates strings using this syntax, as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Using variables from the other component:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`'\\${ $.provider }:\\${ $.dataScope }' // 'provider' is the full name of the other component\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Calling several functions in one string:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`'\\${ $.provider }:data.overload': 'overload reset validate'// we call 'overload', 'reset', 'validate'\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Using inline conditions:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`'\\${ $.provider }:\\${ $.customScope ? $.customScope + \".\" : \"\"}data.validate': 'validate'\n`}</code></pre>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}