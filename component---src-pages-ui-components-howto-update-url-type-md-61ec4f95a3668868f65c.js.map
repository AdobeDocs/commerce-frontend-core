{"version":3,"file":"component---src-pages-ui-components-howto-update-url-type-md-61ec4f95a3668868f65c.js","mappings":"kSAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,4BADR,6BAGA,sEAAuD,cAAGC,WAAW,IACjE,KAAQ,+BACP,uBAAYA,WAAW,KAAvB,YAFkD,cAAvD,+EAGA,eACE,GAAM,yBADR,0BAGA,+BAAgB,uBAAYA,WAAW,KAAvB,QAAhB,kHAAkL,uBAAYA,WAAW,KAAvB,wCAAlL,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,guDAyDL,eACE,GAAM,kCADR,wBAE2B,uBAAYA,WAAW,MAAvB,UAF3B,UAGA,iEAAkD,uBAAYA,WAAW,KAAvB,UAAlD,WACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,oRAUL,eACE,GAAM,mDADR,qDAGA,sIAAuH,uBAAYA,WAAW,KAAvB,mEAAvH,MACA,mBAAG,uBAAYA,WAAW,KAAvB,UAAH,cAAmE,uBAAYA,WAAW,KAAvB,aAAnE,MAA8H,uBAAYA,WAAW,KAAvB,YAA9H,SAA2L,uBAAYA,WAAW,KAAvB,QAA3L,uEACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eADZ,kgFAiGL,eACE,GAAM,0CADR,2CAGA,iFACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,u5FA8EL,eACE,GAAM,mDADR,oDAGA,iHAAkG,uBAAYA,WAAW,KAAvB,aAAlG,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,+7EAuER,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/ui-components/howto/update-url-type.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"update-the-page-url-type\"\n    }}>{`Update the page URL type`}</h1>\n    <p>{`This topic describes how to extend the existing `}<a parentName=\"p\" {...{\n        \"href\": \"../components/url-input.md\"\n      }}><inlineCode parentName=\"a\">{`UrlInput`}</inlineCode>{` component`}</a>{` to implement a new link type, or update an existing one, for your module.`}</p>\n    <h2 {...{\n      \"id\": \"create-the-link-class\"\n    }}>{`Create the link class`}</h2>\n    <p>{`Create a `}<inlineCode parentName=\"p\">{`.php`}</inlineCode>{` file implementing the new link class in the module directory containing the applicable UI component, such as `}<inlineCode parentName=\"p\">{`<your-module>/Ui/Component/UrlInput/`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndeclare(strict_types=1);\n\nnamespace %your module namespace%;\n\nuse Magento\\\\Framework\\\\UrlInterface;\n\n/** Provides configuration for url input with type CMS page */\nclass Page implements \\\\Magento\\\\Ui\\\\Model\\\\UrlInput\\\\ConfigInterface\n{\n    /**\n     * @var \\\\Magento\\\\Framework\\\\UrlInterface\n     */\n    private $urlBuilder;\n    /**\n     * @param UrlInterface $urlBuilder\n     */\n    public function __construct(UrlInterface $urlBuilder)\n    {\n        $this->urlBuilder = $urlBuilder;\n    }\n    /**\n     * {@inheritdoc}\n     */\n    public function getConfig(): array\n    {\n        return [\n            'label' => __('Page'),\n            'component' => '%link to .js component you will complete in next step%',\n            'disableLabel' => true,\n            'filterOptions' => true,\n            'searchOptions' => true,\n            'chipsEnabled' => true,\n            'levelsVisibility' => '1',\n            'options' => [],\n            'sortOrder' => 45,\n            'multiple' => false,\n            'closeBtn' => true,\n            'template' => 'ui/grid/filters/elements/ui-select',\n            'searchUrl' => $this->urlBuilder->getUrl('%path for search controller%'),\n            'filterPlaceholder' => __('Page Name'),\n            'isDisplayEmptyPlaceholder' => true,\n            'emptyOptionsHtml' => __('Start typing to find cms page'),\n            'missingValuePlaceholder' => __('Cms Page with ID: %s doesn\\\\'t exist'),\n            'isDisplayMissingValuePlaceholder' => true,\n            'validationUrl' => $this->urlBuilder->getUrl('%path for validation controller%'),\n        ];\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-the-link-to-the-dixml-file\"\n    }}>{`Add the link to the `}<inlineCode parentName=\"h2\">{`di.xml`}</inlineCode>{` file`}</h2>\n    <p>{`Add the link class you just created to the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<type name=\"Magento\\\\Ui\\\\Model\\\\UrlInput\\\\LinksConfigProvider\">\n    <arguments>\n        <argument name=\"linksConfiguration\" xsi:type=\"array\">\n            <item name=\"page\" xsi:type=\"string\">%link to your class%</item>\n        </argument>\n    </arguments>\n</type>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-the-components-javascript-implementation\"\n    }}>{`Create the component's JavaScript implementation`}</h2>\n    <p>{`Create the JavaScript implementation for the applicable UI component in your module-specific directory, such as `}<inlineCode parentName=\"p\">{`<your-module>/view/<area>/web/js/form/element/page-ui-select.js`}</inlineCode>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`<area>`}</inlineCode>{` would be `}<inlineCode parentName=\"p\">{`adminhtml`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`frontend`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`base`}</inlineCode>{` depending on where you are applying the component implementation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/ui-select',\n    'jquery',\n    'underscore'\n], function (Select, $, _) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            validationUrl: false,\n            loadedOption: {},\n            validationLoading: true\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n\n            this.validateInitialValue();\n\n            return this;\n        },\n\n        /**\n         * Validate initial value actually exists\n         */\n        validateInitialValue: function () {\n            if (!_.isEmpty(this.value())) {\n                $.ajax({\n                    url: this.validationUrl,\n                    type: 'GET',\n                    dataType: 'json',\n                    context: this,\n                    data: {\n                        cmsPageId: this.value()\n                    },\n\n                    /** @param {Object} response */\n                    success: function (response) {\n                        if (!_.isEmpty(response)) {\n                            this.options([response]);\n                            this.loadedOption = response;\n                        }\n                    },\n\n                    /** set empty array if error occurs */\n                    error: function () {\n                        this.options([]);\n                    },\n\n                    /** stop loader */\n                    complete: function () {\n                        this.validationLoading(false);\n                        this.setCaption();\n                    }\n                });\n            } else {\n                this.validationLoading(false);\n            }\n        },\n\n        /** @inheritdoc */\n        getSelected: function () {\n            var options = this._super();\n\n            if (!_.isEmpty(this.loadedOption)) {\n                return this.value() === this.loadedOption.value ? [this.loadedOption] : options;\n            }\n\n            return options;\n        },\n\n        /**\n         * Get path to current option\n         *\n         * @param {Object} data - option data\n         * @returns {String} path\n         */\n        getPath: function (data) {\n            var path = '';\n\n            if (this.renderPath) {\n                path = data.identifier || path;\n            }\n\n            return path;\n        }\n    });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-a-controller-to-search-the-page\"\n    }}>{`Create a controller to search the page`}</h2>\n    <p>{`Create a controller to search the page using a search key.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndeclare(strict_types=1);\n\nnamespace %path to your module namespace%;\n\nuse Magento\\\\Framework\\\\App\\\\Action\\\\HttpGetActionInterface;\nuse Magento\\\\Framework\\\\App\\\\Action\\\\HttpPostActionInterface;\nuse Magento\\\\Framework\\\\UrlInterface;\n\nclass Search extends \\\\Magento\\\\Backend\\\\App\\\\Action implements HttpGetActionInterface, HttpPostActionInterface\n{\n    /**\n     * Authorization level of a basic admin session\n     *\n     * @see _isAllowed()\n     */\n    const ADMIN_RESOURCE = 'Magento_Cms::save';\n    /**\n     * @var \\\\Magento\\\\Framework\\\\Controller\\\\Result\\\\JsonFactory\n     */\n    private $resultJsonFactory;\n    /**\n     * @var \\\\Magento\\\\Cms\\\\Model\\\\ResourceModel\\\\Page\\\\CollectionFactory\n     */\n    private $cmsCollectionFactory;\n    /**\n     * @param \\\\Magento\\\\Framework\\\\Controller\\\\Result\\\\JsonFactory $resultFactory\n     * @param \\\\Magento\\\\Cms\\\\Model\\\\ResourceModel\\\\Page\\\\CollectionFactory $cmsCollectionFactory\n     * @param \\\\Magento\\\\Backend\\\\App\\\\Action\\\\Context $context\n     */\n    public function __construct(\n        \\\\Magento\\\\Framework\\\\Controller\\\\Result\\\\JsonFactory $resultFactory,\n        \\\\Magento\\\\Cms\\\\Model\\\\ResourceModel\\\\Page\\\\CollectionFactory $cmsCollectionFactory,\n        \\\\Magento\\\\Backend\\\\App\\\\Action\\\\Context $context\n    ) {\n        $this->resultJsonFactory = $resultFactory;\n        $this->cmsCollectionFactory = $cmsCollectionFactory;\n        parent::__construct($context);\n    }\n    /**\n     * @return \\\\Magento\\\\Framework\\\\Controller\\\\ResultInterface\n     */\n    public function execute(): \\\\Magento\\\\Framework\\\\Controller\\\\ResultInterface\n    {\n        $searchKey = $this->getRequest()->getParam('searchKey');\n        $pageNum = (int)$this->getRequest()->getParam('page');\n        $limit = (int)$this->getRequest()->getParam('limit');\n        /** @var \\\\Magento\\\\Cms\\\\Model\\\\ResourceModel\\\\Page\\\\Collection $cmsCollection */\n        $cmsCollection = $this->cmsCollectionFactory->create();\n        $cmsCollection->setCurPage($pageNum)->setPageSize($limit);\n        $totalValues = $cmsCollection->getSize();\n        $cmsCollection->addFilter('title', ['in'=> $searchKey]);\n        $pagesById = [];\n       /** @var \\\\Magento\\\\Cms\\\\Model\\\\Page $cmsPage */\n        foreach ($cmsCollection as $cmsPage) {\n            $cmsId = $cmsPage->getId();\n            $pagesById[$cmsId] = [\n                'value' => $cmsId,\n                'label' => $cmsPage->getTitle(),\n                'identifier' => sprintf(__('ID: %s'), $cmsId)\n            ];\n        }\n        /** @var \\\\Magento\\\\Framework\\\\Controller\\\\Result\\\\Json $resultJson */\n        $resultJson = $this->resultJsonFactory->create();\n        return $resultJson->setData([\n            'options' => $pagesById,\n            'total' => empty($pagesById) ? 0 : $totalValues\n        ]);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-a-controller-to-return-the-page-or-array\"\n    }}>{`Create a controller to return the page or array`}</h2>\n    <p>{`Create a controller to return the page, or empty array if the option doesn't exist, by the `}<inlineCode parentName=\"p\">{`cmsPageId`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright © Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndeclare(strict_types=1);\n\nnamespace %path to your module%;\n\nuse Magento\\\\Framework\\\\App\\\\Action\\\\HttpGetActionInterface;\n\nclass GetSelected extends \\\\Magento\\\\Backend\\\\App\\\\Action implements HttpGetActionInterface\n{\n    /**\n     * Authorization level of a basic admin session\n     *\n     * @see _isAllowed()\n     */\n    const ADMIN_RESOURCE = 'Magento_Cms::save';\n    /**\n     * @var \\\\Magento\\\\Framework\\\\Controller\\\\Result\\\\JsonFactory\n     */\n    private $resultJsonFactory;\n    /**\n     * @var \\\\Magento\\\\Cms\\\\Model\\\\ResourceModel\\\\Page\\\\CollectionFactory\n     */\n    private $cmsCollectionFactory;\n    /**\n     * GetSelected constructor.\n     * @param \\\\Magento\\\\Framework\\\\Controller\\\\Result\\\\JsonFactory $jsonFactory\n     * @param \\\\Magento\\\\Cms\\\\Model\\\\ResourceModel\\\\Page\\\\CollectionFactory $cmsCollectionFactory\n     * @param \\\\Magento\\\\Backend\\\\App\\\\Action\\\\Context $context\n     */\n    public function __construct(\n        \\\\Magento\\\\Framework\\\\Controller\\\\Result\\\\JsonFactory $jsonFactory,\n        \\\\Magento\\\\Cms\\\\Model\\\\ResourceModel\\\\Page\\\\CollectionFactory $cmsCollectionFactory,\n        \\\\Magento\\\\Backend\\\\App\\\\Action\\\\Context $context\n    ) {\n        $this->resultJsonFactory = $jsonFactory;\n        $this->cmsCollectionFactory = $cmsCollectionFactory;\n        parent::__construct($context);\n    }\n    /**\n     * @return \\\\Magento\\\\Framework\\\\Controller\\\\ResultInterface\n     */\n    public function execute() : \\\\Magento\\\\Framework\\\\Controller\\\\ResultInterface\n    {\n        $cmsPageId = $this->getRequest()->getParam('cmsPageId');\n        /** @var \\\\Magento\\\\Cms\\\\Model\\\\ResourceModel\\\\Page\\\\Collection $cmsPageCollection */\n        $cmsPageCollection = $this->cmsCollectionFactory->create();\n        $cmsPageCollection->addFilter('page_id', $cmsPageId);\n        $option = [];\n        if (!empty($cmsPageCollection->getFirstItem()->getData())) {\n            $cmsPage = $cmsPageCollection->getFirstItem();\n            $option = [\n                'value' => $cmsPageId,\n                'label' => $cmsPage->getTitle(),\n                'identifier' => sprintf(__('ID: %s'), $cmsPageId)\n            ];\n        }\n        /** @var \\\\Magento\\\\Framework\\\\Controller\\\\Result\\\\Json $resultJson */\n        $resultJson = $this->resultJsonFactory->create();\n        return $resultJson->setData($option);\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}