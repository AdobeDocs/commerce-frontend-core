{"version":3,"file":"component---src-pages-guide-css-fonts-md-24da17780c118873dc02.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/guide/css/fonts.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"custom-fonts\"\n    }}>{`Custom fonts`}</h1>\n    <p>{`The application contains a set of built-in fonts, but you can easily include custom fonts. This topic describes how to include a locally stored custom font in your theme.`}</p>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If you are new to theme development, see `}<a parentName=\"p\" {...{\n        \"href\": \"../themes/index.md\"\n      }}>{`themes`}</a>{` to get familiar with the basics.`}</p>\n    <p>{`To ensure the stability of your customizations and prevent upgrades from overwriting your customizations, do not change the default theme files. You must include custom fonts in the your theme's stylesheet.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add font files to your local theme directory. For example, `}<inlineCode parentName=\"p\">{`app/design/frontend/<your_vendor_name>/<your_theme_name>/web/fonts`}</inlineCode>{`.`}</p>\n        <p parentName=\"li\">{`To add `}<em parentName=\"p\">{`external`}</em>{` fonts, add font references to the page configuration file as described in `}<a parentName=\"p\" {...{\n            \"href\": \"../layouts/xml-manage.md#include-static-resources-javascript-css-fonts\"\n          }}>{`Include static resources (JavaScript, CSS, fonts)`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`If you build a theme using the UI library, declare the custom font by adding the `}<inlineCode parentName=\"p\">{`.lib-font-face`}</inlineCode>{` mixin to the `}<inlineCode parentName=\"p\">{`app/design/frontend/<your_vendor_name>/<your_theme_name>/web/css/source/_typography.less`}</inlineCode>{` file:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-less\"\n          }}>{`.lib-font-face(\n    @family-name:'<custom_font_name>',\n    @font-path: '@{baseDir}fonts/<path_to_font_file>',\n    @font-weight: <font_weight>,\n    @font-style: <font_style>,\n    @font-display: <auto|block|fallback|optional|swap>\n);\n`}</code></pre>\n        <p parentName=\"li\">{`Where:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@{baseDir}`}</inlineCode>{` stands for the `}<inlineCode parentName=\"li\">{`app/design/frontend/<you_vendor_name>/<your_theme_name>/web`}</inlineCode>{` directory.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<path_to_font_file>`}</inlineCode>{` includes the font file name, but without the extension. For example, `}<inlineCode parentName=\"li\">{`@font-path: '@{baseDir}fonts/Luma-Icons'`}</inlineCode>{` for the font stored in `}<inlineCode parentName=\"li\">{`web/fonts/Luma-Icons.woff`}</inlineCode>{`.`}</li>\n        </ul>\n      </li>\n    </ol>\n    <p>{`The mixin generates the CSS, which includes the font. The following example shows how to generate CSS for the Open Sans font in the Blank theme:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@font-face {\n  font-family: 'Open Sans';\n       src: url('../fonts/opensans/light/opensans-300.eot');\n       src: url('../fonts/opensans/light/opensans-300.eot?#iefix') format('embedded-opentype'), url('../fonts/opensans/light/opensans-300.woff2') format('woff2'), url('../fonts/opensans/light/opensans-300.woff') format('woff'), url('../fonts/opensans/light/opensans-300.ttf') format('truetype'), url('../fonts/opensans/light/opensans-300.svg#Open Sans') format('svg');\n   font-weight: 300;\n   font-style: normal;\n   font-display: swap;\n   }\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`@font-format`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`@font-type`}</inlineCode>{` are optional but they are both related. If you need to specify a format, enclose it in single quotes. For example, `}<inlineCode parentName=\"p\">{`@font-format: 'ttf'`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`@font-type: 'truetype'`}</inlineCode>{` for TrueType Fonts. The available types are: \"woff\", \"woff2\", \"ttf\", \"eot\", \"otf\", and \"svg\"`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-less\"\n      }}>{`.lib-font-face(\n   @family-name:'<custom_font_name>',\n   @font-path: '@{baseDir}fonts/<path_to_font_file>',\n   @font-format: '<ttf|woff|woff2|eot|otf|svg>',\n   @font-weight: <font_weight>,\n   @font-style: <font_style>,\n   @font-display: <auto|block|fallback|optional|swap>,\n   @font-type: <font_type>\n);\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`@font-display: swap`}</inlineCode>{` is declared by default for Blank theme in `}<inlineCode parentName=\"p\">{`app/design/frontend/Magento/blank/web/css/source/_typography.less`}</inlineCode>{`.`}</p>\n    <p>{`Fallback web fonts that are used by default are located in `}<inlineCode parentName=\"p\">{`lib/web/css/source/lib/variables/_typography.less`}</inlineCode>{`.\nFor more information about font-face, refer to this article `}{`[Font-face][https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face]`}{`.`}</p>\n    <h2 {...{\n      \"id\": \"font-head-type\"\n    }}><inlineCode parentName=\"h2\">{`<font>`}</inlineCode>{` head type`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`<font>`}</inlineCode>{` node is added to HTML `}<inlineCode parentName=\"p\">{`<head>`}</inlineCode>{` type for layout in `}<inlineCode parentName=\"p\">{`lib/internal/Magento/Framework/View/Layout/etc/head.xsd`}</inlineCode>{`. All resources added with `}<inlineCode parentName=\"p\">{`<font>`}</inlineCode>{` node will be downloaded with `}<inlineCode parentName=\"p\">{`preload`}</inlineCode>{` html attribute.`}</p>\n    <h2 {...{\n      \"id\": \"icon-css\"\n    }}>{`Icon CSS`}</h2>\n    <p>{`In addition to including custom fonts in your Blank theme, you also can include custom fonts for any icons in the Blank theme. The icon font files for the Blank theme are located in the `}<inlineCode parentName=\"p\">{`lib/web/fonts/Blank-Theme-Icons`}</inlineCode>{` directory. The `}<inlineCode parentName=\"p\">{`lib/web/css/source/lib/variables/_typography.less`}</inlineCode>{` file defines the font icon path and name for the icons and the `}<inlineCode parentName=\"p\">{`web/css/source/_icons.less`}</inlineCode>{` file uses these files to define the icon font face itself, which should be used in all CSS declarations.`}</p>\n    <p>{` The Unicode characters that correspond to the correct font glyphs for each icon are defined in the following `}<inlineCode parentName=\"p\">{`lib/web/css/source/lib/variables/_icons.less`}</inlineCode>{` file.`}</p>\n    <p>{`By calling the `}<inlineCode parentName=\"p\">{`lib-icon-font`}</inlineCode>{` mixin, you can apply the icon font and character variables throughout the theme LESS code.`}</p>\n    <p>{`For Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.icon-calendar {\n    .lib-icon-font(\n        @icon-calendar,\n        @_icon-font-size: 28px\n   );\n}\n`}</code></pre>\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"ui-library.md\"\n      }}>{`UI library`}</a>{` for an icon list and implementation.`}</p>\n    <p>{`To customize a font you import, consider using `}<a parentName=\"p\" {...{\n        \"href\": \"https://icomoon.io/app/\"\n      }}>{`IcoMoon`}</a>{`. To override Luma or Blank theme icon fonts, change the font path in the `}<inlineCode parentName=\"p\">{`_theme.less`}</inlineCode>{` file. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`//  Fonts\n@icons__font-path: '@{baseDir}fonts/Theme-Icons'; //  Add you fonts in your-theme/web/fonts\n@icons__font-name: 'Theme-Icons';\n`}</code></pre>\n    <p>{`With uploaded icons from IcoMoon, a \"404 error `}<inlineCode parentName=\"p\">{`woff2`}</inlineCode>{` file icon not found\" may occur in the console. This means the `}<inlineCode parentName=\"p\">{`woff2`}</inlineCode>{` file is missing from the IcoMoon package. You just need copy the `}<inlineCode parentName=\"p\">{`woff`}</inlineCode>{` file to `}<inlineCode parentName=\"p\">{`woff2`}</inlineCode>{`.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If your theme does not use the UI library, include the font in your theme's CSS files using the `}<inlineCode parentName=\"p\">{`@font-face`}</inlineCode>{` CSS rule.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","variant","slots","parentName","isMDXComponent"],"sourceRoot":""}