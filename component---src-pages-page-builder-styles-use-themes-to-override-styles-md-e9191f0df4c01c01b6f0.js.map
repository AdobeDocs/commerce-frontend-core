{"version":3,"file":"component---src-pages-page-builder-styles-use-themes-to-override-styles-md-e9191f0df4c01c01b6f0.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/styles/use-themes-to-override-styles.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-themes-to-override-styles\"\n    }}>{`Use Themes to override styles`}</h1>\n    <p>{`The best place to override Page Builder's default styles for native content types is within your Admin and frontend themes. For your own custom or extension modules, you should first add your overriding styles to your modules, as explained in `}<a parentName=\"p\" {...{\n        \"href\": \"use-modules-to-override-styles.md\"\n      }}>{`Use modules to override styles`}</a>{`.`}</p>\n    <p>{`In this topic, you will learn how to use Admin and frontend themes to override the default styles that Page Builder applies to its out-of-the-box content types.`}</p>\n    <h2 {...{\n      \"id\": \"steps-to-override-admin-themes\"\n    }}>{`Steps to override Admin themes`}</h2>\n    <p>{`To override Page Builder styles used in the Admin, you need to:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create or modify an Admin theme.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Apply the Admin theme to a module.`}</p>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"step-1-create-or-modify-an-admin-theme\"\n    }}>{`Step 1: Create or modify an Admin theme`}</h3>\n    <p>{`The following instructions refer only to the specifics of overriding Page Builder Admin styles. To learn more on creating Admin themes in general, see `}<a parentName=\"p\" {...{\n        \"href\": \"../../guide/themes/create-admin.md\"\n      }}>{`Create an Admin theme`}</a>{`.`}</p>\n    <p>{`Your overriding Admin theme should have a directory and file structure similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`app/design/adminhtml/VendorName/ThemeName/web/css/source/content-type/<specific overrides>\napp/design/adminhtml/VendorName/ThemeName/web/css/source/_module.less\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/8f58ba11ebe011b654b54c41a3f3c95c/pagebuilder-admin-theme-files.svg\",\n        \"alt\": \"Page Builder admin theme files\"\n      }}></img></p>\n    <p><em parentName=\"p\">{`Admin theme directory structure`}</em></p>\n    <p>{`The key takeaways are numbered in the image and described as follows:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Content types`}</strong>{`. Organize your overriding styles according to the Page Builder content-types you want to override. In this example, we added the `}<inlineCode parentName=\"p\">{`design/adminhtml/VendorName/ThemeName/web/css/source/content-type/`}</inlineCode>{` directory with the `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`products`}</inlineCode>{` content types we want to override.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Overriding stylesheets`}</strong>{`. Name your overriding `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` files to match the appearance names of your content types. In this example, the `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` content type has one appearance: `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{`. However, the `}<inlineCode parentName=\"p\">{`products`}</inlineCode>{` content type has two appearances `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`carousel`}</inlineCode>{`, so we create one `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` file for each. This convention helps organize your overriding styles to finding and updating them later.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Import files`}</strong>{`. Include an `}<inlineCode parentName=\"p\">{`_import.less`}</inlineCode>{` file for each content type directory. This file should only contain `}<inlineCode parentName=\"p\">{`@import`}</inlineCode>{` statements for all the overriding files in the directory. Using import files like this helps keep your changes closer to where they occur. In our example, the `}<inlineCode parentName=\"p\">{`_import.less`}</inlineCode>{` file for our `}<inlineCode parentName=\"p\">{`products`}</inlineCode>{` content type contains two imports:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-scss\"\n          }}>{`@import '_default.less';\n@import '_carousel.less';\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`_module.less`}</strong>{`. The `}<inlineCode parentName=\"p\">{`_module.less`}</inlineCode>{` file is required and must be added directly to your Admin theme's `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` directory. Adobe Commerce uses this file to add your Admin styles to the `}<inlineCode parentName=\"p\">{`pub/static/adminhtml`}</inlineCode>{` output, where they can override the default Admin styles, including Page Builder's default content-type styles. Like the `}<inlineCode parentName=\"p\">{`_import.less`}</inlineCode>{` files, the `}<inlineCode parentName=\"p\">{`_module.less`}</inlineCode>{` file should only contain `}<inlineCode parentName=\"p\">{`@import`}</inlineCode>{` statements. In our example, our `}<inlineCode parentName=\"p\">{`_module.less`}</inlineCode>{` contains two imports:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-scss\"\n          }}>{`@import 'content-type/heading/_import.less';\n@import 'content-type/products/_import.less';\n`}</code></pre>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"step-2-apply-the-admin-theme-to-a-module\"\n    }}>{`Step 2: Apply the Admin theme to a module`}</h3>\n    <p>{`The following instructions are specific to applying an Admin theme to a custom Page Builder module. To learn more on applying Admin themes to modules in general, see `}<a parentName=\"p\" {...{\n        \"href\": \"../../guide/themes/apply-admin.md\"\n      }}>{`Apply an Admin theme`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`To apply your Admin theme to a module`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file (in your module's `}<inlineCode parentName=\"p\">{`etc`}</inlineCode>{` directory) that references your Admin theme. The following example adds the `}<inlineCode parentName=\"p\">{`VendorName/ThemeName`}</inlineCode>{` Admin theme that we just created:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`<?xml version=\"1.0\"?>\n<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\">\n\n    <!-- Admin theme -->\n    <type name=\"Magento\\\\Theme\\\\Model\\\\View\\\\Design\">\n        <arguments>\n            <argument name=\"themes\" xsi:type=\"array\">\n                <item name=\"adminhtml\" xsi:type=\"string\">VendorName/ThemeName</item>\n            </argument>\n        </arguments>\n    </type>\n\n</config>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Upgrade your module, clean the cache, and reload the Admin in the browser:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento setup:upgrade\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`bin/magento cache:clean\n`}</code></pre>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"steps-to-override-frontend-themes\"\n    }}>{`Steps to override frontend themes`}</h2>\n    <p>{`To override Page Builder styles on the storefront, you need to:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create or modify a frontend theme.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Apply the frontend theme to a store view or page.`}</p>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"step-1-create-or-modify-a-frontend-theme\"\n    }}>{`Step 1: Create or modify a frontend theme`}</h3>\n    <p>{`The following instructions refer only to the specifics of overriding Page Builder frontend styles. To learn more on creating frontend themes in general, see `}<a parentName=\"p\" {...{\n        \"href\": \"../../guide/themes/create-storefront.md\"\n      }}>{`Create a new storefront theme`}</a>{`.`}</p>\n    <p>{`Your overriding frontend theme should have a directory and file structure similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`app/design/frontend/VendorName/ThemeName/web/css/source/content-type/<specific overrides>\napp/design/frontend/VendorName/ThemeName/web/css/source/_extend.less\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/4ce4852f59df81c26e23073db53d8ba7/pagebuilder-frontend-theme-files.svg\",\n        \"alt\": \"Page Builder frontend theme files\"\n      }}></img></p>\n    <p><em parentName=\"p\">{`Frontend theme directory structure`}</em></p>\n    <p>{`The first three numbered callouts (`}<strong parentName=\"p\">{`1, 2, 3`}</strong>{`) for the frontend theme are identical in description to the Admin theme `}<a parentName=\"p\" {...{\n        \"href\": \"#step-1-create-or-modify-an-admin-theme\"\n      }}>{`previously described`}</a>{`. The only difference for frontend themes is that the `}<inlineCode parentName=\"p\">{`_module.less`}</inlineCode>{` file should be named `}<inlineCode parentName=\"p\">{`_extend.less`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`_extend.less`}</strong>{`. The `}<inlineCode parentName=\"p\">{`_extend.less`}</inlineCode>{` file is required and must be added directly to your frontend theme's `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` directory. Commerce uses this file to add your frontend styles to the `}<inlineCode parentName=\"p\">{`pub/static/frontend`}</inlineCode>{` output in a location within the `}<inlineCode parentName=\"p\">{`styles-m.css`}</inlineCode>{` where they override (instead of replace) the default frontend styles, including Page Builder's default content-type styles. Like the `}<inlineCode parentName=\"p\">{`_import.less`}</inlineCode>{` files, the `}<inlineCode parentName=\"p\">{`_extend.less`}</inlineCode>{` file should only contain `}<inlineCode parentName=\"p\">{`@import`}</inlineCode>{` statements. In our example, our `}<inlineCode parentName=\"p\">{`_extend.less`}</inlineCode>{` contains the same two imports as seen in `}<inlineCode parentName=\"p\">{`module.less`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`@import 'content-type/heading/_import.less';\n@import 'content-type/products/_import.less';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"step-2-apply-the-frontend-theme\"\n    }}>{`Step 2: Apply the frontend theme`}</h3>\n    <p>{`The following instructions are here as a `}<strong parentName=\"p\">{`reminder`}</strong>{` to apply your frontend theme to a store view or page. If you forget, you won't see your style overrides in the storefront. To learn more on applying themes in general, see `}<a parentName=\"p\" {...{\n        \"href\": \"../../guide/themes/apply-storefront.md\"\n      }}>{`Apply a storefront theme`}</a>{`.`}</p>\n    <p>{`To apply your frontend theme to a store view:`}</p>\n    <p>{`Navigate to `}<strong parentName=\"p\">{`Content`}</strong>{` > `}<strong parentName=\"p\">{`Design`}</strong>{` > `}<strong parentName=\"p\">{`Configuration`}</strong>{` and edit the store view where you can apply your frontend theme as the default theme:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/2a8c28ba0240fba849de184aa5772a8b/theme-default-setting-admin.svg\",\n        \"alt\": \"Set default theme on store view\"\n      }}></img></p>\n    <p><em parentName=\"p\">{`Set default frontend theme for store view`}</em></p>\n    <p>{`To apply your frontend theme to a page:`}</p>\n    <p>{`During development, it's easy to apply your frontend theme to a single page for testing, but it's also easy to forget to switch your page to that theme.`}</p>\n    <p>{`On any CMS page, scroll to the Design section at the bottom, and select your theme from the New Theme selector.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/9132f1671c4d20c9a30e83684639f5c5/theme-page-setting-admin.svg\",\n        \"alt\": \"Set theme for page\"\n      }}></img></p>\n    <p><em parentName=\"p\">{`Set frontend theme for page`}</em></p>\n    <h2 {...{\n      \"id\": \"more-about-themes\"\n    }}>{`More about themes`}</h2>\n    <p>{`For more information on overriding styles using themes, see `}<a parentName=\"p\" {...{\n        \"href\": \"../../guide/css/quickstart/customize-styles.md\"\n      }}>{`Simple ways to customize a theme's styles`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}