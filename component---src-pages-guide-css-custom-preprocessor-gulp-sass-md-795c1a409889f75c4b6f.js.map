{"version":3,"file":"component---src-pages-guide-css-custom-preprocessor-gulp-sass-md-795c1a409889f75c4b6f.js","mappings":"gSAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,gDADR,iDAGA,uDAAwC,cAAGC,WAAW,IAClD,KAAQ,uBAD4B,QAAxC,yJAGA,oEAAqD,cAAGA,WAAW,IAC/D,KAAQ,oBADyC,cAArD,4IAEmK,cAAGA,WAAW,IAC7K,KAAQ,sBADuJ,QAFnK,sEAKA,0EAA2D,cAAGA,WAAW,IACrE,KAAQ,UAD+C,+BAA3D,MAGA,eACE,GAAM,0CADR,2CAGA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,wDAA2E,uBAAYA,WAAW,KAAvB,gBAA3E,wCACA,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,iBADI,ycAsBvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,uEACA,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAvB,sCAErB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,0FACA,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAvB,6BAGvB,eACE,GAAM,sCADR,uCAGA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,oCAAuD,cAAGA,WAAW,IACjE,KAAQ,qCAD2C,iCAAvD,OAIF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,wHAA2I,uBAAYA,WAAW,KAAvB,wCAA3I,uBAAkP,uBAAYA,WAAW,KAAvB,oDAAlP,gEACA,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,eADI,o0BAmCrB,cAAGA,WAAW,MAAd,mBAAsC,uBAAYA,WAAW,KAAvB,eAAtC,oBAAiH,uBAAYA,WAAW,KAAvB,iDAAjH,sEAAgR,uBAAYA,WAAW,KAAvB,cAAhR,YAAkV,uBAAYA,WAAW,KAAvB,wCAAlV,iBAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,mBAAsC,uBAAYA,WAAW,KAAvB,eAAtC,iBAA8G,uBAAYA,WAAW,KAAvB,iDAA9G,iBAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,0CAA6D,uBAAYA,WAAW,KAAvB,2BAA7D,iBAAiJ,uBAAYA,WAAW,KAAvB,6DAAjJ,sFAA4U,uBAAYA,WAAW,KAAvB,2BAA5U,uCACA,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,gBADI,yOASvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,0BACN,uBAAYA,WAAW,KAAvB,eADM,QAIJ,eACE,GAAM,sCADR,wCAGA,qCAAsB,uBAAYA,WAAW,KAAvB,QAAtB,2BAAiG,uBAAYA,WAAW,KAAvB,WAAjG,gCAAoL,uBAAYA,WAAW,KAAvB,SAApL,iIAAsW,uBAAYA,WAAW,KAAvB,SAAtW,wCAA+b,uBAAYA,WAAW,KAAvB,qBAA/b,4BAAwhB,uBAAYA,WAAW,KAAvB,mBAAxhB,0BAA6mB,uBAAYA,WAAW,KAAvB,+DAA7mB,sDACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,+CAMR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/guide/css/custom-preprocessor/gulp-sass.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-a-sass-preprocessor-and-gulp-task-runner\"\n    }}>{`Use a Sass preprocessor and Gulp task runner`}</h1>\n    <p>{`By default, the application uses `}<a parentName=\"p\" {...{\n        \"href\": \"http://lesscss.org/\"\n      }}>{`Less`}</a>{` for themes styling. But you can use other stylesheet languages that can be compiled (processed) to CSS. For example, Sass is a popular alternative.`}</p>\n    <p>{`If you decide not to use Less and the default `}<a parentName=\"p\" {...{\n        \"href\": \"../ui-library.md\"\n      }}>{`UI library`}</a>{`, you need to create your own theme from scratch and use an alternative preprocessor. This topic describes how to configure and use the `}<a parentName=\"p\" {...{\n        \"href\": \"http://gulpjs.com/\"\n      }}>{`Gulp`}</a>{` task runner and the gulp-sass package for the Sass preprocessor.`}</p>\n    <p>{`For details about adding a custom preprocessor, see `}<a parentName=\"p\" {...{\n        \"href\": \"add.md\"\n      }}>{`Add custom CSS preprocessor`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"install-gulp-and-its-sass-preprocessor\"\n    }}>{`Install Gulp and its Sass preprocessor`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In the root of the theme directory, create an empty `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` and copy-paste the following code:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-json\"\n          }}>{` {\n   \"author\": \"Adobe Commerce Inc.\",\n   \"description\": \"Node module dependencies for local development\",\n   \"version\": \"1.0.0\",\n   \"main\": \"gulpfile.js\",\n   \"dependencies\": {\n     \"path\": \"^0.12.7\"\n   },\n   \"devDependencies\": {\n     \"gulp\": \"^3.9.1\",\n     \"gulp-notify\": \"^3.0.0\",\n     \"gulp-plumber\": \"^1.1.0\",\n     \"gulp-sass\": \"^3.1.0\"\n   },\n   \"scripts\": {\n     \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\"\n   }\n }\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Install Gulp by running the following command in a command prompt:`}</p>\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`npm install --save gulp-install`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add the gulp-sass package for the Sass preprocessor by running the following command:`}</p>\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`npm install gulp-sass`}</inlineCode></p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"create-a-theme-and-add-sass-styles\"\n    }}>{`Create a theme and add Sass styles`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a theme, as described in `}<a parentName=\"p\" {...{\n            \"href\": \"../../themes/create-storefront.md\"\n          }}>{`Create a new storefront theme`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Set up a Gulp task for Sass compilation by placing the file with the task code in the root of your theme directory (`}<inlineCode parentName=\"p\">{`app/design/frontend/<Vendor>/<theme>`}</inlineCode>{`). Create an empty `}<inlineCode parentName=\"p\">{`app/design/frontend/<Vendor>/<theme>/gulpfile.js`}</inlineCode>{` file and copy-paste this code into it (no changes needed):`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{` var gulp         = require('gulp'),\n     sass         = require('gulp-sass'),\n     plumber      = require('gulp-plumber'),\n     notify       = require('gulp-notify');\n\n var config = {\n     src           : './web/css/*.scss',\n     dest          : './web/css/'\n };\n\n // Error message\n var onError = function (err) {\n     notify.onError({\n         title   : 'Gulp',\n         subtitle: 'Failure!',\n         message : 'Error: <%= error.message %>',\n         sound   : 'Beep'\n     })(err);\n\n     this.emit('end');\n };\n\n // Compile CSS\n   gulp.task('styles', function () {\n       var stream = gulp\n           .src([config.src])\n           .pipe(plumber({errorHandler: onError}))\n           .pipe(sass().on('error', sass.logError));\n\n       return stream\n           .pipe(gulp.dest('./web/css/'));\n   });\n`}</code></pre>\n        <p parentName=\"li\">{`This task uses `}<inlineCode parentName=\"p\">{`styles.scss`}</inlineCode>{`, stored in the `}<inlineCode parentName=\"p\">{`app/design/frontend/<Vendor>/<theme>/web/css/`}</inlineCode>{` directory, as the source of Sass. It stores the generated CSS in `}<inlineCode parentName=\"p\">{`styles.css`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`app/design/frontend/<Vendor>/<theme>`}</inlineCode>{` directory.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Put the source `}<inlineCode parentName=\"p\">{`styles.scss`}</inlineCode>{` file in the `}<inlineCode parentName=\"p\">{`app/design/frontend/<Vendor>/<theme>/web/css/`}</inlineCode>{` directory.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Declare the resulting CSS file in the `}<inlineCode parentName=\"p\">{`default_head_blocks.xml`}</inlineCode>{` file in the `}<inlineCode parentName=\"p\">{`app/design/frontend/<Vendor>/<theme/Magento_Theme/layout/`}</inlineCode>{` directory to enable your theme to use the generated CSS. You can create an empty `}<inlineCode parentName=\"p\">{`default_head_blocks.xml`}</inlineCode>{` file and copy the following code:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`<page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\">\n    <head>\n        <css src=\"css/styles.css\"/>\n    </head>\n</page>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`To generate CSS, run\n`}<inlineCode parentName=\"p\">{`gulp styles`}</inlineCode>{`.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"using-the-import-directive-in-sass\"\n    }}>{`Using the @import directive in Sass`}</h2>\n    <p>{`In the source .`}<inlineCode parentName=\"p\">{`scss`}</inlineCode>{` files you can use the `}<inlineCode parentName=\"p\">{`@import`}</inlineCode>{` directive, to import other `}<inlineCode parentName=\"p\">{`.scss`}</inlineCode>{` files. You can put the module-related stylesheets in the module directories in the theme, and then include them in the main `}<inlineCode parentName=\"p\">{`.scss`}</inlineCode>{` file. For example, if you create a `}<inlineCode parentName=\"p\">{`_catalogstls.scss`}</inlineCode>{` file for styles of the `}<inlineCode parentName=\"p\">{`Magento_Catalog`}</inlineCode>{` module and put it in `}<inlineCode parentName=\"p\">{`app/design/frontend/<Vendor>/<theme>/Magento_Catalog/styles`}</inlineCode>{`, you can import it using the following notation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`@import '../Magento_Theme/styles/module'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}