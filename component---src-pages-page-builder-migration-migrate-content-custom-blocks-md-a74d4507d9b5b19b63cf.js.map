{"version":3,"file":"component---src-pages-page-builder-migration-migrate-content-custom-blocks-md-a74d4507d9b5b19b63cf.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/migration/migrate-content-custom-blocks.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"migrate-content-from-custom-blocks\"\n    }}>{`Migrate content from custom blocks`}</h1>\n    <p>{`This topic describes how to migrate content from your custom BlueFoot blocks to Page Builder custom content types.`}</p>\n    <p>{`The example code used in this topic is for migrating the data for a custom BlueFoot block called `}<inlineCode parentName=\"p\">{`list`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`This topic assumes you have taken the following actions:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Migrated the core BlueFoot blocks`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Familiarized yourself with our `}<a parentName=\"p\" {...{\n            \"href\": \"how-content-migration-works.md\"\n          }}>{`content type renderers`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Familiarized yourself with the `}<a parentName=\"p\" {...{\n            \"href\": \"https://developer.adobe.com/commerce/php/development/prepare/extension-lifecycle/\"\n          }}>{`module lifecycle`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Re-implemented your custom BlueFoot block as a new Page Builder content type.`}</p>\n        <p parentName=\"li\">{`This prerequisite is the most time-consuming. But with careful planning, you can build a simpler version of your BlueFoot block in Page Builder.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"step-1-increase-version\"\n    }}>{`Step 1: Increase version`}</h2>\n    <p>{`Increase your module's `}<inlineCode parentName=\"p\">{`version`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/php/development/build/composer-integration/\"\n      }}><inlineCode parentName=\"a\">{`composer.json`}</inlineCode></a>{` file.`}</p>\n    <p>{`This causes Adobe Commerce to run your module's setup scripts during the migration process.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Follow Commerce's `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/php/development/versioning/\"\n      }}>{`versioning policy`}</a>{` when deciding the value of your module's next version.`}</p>\n    <h2 {...{\n      \"id\": \"step-2-add-page-builder-dependency\"\n    }}>{`Step 2: Add Page Builder dependency`}</h2>\n    <p>{`Add the `}<inlineCode parentName=\"p\">{`Magento_PageBuilder`}</inlineCode>{` module dependency to your `}<inlineCode parentName=\"p\">{`composer.json`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`module.xml`}</inlineCode>{` files.`}</p>\n    <p>{`This gives your module access to the required migration API during the migration.`}</p>\n    <h2 {...{\n      \"id\": \"step-3-build-the-renderer\"\n    }}>{`Step 3: Build the renderer`}</h2>\n    <p>{`The renderer contains the data conversion code for your content type. It converts the BlueFoot JSON to the HTML storage format used by Page Builder content types.`}</p>\n    <p>{`Create the following class under `}<inlineCode parentName=\"p\">{`Setup/DataConverter/Renderer`}</inlineCode>{` and implement the following interface:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`Magento\\\\PageBuilder\\\\Setup\\\\DataConverter\\\\RendererInterface\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace VendorName\\\\ModuleName\\\\Setup\\\\DataConverter\\\\Renderer;\n\nuse Magento\\\\PageBuilder\\\\Setup\\\\DataConverter\\\\RendererInterface;\nuse Magento\\\\PageBuilder\\\\Setup\\\\DataConverter\\\\EavAttributeLoaderInterface;\nuse Magento\\\\PageBuilder\\\\Setup\\\\DataConverter\\\\StyleExtractorInterface;\n\nclass List implements RendererInterface\n{\n    /**\n     * @var EavAttributeLoaderInterface\n     */\n    private $eavAttributeLoader;\n\n    public function __construct(\n        EavAttributeLoaderInterface $eavAttributeLoader\n    ) {\n        $this->eavAttributeLoader = $eavAttributeLoader;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function render(array $itemData, array $additionalData = [])\n    {\n        $eavData = $this->eavAttributeLoader->load($itemData['entityId']);\n\n        return '<div>Your output HTML here</div>';\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-4-add-renderer-to-the-renderpool\"\n    }}>{`Step 4: Add renderer to the RenderPool`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`RenderPool`}</inlineCode>{` maps BlueFoot blocks to the renderers that migrate their content. You can find the existing renderers in `}<inlineCode parentName=\"p\">{`app/code/Magento/PageBuilderDataMigration/etc/di.xml`}</inlineCode>{`.`}</p>\n    <p>{`The migration module uses the `}<inlineCode parentName=\"p\">{`RenderPool`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file to find the renderer to run for a given block type. For example, if the migration module encounters a BlueFoot entity type of `}<inlineCode parentName=\"p\">{`row`}</inlineCode>{`, it searches for the name `}<inlineCode parentName=\"p\">{`row`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`RenderPool`}</inlineCode>{`. If it finds the name, it runs the associated renderer to migrate the row content.`}</p>\n    <p>{`The same logic applies to your `}<em parentName=\"p\">{`custom`}</em>{` BlueFoot blocks. If the name of your custom block is `}<inlineCode parentName=\"p\">{`list`}</inlineCode>{`, you must add it to the `}<inlineCode parentName=\"p\">{`RenderPool`}</inlineCode>{` in your module's `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file. If you don't add it, the migration module will not migrate your the content from your `}<inlineCode parentName=\"p\">{`list`}</inlineCode>{` block.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<type name=\"Magento\\\\PageBuilder\\\\Setup\\\\DataConverter\\\\RendererPool\">\n    <arguments>\n        <argument name=\"renderers\" xsi:type=\"array\">\n            <item name=\"list\" xsi:type=\"object\">VendorName\\\\ModuleName\\\\Setup\\\\DataConverter\\\\Renderer\\\\List</item>\n        </argument>\n    </arguments>\n</type>\n`}</code></pre>\n    <p>{`Example: List renderer `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` entry`}</p>\n    <h2 {...{\n      \"id\": \"step-5-run-migration\"\n    }}>{`Step 5: Run migration`}</h2>\n    <p>{`If you have not run the migration module yet, do it now using the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento setup:upgrade\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-6-add-a-new-setup-patch\"\n    }}>{`Step 6: Add a new setup patch`}</h2>\n    <p>{`Create a new data patch inline with our `}<a parentName=\"p\" {...{\n        \"href\": \"https://devdocs.magento.com/guides/v2.3/extension-dev-guide/declarative-schema/data-patches.html\"\n      }}>{`declarative schema documentation`}</a>{`. For this migration, we first declare the following dependencies in the constructor:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\EntityManager\\\\MetadataPool`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\DB\\\\AggregatedFieldDataConverter`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\DB\\\\Select\\\\QueryModifierFactory`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\DB\\\\FieldToConvert`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Magento\\\\PageBuilder\\\\Setup\\\\DataConverter\\\\MixedToPageBuilder`}</inlineCode></p>\n      </li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The migration module migrates the content from unknown BlueFoot blocks into HTML Code content types. To migrate this content into other content types, use the `}<inlineCode parentName=\"p\">{`MixedToPageBuilder`}</inlineCode>{` data converter.`}</p>\n    <p>{`The following example uses the `}<inlineCode parentName=\"p\">{`MixedToPageBuilder`}</inlineCode>{` class to convert content from CMS pages (cms_page), CMS blocks (cms_block), product attributes (catalog_product_entity_text), and catalog attributes (catalog_category_entity_text):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$pageMetadata = $this->metadataPool->getMetadata(PageInterface::class);\n$blockMetadata = $this->metadataPool->getMetadata(BlockInterface::class);\n$this->aggregatedFieldConverter->convert(\n    [\n        new FieldToConvert(\n            DataConverter\\\\MixedToPageBuilder::class,\n            $this->setup->getTable('cms_page'),\n            $pageMetadata->getIdentifierField(),\n            'content',\n            $this->createQueryModifier('content', Format::BLUEFOOT_KEY)\n        ),\n        new FieldToConvert(\n            DataConverter\\\\MixedToPageBuilder::class,\n            $this->setup->getTable('cms_block'),\n            $blockMetadata->getIdentifierField(),\n            'content',\n            $this->createQueryModifier('content', Format::BLUEFOOT_KEY)\n        ),\n        new FieldToConvert(\n            DataConverter\\\\MixedToPageBuilder::class,\n            $this->setup->getTable('catalog_product_entity_text'),\n            'value_id',\n            'value',\n            $this->createQueryModifier('value', Format::BLUEFOOT_KEY)\n        ),\n        new FieldToConvert(\n            DataConverter\\\\MixedToPageBuilder::class,\n            $this->setup->getTable('catalog_category_entity_text'),\n            'value_id',\n            'value',\n            $this->createQueryModifier('value', Format::BLUEFOOT_KEY)\n        )\n    ],\n    $this->setup->getConnection()\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-7-run-migration-again\"\n    }}>{`Step 7: Run migration again`}</h2>\n    <p>{`Run the following command to start your module's migration process:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento setup:upgrade\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next steps`}</h2>\n    <p>{`If you have content in other tables, continue to the next step: `}<a parentName=\"p\" {...{\n        \"href\": \"migrate-other-bluefoot-content.md\"\n      }}>{`Migrate other BlueFoot content`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}