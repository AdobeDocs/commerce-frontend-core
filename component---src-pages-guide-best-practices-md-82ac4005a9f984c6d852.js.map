{"version":3,"file":"component---src-pages-guide-best-practices-md-82ac4005a9f984c6d852.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/guide/best-practices.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"theme-development-best-practices\"\n    }}>{`Theme development best practices`}</h1>\n    <p>{`Utilizing best practices for theme development give you a better chance of avoiding conflicts and issues with your theme after you update or upgrade your instance or install a custom extension.`}</p>\n    <p>{`We recommend using the following best practices when developing themes:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`When `}<a parentName=\"p\" {...{\n            \"href\": \"themes/inheritance.md\"\n          }}>{`inheriting`}</a>{` from a default theme, extend the default styles instead of overriding them.  Whenever possible, put your customizations in the `}<inlineCode parentName=\"p\">{`_extend.less`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`_theme.less`}</inlineCode>{` file, instead of overriding a `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` file from a parent theme.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Customize, or create new, `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` layout files instead of customizing and overriding `}<inlineCode parentName=\"p\">{`.phtml`}</inlineCode>{` templates. For example, if you need to create a new container, it is better to add an `}<inlineCode parentName=\"p\">{`.xml`}</inlineCode>{` file than override an existing template. Some other customizations that can be performed using layout instructions include:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Change the position of a block or container using `}<inlineCode parentName=\"li\">{`<move>`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`Add or remove a block or container by setting the `}<inlineCode parentName=\"li\">{`remove`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`display`}</inlineCode>{` attribute to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` within the `}<inlineCode parentName=\"li\">{`<referenceBlock>/<referenceContainer>`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`Change the HTML tag or CSS class for the existing container using the `}<inlineCode parentName=\"li\">{`<referenceContainer>`}</inlineCode>{` element.`}</li>\n          <li parentName=\"ul\">{`Add fonts, images, and JavaScript files in the `}<inlineCode parentName=\"li\">{`<theme_dir>/web/`}</inlineCode>{` directory.`}</li>\n        </ul>\n        <p parentName=\"li\">{`See the `}<a parentName=\"p\" {...{\n            \"href\": \"layouts/index.md\"\n          }}>{`Layout chapter of this Guide`}</a>{` for more information on working with layouts.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Reuse the markup and design patterns from the default application files by referencing the existing `}<inlineCode parentName=\"p\">{`.phtml`}</inlineCode>{` templates (`}<a parentName=\"p\" {...{\n            \"href\": \"themes/debug.md#templates\"\n          }}>{`templates hints can help`}</a>{`) or copy-pasting HTML markup to your custom templates.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Use `}<inlineCode parentName=\"p\">{`<theme_dir>/etc/view.xml`}</inlineCode>{` to change image types or sizes, or add your own types. See `}<a parentName=\"p\" {...{\n            \"href\": \"themes/configure.md\"\n          }}>{`Configure images properties`}</a>{` for details. Use this file to also `}<a parentName=\"p\" {...{\n            \"href\": \"../javascript/jquery-widgets/gallery.md\"\n          }}>{`customize the product gallery widget`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`If you need to change the wording in the user interface, `}<a parentName=\"p\" {...{\n            \"href\": \"translations/dictionary.md\"\n          }}>{`add custom CSV dictionary files`}</a>{` instead of overriding `}<inlineCode parentName=\"p\">{`.phtml`}</inlineCode>{` templates.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Use `}<a parentName=\"p\" {...{\n            \"href\": \"css/critical-path.md\"\n          }}>{`the CSS critical path`}</a>{` to render the page much faster.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Always keep the text translatable. To ensure text used within your templates can be translated, wrap it within the translate function:\nExample:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-php\"\n          }}>{`<a href=\"#\"><?= __('Click to download'); ?></a>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Make use of the mobile-first approach when inheriting blank or Luma themes.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Refer to the `}<a parentName=\"p\" {...{\n            \"href\": \"https://developer.adobe.com/commerce/php/coding-standards/\"\n          }}>{`coding standards`}</a>{` for both back-end and front-end technologies.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Do not repeat work while styling. Instead, create a class or mixin and call them when needed.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`While styling any custom module, add the styling within the module, instead of adding it to the design theme. This way, the style will not be loaded unless the module is called. For example `}<inlineCode parentName=\"p\">{`app/code/Company/Module/view/frontend/web/css/source/_module.less`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`While styling a custom theme, add styles to separate less files, instead of appending to a single file. This way, styles are easier to track down and debug.`}</p>\n        <p parentName=\"li\">{`As a reference, check `}<inlineCode parentName=\"p\">{`[Magento_Blank_Theme_Path]/web/css/_styles.less`}</inlineCode>{`:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-less\"\n          }}>{`@import 'source/lib/_lib.less'; // Global lib\n@import 'source/_sources.less'; // Theme styles\n@import 'source/_components.less'; // Components styles (modal/sliding panel)\n`}</code></pre>\n        <p parentName=\"li\"><strong parentName=\"p\">{`Application-styled or ready-made component(s)`}</strong>{`: To check the list of existing component(s) found in `}<strong parentName=\"p\">{`blank theme`}</strong>{`: `}<inlineCode parentName=\"p\">{`[Magento_Blank_Theme_Path]/web/css/source/_sources.less`}</inlineCode>{` and  `}<inlineCode parentName=\"p\">{`[Magento_Blank_Theme_Path]/web/css/source/_components.less`}</inlineCode>{`, Magento adds their ready-made components via `}<inlineCode parentName=\"p\">{`@import`}</inlineCode>{`.`}</p>\n        <p parentName=\"li\">{` If you want to add custom components or extend an existing component, copy `}<inlineCode parentName=\"p\">{`[Magento_Blank_Theme_Path]/web/css/source/_components.less`}</inlineCode>{` into your custom theme. For example, use `}<inlineCode parentName=\"p\">{`app/design/frontend/Company/Theme/web/css/source/_components.less`}</inlineCode>{` and add/import your `}<inlineCode parentName=\"p\">{`Custom style for new/existing components`}</inlineCode>{`.`}</p>\n        <p parentName=\"li\">{`The blank theme path `}{`[Magento_Blank_Theme_Path]`}{` = `}<inlineCode parentName=\"p\">{`vendor/magento/theme-frontend-blank`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`app/design/frontend/Magento/blank`}</inlineCode>{` may vary.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-less\"\n          }}>{`//\n//  Components\n//  _____________________________________________\n\n@import 'components/_modals.less'; // From lib\n@import 'components/_modals_extend.less'; // Local\n\n//  _____________________________________________\n//\n//  Custom style for new components\n//  _____________________________________________\n\n@import 'components/_[CUSTOM_COMPONENT_1].less';\n@import 'components/_[CUSTOM_COMPONENT_2].less';\n\n//  _____________________________________________\n//\n//  Custom style for existing components\n//  _____________________________________________\n\n@import 'components/_[CUSTOM_COMPONENT_1]_extend.less';\n@import 'components/_[CUSTOM_COMPONENT_2]_extend.less';\n\n`}</code></pre>\n      </li>\n    </ol>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p><inlineCode parentName=\"p\">{`[CUSTOM_COMPONENT_1,2,3...]`}</inlineCode>{` needs to be replaced with a valid component name: `}<inlineCode parentName=\"p\">{`sliders, grids`}</inlineCode>{` etc. The new component name can be set as any value. For best practices, it is recommended to set a clear name that can be reused in the future.`}</p>\n    <p>{`Next, add styles for respective components (new or extended) in a separate file.\nFor example, for a new slider component: `}<inlineCode parentName=\"p\">{`app/code/Company/Module/view/frontend/web/css/source/components/_sliders.less`}</inlineCode>{`.\nTo extend or override an existing button style: `}<inlineCode parentName=\"p\">{`app/code/Company/Module/view/frontend/web/css/source/components/_buttons_extend.less`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}