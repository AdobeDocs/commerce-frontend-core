{"version":3,"file":"component---src-pages-page-builder-content-types-customize-add-custom-toolbar-md-9906ea264e6f7d2849f2.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/content-types/customize/add-custom-toolbar.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-a-custom-toolbar\"\n    }}>{`Add a custom toolbar`}</h1>\n    <p>{`This topic shows you how to implement an inline toolbar for your content type. You can see an example of a toolbar in Page Builder's Heading content type, as shown here:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1070px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"12.187500000000002%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/3ebf70b3519a82eb4e57452a4bd926c0/5530d/toolbar.webp 320w\", \"/commerce-frontend-core/static/3ebf70b3519a82eb4e57452a4bd926c0/0c8fb/toolbar.webp 640w\", \"/commerce-frontend-core/static/3ebf70b3519a82eb4e57452a4bd926c0/6606d/toolbar.webp 1070w\"],\n            \"sizes\": \"(max-width: 1070px) 100vw, 1070px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/3ebf70b3519a82eb4e57452a4bd926c0/dd4a7/toolbar.png 320w\", \"/commerce-frontend-core/static/3ebf70b3519a82eb4e57452a4bd926c0/0f09e/toolbar.png 640w\", \"/commerce-frontend-core/static/3ebf70b3519a82eb4e57452a4bd926c0/ca019/toolbar.png 1070w\"],\n            \"sizes\": \"(max-width: 1070px) 100vw, 1070px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-frontend-core/static/3ebf70b3519a82eb4e57452a4bd926c0/ca019/toolbar.png\",\n            \"alt\": \"Page Builder toolbar\",\n            \"title\": \"Page Builder toolbar\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`Toolbars provide end-users with a quick way to change common properties of your content type (such as text alignment and heading types) without needing to open the full editor. The toolbar does not replace the need for form fields in the editor; it simply extends those fields.`}</p>\n    <h2 {...{\n      \"id\": \"how-the-toolbar-works\"\n    }}>{`How the Toolbar works`}</h2>\n    <p>{`The diagram below shows the basic steps for adding a toolbar to your content type. It also shows how the various parts connect and work together.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"72.8125%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/994649b081044249e7455caf5a66c8da/5530d/how-toolbars-work.webp 320w\", \"/commerce-frontend-core/static/994649b081044249e7455caf5a66c8da/0c8fb/how-toolbars-work.webp 640w\", \"/commerce-frontend-core/static/994649b081044249e7455caf5a66c8da/94b1e/how-toolbars-work.webp 1280w\", \"/commerce-frontend-core/static/994649b081044249e7455caf5a66c8da/d9bc9/how-toolbars-work.webp 1702w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/994649b081044249e7455caf5a66c8da/dd4a7/how-toolbars-work.png 320w\", \"/commerce-frontend-core/static/994649b081044249e7455caf5a66c8da/0f09e/how-toolbars-work.png 640w\", \"/commerce-frontend-core/static/994649b081044249e7455caf5a66c8da/bbbf7/how-toolbars-work.png 1280w\", \"/commerce-frontend-core/static/994649b081044249e7455caf5a66c8da/526f1/how-toolbars-work.png 1702w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-frontend-core/static/994649b081044249e7455caf5a66c8da/bbbf7/how-toolbars-work.png\",\n            \"alt\": \"Toolbar how it works\",\n            \"title\": \"Toolbar how it works\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"step-1-add-toolbar-options\"\n    }}>{`Step 1: Add toolbar options`}</h2>\n    <p>{`Toolbar options are the clickable items in a toolbar that represent the property values of a form field. For example, the Heading content type adds toolbar options for the `}<inlineCode parentName=\"p\">{`text_align`}</inlineCode>{` field from `}<inlineCode parentName=\"p\">{`pagebuilder_base_form.xml`}</inlineCode>{`. The Heading adds the values of the `}<inlineCode parentName=\"p\">{`text_align`}</inlineCode>{` field (`}<inlineCode parentName=\"p\">{`left`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`center`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`right`}</inlineCode>{`) as items on the toolbar, represented with the images provided by the icon CSS classes as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`[\n    {\n        key: \"text_align\",\n        type: \"select\",\n        values: [\n            {\n                value: \"left\",\n                label: \"Left\",\n                icon: \"icon-pagebuilder-align-left\",\n            },\n            {\n                value: \"center\",\n                label: \"Center\",\n                icon: \"icon-pagebuilder-align-center\",\n            },\n            {\n                value: \"right\",\n                label: \"Right\",\n                icon: \"icon-pagebuilder-align-right\",\n            }\n        ]\n    }\n]\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`OptionInterface`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ValueInterface`}</inlineCode>{` define the structure of toolbar options. You can find these interfaces in `}<inlineCode parentName=\"p\">{`magento2-page-builder/app/code/Magento/PageBuilder/view/adminhtml/web/ts/js/content-type-toolbar.types.ts`}</inlineCode>{`. Descriptions of the elements follow:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Element`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`key`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The field `}<inlineCode parentName=\"td\">{`name`}</inlineCode>{` you are binding to. For example: `}<inlineCode parentName=\"td\">{`<field name=\"quote_css\"...>`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`type`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The `}<inlineCode parentName=\"td\">{`formElement`}</inlineCode>{` of the key field. For example: `}<inlineCode parentName=\"td\">{`<field ... formElement=\"select\">`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`values`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Array of field option values.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`value`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Field option value, such as a CSS class (as shown in the code example).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`label`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Field option label, such as a label for a select option (as shown in the code example)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`icon`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`CSS class name for the icon to display in the toolbar to represent the field's option. If you don't include a CSS class, the toolbar will display the label instead.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"step-2-create-toolbar-instance\"\n    }}>{`Step 2: Create `}<inlineCode parentName=\"h2\">{`Toolbar`}</inlineCode>{` instance`}</h2>\n    <p>{`To create an instance of the Page Builder toolbar in your `}<inlineCode parentName=\"p\">{`preview.js`}</inlineCode>{` component:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Import Page Builder's `}<inlineCode parentName=\"strong\">{`Toolbar`}</inlineCode>{` class`}</strong>{` (`}<inlineCode parentName=\"li\">{`'Magento_PageBuilder/js/content-type-toolbar'`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Call the toolbar constructor.`}</strong>{` The `}<inlineCode parentName=\"li\">{`Toolbar`}</inlineCode>{` constructor requires an array of toolbar options (`}<inlineCode parentName=\"li\">{`this.toolbar = new Toolbar(this, this.getToolbarOptions());`}</inlineCode>{`). You can find Page Builder's `}<inlineCode parentName=\"li\">{`Toolbar`}</inlineCode>{` class in `}<inlineCode parentName=\"li\">{`Magento/PageBuilder/view/adminhtml/web/ts/js/content-type-toolbar.ts`}</inlineCode>{`.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`define([\n    'Magento_PageBuilder/js/content-type/preview',\n    'Magento_PageBuilder/js/content-type-toolbar',\n], function (PreviewBase, Toolbar) {\n    'use strict';\n\n    function Preview(parent, config, stageId) {\n        PreviewBase.call(this, parent, config, stageId);\n        this.toolbar = new Toolbar(this, this.getToolbarOptions());\n    }\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-3-add-toolbar-markup\"\n    }}>{`Step 3: Add toolbar markup`}</h2>\n    <p>{`Within your `}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{` template, use a `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` element (with CSS class and events) to wrap whichever element in your template you want the toolbar to act on. For example, the custom `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/commerce-docs/pagebuilder-examples/blob/master/Quote/Custom/view/adminhtml/web/template/content-type/custom-quote/default/preview.html\"\n      }}>{`Quote content type`}</a>{` wraps its `}<inlineCode parentName=\"p\">{`<blockquote>`}</inlineCode>{` element within a `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` with the toolbar's CSS class and event binding, as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!--preview.html-->\n<div attr=\"data.main.attributes\" ko-style=\"data.main.style\" class=\"pagebuilder-content-type\" css=\"data.main.css\" event=\"{ mouseover: onMouseOver, mouseout: onMouseOut }, mouseoverBubble: false\">\n    <render args=\"getOptions().template\"/>\n    <div class=\"pagebuilder-toolbar-container\"\n         tabindex=\"0\"\n         event=\"{ focusin: toolbar.onFocusIn, focusout: toolbar.onFocusOut }\">\n        <with args=\"toolbar\">\n            <render args=\"template\"/>\n        </with>\n        <blockquote class=\"quote-content\" attr=\"data.quote.attributes\" css=\"data.quote.css\" ko-style=\"data.quote.style\" data-bind=\"liveEdit: { field: 'quote_text', placeholder: $t('Enter Quote') }\"></blockquote>\n    </div>\n    <div class=\"quote-author\" attr=\"data.author.attributes\" ko-style=\"data.author.style\" css=\"data.author.css\" data-bind=\"liveEdit: { field: 'quote_author', placeholder: $t('Enter Author') }\"></div>\n    <div class=\"quote-description\" attr=\"data.author_title.attributes\" ko-style=\"data.author_title.style\" css=\"data.author_title.css\" data-bind=\"liveEdit: { field: 'quote_author_desc', placeholder: $t('Enter Description') }\"></div>\n</div>\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Line 4:`}</strong>{` Use this CSS class to correctly format and control the screen placement of the toolbar when the wrapped HTML element receives focus.`}</p>\n    <p><strong parentName=\"p\">{`Line 5:`}</strong>{` Set a `}<inlineCode parentName=\"p\">{`tabindex`}</inlineCode>{` of 0 to ensure that the `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` wrapper is part of the default focus order for tabbing.`}</p>\n    <p><strong parentName=\"p\">{`Line 6:`}</strong>{` Use the the Toolbar's `}<inlineCode parentName=\"p\">{`onFocusIn`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onFocusOut`}</inlineCode>{` methods to handle the events for `}<inlineCode parentName=\"p\">{`focusin`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`focusout`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Lines 7-9:`}</strong>{` Add the toolbar's HTML template as returned from your `}<inlineCode parentName=\"p\">{`toolbar`}</inlineCode>{` instance of the `}<inlineCode parentName=\"p\">{`Toolbar`}</inlineCode>{` class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export default class Toolbar {\n    get template(): string {\n        return \"Magento_PageBuilder/content-type-toolbar\";\n    }\n}\n`}</code></pre>\n    <p>{`You can find this HTML template here: `}<inlineCode parentName=\"p\">{`/Magento/PageBuilder/view/adminhtml/web/template/content-type-toolbar.html`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"example-code\"\n    }}>{`Example code`}</h2>\n    <p>{`The following links show how the Heading implements its toolbar within its `}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{` template and `}<inlineCode parentName=\"p\">{`preview.js`}</inlineCode>{` component:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`/Magento/PageBuilder/view/adminhtml/web/template/content-type/heading/default/preview.html`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`/Magento/PageBuilder/view/adminhtml/web/ts/js/content-type/heading/preview.ts`}</inlineCode></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}