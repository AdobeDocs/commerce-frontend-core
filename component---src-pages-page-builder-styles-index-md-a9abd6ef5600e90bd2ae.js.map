{"version":3,"file":"component---src-pages-page-builder-styles-index-md-a9abd6ef5600e90bd2ae.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/styles/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-page-builder-styles-content\"\n    }}>{`How Page Builder styles content`}</h1>\n    <p>{`Page Builder applies CSS styles to both native and custom content types by generating attribute-based CSS rulesets that are unique to each content type on a page. Page Builder generates and applies styles to content types in four stages:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#content-type-attributes\"\n          }}>{`Add content-type attributes`}</a>{`. Page Builder adds a `}<inlineCode parentName=\"p\">{`data-pb-style`}</inlineCode>{` attribute and a dynamically generated value to the content type so that it can be uniquely targeted by a CSS selector.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#dynamic-css-selectors\"\n          }}>{`Generate dynamic CSS selectors`}</a>{`. Page Builder generates a CSS selector for the content type by combining the page's `}<inlineCode parentName=\"p\">{`html-body`}</inlineCode>{` ID and the `}<inlineCode parentName=\"p\">{`data-pb-style`}</inlineCode>{` attribute with the content type's unique value.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#css-rulesets\"\n          }}>{`Create CSS rulesets`}</a>{`. Page Builder creates the CSS ruleset (property: values) for the selector by pulling values from the content type's form editor.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#internal-stylesheets\"\n          }}>{`Create internal stylesheets`}</a>{`. Page Builder creates an internal stylesheet for each page by adding a `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` block before the content types on the page.`}</p>\n      </li>\n    </ul>\n    <p>{`This topic details each stage in the process.`}</p>\n    <h2 {...{\n      \"id\": \"content-type-attributes\"\n    }}>{`Content-type attributes`}</h2>\n    <p>{`For every content type (both native and custom), Page Builder adds an attribute called `}<inlineCode parentName=\"p\">{`data-pb-style`}</inlineCode>{` with a unique and dynamically generated value. The following example shows a Heading content type with the style attribute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<h2 data-content-type=\"heading\"\n    data-appearance=\"default\"\n    data-element=\"main\"\n    data-pb-style=\"XDFNGK9\">\n    My Heading\n</h2>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dynamic-css-selectors\"\n    }}>{`Dynamic CSS selectors`}</h2>\n    <p>{`Page Builder generates its CSS selectors using one `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` selector and one `}<inlineCode parentName=\"p\">{`attribute`}</inlineCode>{` selector. This pattern is always the same, which gives all Page Builder CSS selectors a specificity of `}<strong parentName=\"p\">{`110`}</strong>{`. The anatomy of a Page Builder CSS selector is shown here:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/75cd4499066f1ec7219ca136543ff81d/pagebuilder-style-selector.svg\",\n        \"alt\": \"Page Builder style selector\"\n      }}></img></p>\n    <p>{`As noted, the CSS specificity of 110 is relatively low, which makes it possible to override these styles with your own custom CSS. For more information on CSS specificity and how it works, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\"\n      }}>{`https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"css-rulesets\"\n    }}>{`CSS rulesets`}</h2>\n    <p>{`To create the CSS rulesets for the selectors, Page Builder pulls the properties and values from the content type's form editor. The following example lists the CSS rules created from a Row content type (with minor changes made to the margins and paddings in the editor):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`#html-body [data-pb-style=WMWMCFQ] {\n    justify-content: flex-start;\n    display: flex;\n    flex-direction: column;\n    background-position: left top;\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-attachment: scroll;\n    border-style: none;\n    border-width: 1px;\n    border-radius: 0;\n    margin: 0 0 10px;\n    padding: 10px;\n}\n`}</code></pre>\n    <p>{`As end users change and save settings within a content type's editor, Page Builder updates the CSS ruleset to reflect those changes (and creates a new unique value for `}<inlineCode parentName=\"p\">{`data-pb-style`}</inlineCode>{`).`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/b59bc8fec2a825f4a95c8a7f0f8db1cc/how-pagebuilder-styles-content.svg\",\n        \"alt\": \"Page Builder content styling\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"internal-stylesheets\"\n    }}>{`Internal stylesheets`}</h2>\n    <p>{`If you inspect a page on your storefront built with Page Builder, you can see how Page Builder applies styles to its content types. For example, the following HTML is from a simple page with three content types: a `}<inlineCode parentName=\"p\">{`Row`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`Text`}</inlineCode>{`. The highlighted parts show how Page Builder defines and applies the styles to content types on a page.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"951px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"49.0625%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/019e3a1eec065fbfc127b45b91228129/5530d/pagebuilder-inspect-styling.webp 320w\", \"/commerce-frontend-core/static/019e3a1eec065fbfc127b45b91228129/0c8fb/pagebuilder-inspect-styling.webp 640w\", \"/commerce-frontend-core/static/019e3a1eec065fbfc127b45b91228129/2bbcb/pagebuilder-inspect-styling.webp 951w\"],\n            \"sizes\": \"(max-width: 951px) 100vw, 951px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/019e3a1eec065fbfc127b45b91228129/dd4a7/pagebuilder-inspect-styling.png 320w\", \"/commerce-frontend-core/static/019e3a1eec065fbfc127b45b91228129/0f09e/pagebuilder-inspect-styling.png 640w\", \"/commerce-frontend-core/static/019e3a1eec065fbfc127b45b91228129/79e31/pagebuilder-inspect-styling.png 951w\"],\n            \"sizes\": \"(max-width: 951px) 100vw, 951px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-frontend-core/static/019e3a1eec065fbfc127b45b91228129/79e31/pagebuilder-inspect-styling.png\",\n            \"alt\": \"Page Builder style selector\",\n            \"title\": \"Page Builder style selector\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Html-body ID`}</strong>{`. The first thing to notice is the CSS `}<inlineCode parentName=\"p\">{`id=html-body`}</inlineCode>{` assigned to Adobe Commerce storefront pages. Page Builder uses this `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` to construct all the CSS selectors it applies to its content types.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Internal style block`}</strong>{`. Page Builder adds all the unique `}<inlineCode parentName=\"p\">{`data-pb-style`}</inlineCode>{` attribute styles for the page's content types to a single `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` block. This creates what's called an internal stylesheet for the page. In this example, the page contains three content types that required three CSS rulesets for the page's `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` block.`}</p>\n        <p parentName=\"li\">{`Note that not every content type on the page needs its own unique ruleset. In many cases, CSS rulesets can be shared among the content types on the page. Page Builder determines the most efficient application of CSS to the content types on the page, then creates the rulesets necessary for accurate styling.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Applied styles`}</strong>{`. The dynamic `}<inlineCode parentName=\"p\">{`data-pb-style`}</inlineCode>{` attributes on the content types match their respective CSS styles in the `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` block, and the browser does the rest. For both custom and native content types, Page Builder applies the `}<inlineCode parentName=\"p\">{`data-pb-style`}</inlineCode>{` attribute to content type elements that contain `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` nodes.`}</p>\n        <p parentName=\"li\">{`For example, notice how Page Builder adds the `}<inlineCode parentName=\"p\">{`data-pb-style`}</inlineCode>{` attribute to the Row's `}<inlineCode parentName=\"p\">{`inner`}</inlineCode>{` element, and not the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element, as was done for the Heading and Text content types. The reason becomes clear when you look at the Row's element structure within its config file (`}<inlineCode parentName=\"p\">{`row.xml`}</inlineCode>{`):`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-xml\"\n          }}>{`<elements>\n    <element name=\"main\">\n        <style name=\"display\" source=\"display\" converter=\"Magento_PageBuilder/js/converter/style/display\" preview_converter=\"Magento_PageBuilder/js/converter/style/preview/display\"/>\n        <attribute name=\"name\" source=\"data-content-type\"/>\n        <attribute name=\"appearance\" source=\"data-appearance\"/>\n    </element>\n    <element name=\"inner\">\n        <style name=\"background_color\" source=\"background_color\"/>\n        <style name=\"background_image\" source=\"background_image\" converter=\"Magento_PageBuilder/js/converter/style/background-image\" preview_converter=\"Magento_PageBuilder/js/converter/style/preview/background-image\" persistence_mode=\"write\"/>\n        <style name=\"background_position\" source=\"background_position\"/>\n        <style name=\"background_size\" source=\"background_size\"/>\n        <style name=\"background_repeat\" source=\"background_repeat\"/>\n        <style name=\"background_attachment\" source=\"background_attachment\"/>\n        <style name=\"text_align\" source=\"text_align\"/>\n        ...\n`}</code></pre>\n        <p parentName=\"li\">{`As shown, the Row's `}<inlineCode parentName=\"p\">{`inner`}</inlineCode>{` element contains all the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` nodes applied to the Row, not the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element. So Page Builder applies the `}<inlineCode parentName=\"p\">{`data-pb-style`}</inlineCode>{` attribute to the Row's `}<inlineCode parentName=\"p\">{`inner`}</inlineCode>{` element to ensure the proper application of CSS styles. For the Heading and Text content types, all the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` nodes are in the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element, so Page Builder applies the `}<inlineCode parentName=\"p\">{`data-pb-style`}</inlineCode>{` attribute to those elements in the DOM.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"summary\"\n    }}>{`Summary`}</h2>\n    <p>{`Page Builder applies styles to native and custom content types by creating dynamic, attribute-based styles, using a CSS selector pattern that results in a specificity of 110 for each content type style. Page Builder adds these styles to a single internal stylesheet for each page and can be easily overridden with custom CSS classes.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"override-pagebuilder-styles.md\"\n      }}>{`Override Page Builder styles`}</a>{` to start customizing Page Builder's styles to meet your needs.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}