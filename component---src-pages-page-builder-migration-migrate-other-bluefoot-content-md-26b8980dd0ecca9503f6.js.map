{"version":3,"file":"component---src-pages-page-builder-migration-migrate-other-bluefoot-content-md-26b8980dd0ecca9503f6.js","mappings":"uSAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,kCACH,mCACL,kBAAK,uGACL,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,MAAO,eAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,gBAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,gCAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,kCAGzB,kBAAK,iHACL,eACE,GAAM,iBACH,kBACL,kBAAK,4JAA0J,uBAAYA,WAAW,KAAM,iBAA8B,MAC1N,eACE,GAAM,qCACH,sCACL,kBAAK,wFACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,8DAA4D,uBAAYA,WAAW,KAAM,oBAAiC,OAEjJ,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,aAAW,cAAGA,WAAW,IAC1C,KAAQ,+FACL,oBAAwB,kCAAgC,uBAAYA,WAAW,KAAM,gCAA6C,iEAE3I,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,kBAAgB,uBAAYA,WAAW,KAAM,wDAAqE,OAEzI,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,2CAAyC,uBAAYA,WAAW,KAAM,WAAwB,iBAGvH,eACE,GAAM,4BACH,6BACL,kBAAK,0FACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,6hFAyFP,kBAAK,gEAA8D,uBAAYA,WAAW,KAAM,WAAwB,qCAAmC,uBAAYA,WAAW,KAAM,4BAAyC,0BAAwB,uBAAYA,WAAW,KAAM,QAAqB,yCAAuC,uBAAYA,WAAW,KAAM,yBAAsC,yGACrZ,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,6iBAoBP,eACE,GAAM,6BACH,8BACL,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,8CAA4C,uBAAYC,WAAW,KAAM,mCAAgD,uOAAqO,uBAAYA,WAAW,KAAM,iBAA8B,yBAC9Z,kBAAK,wBAAsB,uBAAYA,WAAW,KAAM,iBAA8B,qDACtF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,iCAEP,kBAAK,mFAGR,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/migration/migrate-other-bluefoot-content.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"migrate-other-bluefoot-content\"\n    }}>{`Migrate other BlueFoot content`}</h1>\n    <p>{`By default, the migration module only migrates content from these tables of the Commerce database:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`CMS Pages`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`CMS Blocks`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Catalog Product Attributes`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Catalog Category Attributes`}</p>\n      </li>\n    </ul>\n    <p>{`If you have BlueFoot content in other tables, you must complete the following steps to migrate that content.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`This topic assumes you have a functioning Magento 2 module. If not, create a basic skeleton module now and verify that Commerce loads the module during `}<inlineCode parentName=\"p\">{`setup:upgrade`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"steps-for-migrating-other-content\"\n    }}>{`Steps for migrating other content`}</h2>\n    <p>{`Here are the basic steps for migrating BlueFoot content from other database tables:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add the following directory structure within your module: `}<inlineCode parentName=\"p\">{`Setup/Patch/Data`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a `}<a parentName=\"p\" {...{\n            \"href\": \"https://developer.adobe.com/commerce/php/development/components/declarative-schema/patches/\"\n          }}>{`data patch class`}</a>{` for your migration. Example: `}<inlineCode parentName=\"p\">{`MigrateBlogToPageBuilder.php`}</inlineCode>{`. Commerce executes this class when installing your module.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Implement the `}<inlineCode parentName=\"p\">{`Magento\\\\Framework\\\\Setup\\\\Patch\\\\DataPatchInterface`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Define your migration logic within the `}<inlineCode parentName=\"p\">{`apply()`}</inlineCode>{` function.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"data-patch-class-example\"\n    }}>{`Data patch class example`}</h2>\n    <p>{`The following example shows how you might migrate blog content created with BlueFoot:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\ndeclare(strict_types=1);\n\nnamespace VendorName\\\\Blog\\\\Setup\\\\Patch\\\\Data;\n\nuse Magento\\\\Framework\\\\Setup\\\\Patch\\\\DataPatchInterface;\nuse Magento\\\\Framework\\\\Setup\\\\ModuleDataSetupInterface;\nuse Magento\\\\Framework\\\\DB\\\\AggregatedFieldDataConverter;\nuse Magento\\\\Framework\\\\DB\\\\Select\\\\QueryModifierFactory;\nuse Magento\\\\Framework\\\\DB\\\\FieldToConvert;\nuse Magento\\\\PageBuilderDataMigration\\\\Setup\\\\DataConverter\\\\Format;\nuse Magento\\\\PageBuilderDataMigration\\\\Setup\\\\DataConverter\\\\BlueFootToPageBuilder;\n\nclass MigrateToBlogPageBuilder implements DataPatchInterface\n{\n    /**\n     * @var ModuleDataSetupInterface\n     */\n    private $moduleDataSetup;\n\n    /**\n     * @var AggregatedFieldDataConverter\n     */\n    private $aggregatedFieldConverter;\n\n    /**\n     * @var QueryModifierFactory\n     */\n    private $queryModifierFactory;\n\n    /**\n     * @param ModuleDataSetupInterface $moduleDataSetup\n     * @param AggregatedFieldDataConverter $aggregatedFieldConverter\n     * @param QueryModifierFactory $queryModifierFactory\n     */\n    public function __construct(\n        ModuleDataSetupInterface $moduleDataSetup,\n        AggregatedFieldDataConverter $aggregatedFieldConverter,\n        QueryModifierFactory $queryModifierFactory\n    ) {\n        $this->moduleDataSetup = $moduleDataSetup;\n        $this->aggregatedFieldConverter = $aggregatedFieldConverter;\n        $this->queryModifierFactory = $queryModifierFactory;\n    }\n\n    /**\n     * @return DataPatchInterface|void\n     * @throws \\\\Magento\\\\Framework\\\\DB\\\\FieldDataConversionException\n     */\n    public function apply()\n    {\n        $this->aggregatedFieldConverter->convert(\n            [\n                new FieldToConvert(\n                    BlueFootToPageBuilder::class,\n                    $this->moduleDataSetup->getTable('blog'),\n                    'blog_id',\n                    'content',\n                    $this->queryModifierFactory->create(\n                        'like',\n                        [\n                            'values' => [\n                                'content' => '%' . Format::BLUEFOOT_KEY . '%'\n                            ]\n                        ]\n                    )\n                ),\n            ],\n            $this->moduleDataSetup->getConnection()\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function getAliases()\n    {\n        return [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public static function getDependencies()\n    {\n        return [];\n    }\n}\n`}</code></pre>\n    <p>{`The key part of this implementation is the logic within the `}<inlineCode parentName=\"p\">{`apply()`}</inlineCode>{` function. The function uses the `}<inlineCode parentName=\"p\">{`aggregatedFieldConverter`}</inlineCode>{` to iterate over each `}<inlineCode parentName=\"p\">{`blog`}</inlineCode>{` table row. For each row, we run the `}<inlineCode parentName=\"p\">{`BlueFootToPageBuilder`}</inlineCode>{` data converter. And we optimize it by using a query modifier to retrieve only the BlueFoot content:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`$this->aggregatedFieldConverter->convert(\n    [\n        new FieldToConvert(\n            BlueFootToPageBuilder::class,\n            $this->moduleDataSetup->getTable('blog'),\n            'blog_id',\n            'content',\n            $this->queryModifierFactory->create(\n                'like',\n                [\n                    'values' => [\n                        'content' => '%' . Format::BLUEFOOT_KEY . '%'\n                    ]\n                ]\n            )\n        ),\n    ],\n    $this->moduleDataSetup->getConnection()\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"run-your-migration-module\"\n    }}>{`Run your migration module`}</h2>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The above changes will not run when using `}<inlineCode parentName=\"p\">{`bin/magento pagebuilder:migrate`}</inlineCode>{`. That command only runs for the default areas mentioned at the start of this topic. If you want to run your setup patch using a similar command, you need to create a console command for your module. Otherwise, you can use the `}<inlineCode parentName=\"p\">{`setup:upgrade`}</inlineCode>{` command as follows.`}</p>\n    <p>{`You can now run the `}<inlineCode parentName=\"p\">{`setup:upgrade`}</inlineCode>{` command to migrate your other BlueFoot content:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`bin/magento setup:upgrade\n`}</code></pre>\n    <p>{`That's it. Use this same pattern to migrate BlueFoot content from other tables.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}