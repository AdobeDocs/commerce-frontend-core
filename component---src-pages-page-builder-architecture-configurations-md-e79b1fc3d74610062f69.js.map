{"version":3,"file":"component---src-pages-page-builder-architecture-configurations-md-e79b1fc3d74610062f69.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/architecture/configurations.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"content-type-configurations\"\n    }}>{`Content type configurations`}</h1>\n    <p>{`Content type configurations are how you define your content types to Page Builder. Creating new content types, extending content-types, and customizing content types all starts with an XML configuration file.`}</p>\n    <p>{`Your configuration should conform to our XSD: `}<inlineCode parentName=\"p\">{`urn:magento:module:Magento_PageBuilder:etc/content_type.xsd`}</inlineCode>{`. This topic provides descriptions of all the elements and properties that make up a content type configuration file. We'll start with the first element, `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{`, and work our way down to the last element.`}</p>\n    <h2 {...{\n      \"id\": \"type-element\"\n    }}><inlineCode parentName=\"h2\">{`type`}</inlineCode>{` element`}</h2>\n    <p>{`There are a number of simple attributes that can be configured within the `}<inlineCode parentName=\"p\">{`<type />`}</inlineCode>{` node of your content type.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name of the content type that Adobe Commerce uses for XML merging. The convention for using multi-word names is to separate the words with hyphens.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`label`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Label displayed in the Page Builder panel, option menu, and on the Admin stage.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`menu_section`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Menu section or category in the panel menu where your content type is displayed. The default menu sections are Layout, Elements, Media, and Add Content. See `}<a parentName=\"td\" {...{\n              \"href\": \"../content-types/customize/configure-panel.md\"\n            }}>{`Panel configurations`}</a>{` for more details.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`icon`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional. CSS class for icon to be displayed within the menu alongside the content types name. See `}<a parentName=\"td\" {...{\n              \"href\": \"../content-types/customize/add-icons-images.md\"\n            }}>{`Add icons and images`}</a>{` for more guidance.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`View model responsible for rendering the preview and master format. The component does not need to specify the `}<inlineCode parentName=\"td\">{`.js`}</inlineCode>{` extension. There are two component types to choose from: `}<inlineCode parentName=\"td\">{`content-type`}</inlineCode>{` and `}<inlineCode parentName=\"td\">{`content-type-collection`}</inlineCode>{`. Use `}<inlineCode parentName=\"td\">{`Magento_PageBuilder/js/content-type`}</inlineCode>{` for static content types that do not have children. Use `}<inlineCode parentName=\"td\">{`Magento_PageBuilder/js/content-type-collection`}</inlineCode>{` for content types that can contain children, otherwise known as container content types.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`preview_component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`JavaScript file (`}<inlineCode parentName=\"td\">{`preview.js`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`preview-collection.js`}</inlineCode>{`) that provides rendering logic within the Admin UI. The preview component does not need to specify the `}<inlineCode parentName=\"td\">{`.js`}</inlineCode>{` extension. `}<br /><br />{`For `}<em parentName=\"td\">{`collection`}</em>{` content types, you need to either reference your own `}<inlineCode parentName=\"td\">{`preview-collection`}</inlineCode>{` component or reference Page Builder's `}<inlineCode parentName=\"td\">{`preview-collection`}</inlineCode>{` (`}<inlineCode parentName=\"td\">{`preview_component=\"Magento_PageBuilder/js/content-type/preview-collection\"`}</inlineCode>{`). If you don't specify the `}<inlineCode parentName=\"td\">{`preview_component`}</inlineCode>{`, Page Builder uses the base `}<inlineCode parentName=\"td\">{`Preview`}</inlineCode>{` component shown in the code: `}<inlineCode parentName=\"td\">{`Magento_PageBuilder/js/content-type/preview`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`master_component`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`JavaScript file (`}<inlineCode parentName=\"td\">{`master.js`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`master-collection.js`}</inlineCode>{`) that provides rendering logic generic for all appearances of your content type when rendered on the storefront. The master component does not need to specify the `}<inlineCode parentName=\"td\">{`.js`}</inlineCode>{` extension. `}<br /><br />{`For `}<em parentName=\"td\">{`collection`}</em>{` content types, you need to either reference your own `}<inlineCode parentName=\"td\">{`master-collection`}</inlineCode>{` component or reference Page Builder's `}<inlineCode parentName=\"td\">{`master-collection`}</inlineCode>{` (`}<inlineCode parentName=\"td\">{`master_component=\"Magento_PageBuilder/js/content-type/master-collection\"`}</inlineCode>{`). If you don't specify the `}<inlineCode parentName=\"td\">{`master_component`}</inlineCode>{`, Page Builder uses the base `}<inlineCode parentName=\"td\">{`Master`}</inlineCode>{` component shown in the code: `}<inlineCode parentName=\"td\">{`Magento_PageBuilder/js/content-type/master`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`form`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`UI component form that provides the form controls for editing your content type. All forms can extend the `}<inlineCode parentName=\"td\">{`pagebuilder_base_form`}</inlineCode>{`, which contains boilerplate form configuration and the global Advanced Configuration section. If you decide to omit extending the base form you'll need to ensure you manually declare the various requirements from the base form. See `}<a parentName=\"td\" {...{\n              \"href\": \"https://developer.adobe.com/commerce/frontend-core/ui-components/\"\n            }}>{`UiComponent Documentation`}</a>{` for additional information.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sortOrder`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional. The listed order within the menu section. For example, `}<inlineCode parentName=\"td\">{`sortOrder=21`}</inlineCode>{` puts the content type third in the `}<inlineCode parentName=\"td\">{`Elements`}</inlineCode>{` menu section, after the content types with `}<inlineCode parentName=\"td\">{`sortOrder`}</inlineCode>{` values of 10 and 20.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`translate`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Identifies the attribute you want Commerce to translate.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<type name=\"text\"\n        label=\"Text\"\n        component=\"Magento_PageBuilder/js/content-type\"\n        preview_component=\"Magento_PageBuilder/js/content-type/text/preview\"\n        form=\"pagebuilder_text_form\"\n        menu_section=\"elements\"\n        icon=\"icon-pagebuilder-text\"\n        sortOrder=\"1\"\n        translate=\"label\">\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"direct-children-of-type\"\n    }}>{`Direct children of `}<inlineCode parentName=\"h3\">{`type`}</inlineCode></h3>\n    <p>{`The direct child elements of `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` are described here:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Element`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`parents`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Defines the default policy and matrix of which content types this content type can have as a parent. For instance the Slide content type defines a default policy of `}<inlineCode parentName=\"td\">{`deny`}</inlineCode>{` with an exception allowing this content type to only be housed within the Slider content type.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`children`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Similar to the `}<inlineCode parentName=\"td\">{`parents`}</inlineCode>{` option, however this defines the allowed `}<inlineCode parentName=\"td\">{`children`}</inlineCode>{` of the current content type. As with the Slide example this time the Slider defines the Slide as it's only allowed child.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`appearances`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Configures various appearances along with associated data mapping elements. This is a crucial part of all content types and defines how the master and preview systems should retrieve and display their data.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`is_system`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Determines menu visibility for the content type. System content types are visible in the menu. The default value for this is true. By setting this to false, you can hide child or \"special\" content types that are added by other content types. For example, you cannot directly drag a Slide content type onto the stage, which means it is not a system content type.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`additional_data`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Allows you to specify additional data for the component. See `}<a parentName=\"td\" {...{\n              \"href\": \"../content-types/customize/index.md\"\n            }}>{`additional configurations`}</a>{` for more information.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"parents-element\"\n    }}><inlineCode parentName=\"h3\">{`parents`}</inlineCode>{` element`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`parents`}</inlineCode>{` element specifies which content types can accept this type as a child.`}</p>\n    <p>{`Parent policies will override any child policies that are set.`}</p>\n    <p>{`You can configure the default policy to easily `}<inlineCode parentName=\"p\">{`allow`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`deny`}</inlineCode>{` all parents.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`default_policy`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Values: `}<inlineCode parentName=\"td\">{`allow`}</inlineCode>{` `}<inlineCode parentName=\"td\">{`deny`}</inlineCode>{`. Allows or denies all content types to be parents unless specified as a parent element.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The `}<inlineCode parentName=\"p\">{`parents`}</inlineCode>{` node accepts a list of content types for the policy via child `}<inlineCode parentName=\"p\">{`parent`}</inlineCode>{` elements.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name of the content type that this parents policy is assigned to. Such as `}<inlineCode parentName=\"td\">{`slider`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`policy`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Values: `}<inlineCode parentName=\"td\">{`allow`}</inlineCode>{` `}<inlineCode parentName=\"td\">{`deny`}</inlineCode>{`. Determine whether the current content type is allowed or denied to be a child of the specified content type.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<parents default_policy=\"deny\">\n    <parent name=\"row\" policy=\"allow\"/>\n    <parent name=\"column\" policy=\"allow\"/>\n</parents>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"children-element\"\n    }}><inlineCode parentName=\"h3\">{`children`}</inlineCode>{` element`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` element specifies which content types can accept this type as a parent, this configuration is formed the same as the above `}<inlineCode parentName=\"p\">{`parents`}</inlineCode>{` configuration, the difference being this controls which content types can be a child of the current content type.`}</p>\n    <p>{`Parent policies will override any child policies that are set.`}</p>\n    <p>{`You can configure the default policy to easily `}<inlineCode parentName=\"p\">{`allow`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`deny`}</inlineCode>{` all children.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`default_policy`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Values: `}<inlineCode parentName=\"td\">{`allow`}</inlineCode>{` `}<inlineCode parentName=\"td\">{`deny`}</inlineCode>{`. Allows or denies all content types to be children unless specified as a child element.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` node accepts a list of content types for the policy via child `}<inlineCode parentName=\"p\">{`child`}</inlineCode>{` elements.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name of the content type that this parents policy is assigned to. Such as `}<inlineCode parentName=\"td\">{`slider`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`policy`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Values: `}<inlineCode parentName=\"td\">{`allow`}</inlineCode>{` `}<inlineCode parentName=\"td\">{`deny`}</inlineCode>{`. Determine whether the current content type is allowed or denied to be a child of the specified content type.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<children default_policy=\"allow\">\n    <child name=\"row\" policy=\"deny\"/>\n    <child name=\"column\" policy=\"deny\"/>\n</children>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"appearance-element\"\n    }}><inlineCode parentName=\"h2\">{`appearance`}</inlineCode>{` element`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`appearances`}</inlineCode>{` node contains one or more `}<inlineCode parentName=\"p\">{`appearance`}</inlineCode>{` elements, which control how the content type renders in the Admin preview and storefront (using the master format).`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`appearance`}</inlineCode>{` configuration specifies how the `}<inlineCode parentName=\"p\">{`master`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`preview`}</inlineCode>{` components and templates interact with data from the master format. It also defines where and how data should be placed on the elements declared in your `}<inlineCode parentName=\"p\">{`master.html`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{` templates.`}</p>\n    <p>{`Each content type can have a number of different appearances. These appearances can alter where data is placed on the element. Different element placements, can provide different layouts for the same content type, without adding additional bloat to the UI.`}</p>\n    <p>{`For example, the Banner content type uses this feature to create four different appearances (layouts) for the same set of elements. This flexibility is one of Page Builder's key features. You can change an existing appearance (or add a new appearance) to provide new features for the same content type.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name for this appearance.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`default`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Determines whether this is the default appearance for the content type. The default will be auto selected when adding a new instance of the content type.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`preview_template`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Template used to display the content type within the admin preview.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`master_template`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Template which is hydrated with data and rendered to be stored as the master format.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`reader`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reads data for the content type from the master format. Unless you need to conduct complex retrieval of data from the master format we recommend you use the default `}<inlineCode parentName=\"td\">{`Magento_PageBuilder/js/master-format/read/configurable`}</inlineCode>{` reader as this contains the necessary logic for the child `}<inlineCode parentName=\"td\">{`element`}</inlineCode>{` nodes to work.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<appearance default=\"true\"\n            name=\"default\"\n            preview_template=\"Magento_PageBuilder/content-type/text/default/preview\"\n            master_template=\"Magento_PageBuilder/content-type/text/default/master\"\n            reader=\"Magento_PageBuilder/js/master-format/read/configurable\" />\n`}</code></pre>\n    <p>{`Every content type must declare a default appearance to allow other modules to easily extend the content type with additional appearances.`}</p>\n    <h3 {...{\n      \"id\": \"element-node\"\n    }}><inlineCode parentName=\"h3\">{`element`}</inlineCode>{` node`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`elements`}</inlineCode>{` node contains one or more `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` nodes. An `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` node defines the attributes and properties that Page Builder binds to the HTML elements (`}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<textarea>`}</inlineCode>{`) in your `}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`master.html`}</inlineCode>{` templates.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name used to reference the configuration data from your templates. The `}<inlineCode parentName=\"td\">{`name`}</inlineCode>{` must be unique within the current appearance.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`For example, if you specified `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` as your element name (`}<inlineCode parentName=\"p\">{`<element name=\"main\" />`}</inlineCode>{`), you could reference all styles and attributes in your `}<inlineCode parentName=\"p\">{`master.html`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{` templates as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div html=\"data.main.html\" attr=\"data.main.attributes\" ko-style=\"data.main.style\" css=\"data.main.css\"></div>\n`}</code></pre>\n    <p>{`Where `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` is the element's name and `}<inlineCode parentName=\"p\">{`html`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`attributes`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` are the elements that define the data for the `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{`. These data elements are described here:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Element`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`attribute`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Assign an HTML attribute to the current element.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`css`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Assign field name for CSS classes to be included on the element, also allows to specifically ignore system classes so they're not displayed within the content type's edit form.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`html`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Allows for a field's value to be output as HTML within the current element. This is used within the Text content type to ensure all content is rendered as expected. `}<strong parentName=\"td\">{`Warning:`}</strong>{` If you're using this attribute you should ensure you're safely escaping any harmful values to avoid adding potential XSS vulnerabilities within the admin.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`style`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Allows you to add standard CSS properties to the element, such as `}<inlineCode parentName=\"td\">{`height`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`width`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`border`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`padding`}</inlineCode>{`, and so on.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`tag`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Allows you to read the tag name of the element and map it back to the master format. This is used in instances where the content type is modifying the type of element output, such as in Heading.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <p>{`The Button Item content type shows multiple elements with various attributes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<elements>\n    <element name=\"main\">\n        <style name=\"display\" source=\"display\" converter=\"Magento_PageBuilder/js/content-type/button-item/converter/style/display\" preview_converter=\"Magento_PageBuilder/js/converter/style/preview/display\"/>\n        <attribute name=\"name\" source=\"data-content-type\"/>\n        <attribute name=\"appearance\" source=\"data-appearance\"/>\n        <css name=\"css_classes\"/>\n    </element>\n    <element name=\"link\">\n        <style name=\"text_align\" source=\"text_align\"/>\n        <style name=\"border\" source=\"border_style\" converter=\"Magento_PageBuilder/js/converter/style/border-style\"/>\n        <style name=\"border_color\" source=\"border_color\"/>\n        <style name=\"border_width\" source=\"border_width\" converter=\"Magento_PageBuilder/js/converter/style/border-width\"/>\n        <style name=\"border_radius\" source=\"border_radius\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n        <style name=\"margins\" storage_key=\"margins_and_padding\" reader=\"Magento_PageBuilder/js/property/margins\" converter=\"Magento_PageBuilder/js/converter/style/margins\"/>\n        <style name=\"padding\" storage_key=\"margins_and_padding\" reader=\"Magento_PageBuilder/js/property/paddings\" converter=\"Magento_PageBuilder/js/converter/style/paddings\"/>\n        <attribute name=\"button_link\" reader=\"Magento_PageBuilder/js/property/link\" persistence_mode=\"read\"/>\n        <attribute name=\"virtual_link_href\" storage_key=\"button_link\" source=\"href\" converter=\"Magento_PageBuilder/js/converter/attribute/link-href\" persistence_mode=\"write\"/>\n        <attribute name=\"virtual_link_target\" storage_key=\"button_link\" source=\"target\" converter=\"Magento_PageBuilder/js/converter/attribute/link-target\" persistence_mode=\"write\"/>\n        <attribute name=\"virtual_link_type\" storage_key=\"button_link\" source=\"data-link-type\" converter=\"Magento_PageBuilder/js/converter/attribute/link-type\" persistence_mode=\"write\"/>\n        <css name=\"button_type\"/>\n    </element>\n    <element name=\"empty_link\">\n        <style name=\"text_align\" source=\"text_align\"/>\n        <style name=\"border\" source=\"border_style\" converter=\"Magento_PageBuilder/js/converter/style/border-style\"/>\n        <style name=\"border_color\" source=\"border_color\"/>\n        <style name=\"border_width\" source=\"border_width\" converter=\"Magento_PageBuilder/js/converter/style/border-width\"/>\n        <style name=\"border_radius\" source=\"border_radius\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n        <style name=\"margins\" storage_key=\"margins_and_padding\" reader=\"Magento_PageBuilder/js/property/margins\" converter=\"Magento_PageBuilder/js/converter/style/margins\"/>\n        <style name=\"padding\" storage_key=\"margins_and_padding\" reader=\"Magento_PageBuilder/js/property/paddings\" converter=\"Magento_PageBuilder/js/converter/style/paddings\"/>\n        <css name=\"button_type\"/>\n    </element>\n    <element name=\"link_text\">\n        <html name=\"button_text\" converter=\"Magento_PageBuilder/js/converter/html/tag-escaper\"/>\n    </element>\n</elements>\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`We automatically add a `}<inlineCode parentName=\"p\">{`data-element`}</inlineCode>{` attribute to any HTML element in your templates that binds to the configuration `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` by name. This attribute enables Page Builder to read the data for a specific element. To ensure this works, you must include the Knockout bindings on the HTML elements in your template that require the properties you set for the corresponding element in the configuration. Otherwise you will not see your property configurations rendered in the DOM.`}</p>\n    <h3 {...{\n      \"id\": \"style-property-and-attribute-elements\"\n    }}><inlineCode parentName=\"h3\">{`style`}</inlineCode>{`, `}<inlineCode parentName=\"h3\">{`property`}</inlineCode>{`, and `}<inlineCode parentName=\"h3\">{`attribute`}</inlineCode>{` elements`}</h3>\n    <p>{`These elements share a common interface and can be configured using the following attributes.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Unique name used for configuration merging. It also provides the default value for `}<inlineCode parentName=\"td\">{`storage_key`}</inlineCode>{` if none is provided.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`storage_key`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional variable name for value in the data store. If no value is provided, the `}<inlineCode parentName=\"td\">{`name`}</inlineCode>{` is used. This is the form field's data scope which is typically the name unless a `}<inlineCode parentName=\"td\">{`dataScope`}</inlineCode>{` is provided on the field. Supports the dot notation for `}<inlineCode parentName=\"td\">{`dataScope`}</inlineCode>{` (such as `}<inlineCode parentName=\"td\">{`layout.min_height`}</inlineCode>{`).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`source`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The name of the property or attribute in the DOM. Must be in snake case. For instance `}<inlineCode parentName=\"td\">{`text_align`}</inlineCode>{` aligns to `}<inlineCode parentName=\"td\">{`text-align`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`converter`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Converts the value after reading or before saving to the DOM.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`preview_converter`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Converts the value for the preview. Used for cases where the conversion logic is different between the two views.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`persistence_mode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Used for read/write properties.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`reader`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Reader used for parsing attributes and properties out of the DOM. Should not be used with read-only persistence_mode.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`You can optionally set a `}<inlineCode parentName=\"p\">{`reader`}</inlineCode>{` in configuration, otherwise `}<inlineCode parentName=\"p\">{`Magento_PageBuilder/js/property/style-property-reader`}</inlineCode>{` will be used for properties, and `}<inlineCode parentName=\"p\">{`Magento_PageBuilder/js/property/attribute-reader`}</inlineCode>{` will be used for attributes. Both default readers accept `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` as a parameter, and return that value.`}</p>\n    <p>{`For example, the `}<inlineCode parentName=\"p\">{`margins`}</inlineCode>{` style uses a custom `}<inlineCode parentName=\"p\">{`margins`}</inlineCode>{` reader, as well as a custom converter, described next:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<style name=\"margins\" storage_key=\"margins_and_padding\" reader=\"Magento_PageBuilder/js/property/margins\" converter=\"Magento_PageBuilder/js/converter/style/margins\" />\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"converter\"\n    }}><inlineCode parentName=\"h3\">{`converter`}</inlineCode></h3>\n    <p>{`The converter enables you to convert data between different formats or make mutations on the data as it's read or written for your specific element.`}</p>\n    <p>{`For example, Page Builder's `}<inlineCode parentName=\"p\">{`remove-px.js`}</inlineCode>{` converter removes `}<inlineCode parentName=\"p\">{`px`}</inlineCode>{` strings from CSS values after reading `}<em parentName=\"p\">{`from`}</em>{` the DOM of the master format (using `}<inlineCode parentName=\"p\">{`fromDOM()`}</inlineCode>{`). This converts the value from a string to number so that it can be handled numerically as needed. The same converter adds the `}<inlineCode parentName=\"p\">{`px`}</inlineCode>{` string back to the CSS value before writing it `}<em parentName=\"p\">{`to`}</em>{` the DOM of the master format (using `}<inlineCode parentName=\"p\">{`toDOM()`}</inlineCode>{`).`}</p>\n    <p>{`All converters have these two functions:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fromDom()`}</inlineCode>{` - called after data is read from the master format.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toDom()`}</inlineCode>{` - called before observables are updated in the cycle rendering preview or master format.`}</li>\n    </ul>\n    <p>{`Page Builder provides several converters you can use in your own content types: `}<inlineCode parentName=\"p\">{`Magento/PageBuilder/view/adminhtml/web/js/converter`}</inlineCode>{`.`}</p>\n    <p>{`When accessing data provided into the above functions, `}<strong parentName=\"p\">{`you should`}</strong>{` use the `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`set`}</inlineCode>{` utility functions from `}<inlineCode parentName=\"p\">{`Magento_PageBuilder/js/utils/object`}</inlineCode>{`. These functions ensure that you can use dot notation to correctly retrieval and set that data mapping entries that traverse deeper into the data set.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <p>{`The following converter determines the output for an overlay background color:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`define([\"Magento_PageBuilder/js/utils/color-converter\", \"Magento_PageBuilder/js/utils/number-converter\", \"Magento_PageBuilder/js/utils/object\"], function (colorConverter, numberConverter, objectUtil) {\n    var OverlayBackgroundColor = function () {};\n\n    /**\n     * Convert value to internal format\n     *\n     * @param {string} value\n     * @returns {string | object}\n     */\n    OverlayBackgroundColor.prototype.fromDom = function fromDom(value) {\n        return value;\n    };\n\n    /**\n     * Convert value to knockout format\n     *\n     * @param {string} name\n     * @param {object} data\n     * @returns {string | object}\n     */\n    OverlayBackgroundColor.prototype.toDom = function toDom(name, data) {\n          var overlayColor = \"transparent\";\n\n          if (data.show_overlay === \"always\" && data.overlay_color !== \"\" && data.overlay_color !== undefined) {\n                overlayColor = colorConverter.fromHex(data.overlay_color, numberConverter.percentToDecimal(data.overlay_transparency));\n          }\n\n          return overlayColor;\n    };\n    return OverlayBackgroundColor;\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"static_style-and-static_attribute-elements\"\n    }}><inlineCode parentName=\"h3\">{`static_style`}</inlineCode>{` and `}<inlineCode parentName=\"h3\">{`static_attribute`}</inlineCode>{` elements`}</h3>\n    <p>{`These elements should be used to add static styles and attributes that don't require any logic or input by the end user. A good example is the CSS `}<inlineCode parentName=\"p\">{`overflow`}</inlineCode>{` property. Let's say a content type provides users with a `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{` property they can set. The max-height in this context is a dynamic property because users can set it from a form. As a dynamic property, you need to add it to an element using the `}<inlineCode parentName=\"p\">{`<style>`}</inlineCode>{` element. But the overflow property in this context is static. End users don't set it and no logic is required. But this property is essential to how your content type is rendered. It ensures that content can scroll when the max-height is reached. Without it, your content type would not render or function as intended.`}</p>\n    <p>{`Defining your static styles with `}<inlineCode parentName=\"p\">{`static_style`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`static_attribute`}</inlineCode>{`, rather than from a loaded style sheet, ensures that the master format has all the essential data it needs to render its content as intended, independent of any outside requirements.`}</p>\n    <p><strong parentName=\"p\">{`Example from Image`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<element name=\"desktop_image\">\n    <static_style source=\"max-width\" value=\"100%\" />\n    <static_style source=\"height\" value=\"auto\" />\n</element>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"html\"\n    }}><inlineCode parentName=\"h3\">{`html`}</inlineCode></h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`html`}</inlineCode>{` element allows you to read the innerHTML of the element in a property and map it back to the master format. This enables you to add rich text editing to a content type and have the HTML written and read from the master format.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<html name=\"message\" converter=\"Magento_PageBuilder/js/converter/html/tag-escaper\" />\n`}</code></pre>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The HTML you're including should be properly escaped and verified to ensure you're not introducing an XSS vulnerability within your content type. We provide `}<inlineCode parentName=\"p\">{`Magento_PageBuilder/js/converter/html/tag-escaper`}</inlineCode>{` to help with this functionality.`}</p>\n    <h3 {...{\n      \"id\": \"css\"\n    }}><inlineCode parentName=\"h3\">{`css`}</inlineCode></h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` element allows you to read the class value of the element in the property and map back to the master format.`}</p>\n    <p><inlineCode parentName=\"p\">{`filter`}</inlineCode>{` allows you to specify which static CSS classes to ignore.\nThese classes are not read and do not appear on the form.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<css name=\"button_type\">\n    <filter>\n        <class source=\"pagebuilder-banner-button\"/>\n    </filter>\n</css>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"tag\"\n    }}><inlineCode parentName=\"h3\">{`tag`}</inlineCode></h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`tag`}</inlineCode>{` element allows you to read the tag name of the element and map back to the master format.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<tag name=\"heading_type\"/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"mass-converter\"\n    }}>{`Mass converter`}</h3>\n    <p>{`The mass converter provides a similar function to the `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` converter. However, mass converters are able to access and modify `}<em parentName=\"p\">{`all`}</em>{` data. For example, we use these to convert the background desktop and mobile images into a JSON format which is read and rendered into CSS on the storefront. Mass converters are defined for a specific appearance.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`fromDom`}</inlineCode>{` method is called after data is read for all elements and converted by element converters.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`toDom`}</inlineCode>{` method is called before data is converted by element converters to update observables.`}</p>\n    <p>{`When accessing data provided into the above functions, `}<strong parentName=\"p\">{`you should`}</strong>{` use the `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`set`}</inlineCode>{` utility functions from `}<inlineCode parentName=\"p\">{`Magento_PageBuilder/js/utils/object`}</inlineCode>{`. These functions ensure that you can use dot notation to correctly retrieval and set that data mapping entries that traverse deeper into the data set.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`: Mass converter that defaults mobile image value to desktop image value if not configured.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<converters>\n    <converter name=\"empty_mobile_image\" component=\"Magento_PageBuilder/js/mass-converter/empty-mobile-image\">\n        <config>\n            <item name=\"desktop_image_variable\" value=\"background_image\"/>\n            <item name=\"mobile_image_variable\" value=\"mobile_image\"/>\n        </config>\n    </converter>\n</converters>\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`define([\"Magento_PageBuilder/js/utils/object\"], function (objectUtil) {\n    var EmptyMobileImage = function () {};\n\n    /**\n     * Process data after it's read and converted by element converters\n     *\n     * @param {object} data\n     * @param {object} config\n     * @returns {object}\n     */\n    EmptyMobileImage.prototype.fromDom = function fromDom(data, config) {\n        var desktopImage = objectUtil.get(data, config.desktop_image_variable);\n        var mobileImage = objectUtil.get(data, config.mobile_image_variable);\n\n        if (mobileImage && desktopImage && mobileImage[0] !== undefined && desktopImage[0] !== undefined && mobileImage[0].url === desktopImage[0].url) {\n            delete data[config.mobile_image_variable];\n        }\n\n        return data;\n    };\n\n    /**\n     * Process data before it's converted by element converters\n     *\n     * @param {object} data\n     * @param {object} config\n     * @returns {object}\n     */\n    EmptyMobileImage.prototype.toDom = function toDom(data, config) {\n        var mobileImage = objectUtil.get(data, config.mobile_image_variable);\n\n        if (mobileImage === undefined || mobileImage[0] === undefined) {\n            objectUtil.set(data, config.mobile_image_variable, objectUtil.get(data, config.desktop_image_variable));\n        }\n\n        return data;\n    };\n\n    return EmptyMobileImage;\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"preview-component-settings\"\n    }}>{`Preview component settings`}</h2>\n    <p>{`When creating your preview component there are some additional settings you can configure to inform the internal framework how to handle aspects of your data.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Example`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fieldsToIgnoreOnRemove`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`An array containing field names to ignore when evaluating whether an element has been configured. This is utilised when deciding whether to display the confirmation on removal of a content type. The default value is an empty array.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`[\"tab_name\"]`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"menu-sections\"\n    }}>{`Menu Sections`}</h2>\n    <p>{`The different sections displayed in the left menu are configured with the `}<inlineCode parentName=\"p\">{`menu_section.xml`}</inlineCode>{` configuration. This configuration allows you to configure new menu sections along with modifying existing ones.`}</p>\n    <p>{`Your configuration should conform to our XSD: `}<inlineCode parentName=\"p\">{`urn:magento:module:Magento_PageBuilder:etc/menu_section.xsd`}</inlineCode>{`. This article will go into more details regarding the configuration you can include within a content type.`}</p>\n    <p>{`We discourage modifying existing menu sections if they do not belong to your module.`}</p>\n    <h3 {...{\n      \"id\": \"menu_section-element\"\n    }}><inlineCode parentName=\"h3\">{`menu_section`}</inlineCode>{` element`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`name`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The internal name for this menu section, will be used by content types to reference your section.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`translate`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Determine which aspects of the menu section should be translated.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`sortOrder`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The sort order in relation to other menu sections, within our configuration we step these 10 integers apart to allow for new sections to be added in between.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`label`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The label to be displayed within the left menu`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`An example of a menu-section configuration can be found here: `}<inlineCode parentName=\"p\">{`view/adminhtml/pagebuilder/menu_section.xml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_PageBuilder:etc/menu_section.xsd\">\n    <menu_section name=\"layout\" translate=\"label\" sortOrder=\"1\" label=\"Layout\"/>\n</config>\n`}</code></pre>\n    <p>{`For more information on how to customize the menu sections and the left panel please see: `}<a parentName=\"p\" {...{\n        \"href\": \"../content-types/customize/configure-panel.md\"\n      }}>{`Customize the panel`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}