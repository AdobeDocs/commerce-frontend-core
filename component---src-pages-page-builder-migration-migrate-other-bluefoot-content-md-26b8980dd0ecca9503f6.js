"use strict";(self.webpackChunkcommerce_frontend_core=self.webpackChunkcommerce_frontend_core||[]).push([[7604],{77286:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return m},default:function(){return s}});var a=n(87462),o=n(45987),r=(n(35776),n(3905)),i=n(91515);const l=["components"],m={},d=(u="InlineAlert",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)});var u;const p={_frontmatter:m},c=i.Z;function s(e){let{components:t}=e,n=(0,o.Z)(e,l);return(0,r.mdx)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"migrate-other-bluefoot-content"},"Migrate other BlueFoot content"),(0,r.mdx)("p",null,"By default, the migration module only migrates content from these tables of the Commerce database:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"CMS Pages")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"CMS Blocks")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"Catalog Product Attributes")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"Catalog Category Attributes"))),(0,r.mdx)("p",null,"If you have BlueFoot content in other tables, you must complete the following steps to migrate that content."),(0,r.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.mdx)("p",null,"This topic assumes you have a functioning Magento 2 module. If not, create a basic skeleton module now and verify that Commerce loads the module during ",(0,r.mdx)("inlineCode",{parentName:"p"},"setup:upgrade"),"."),(0,r.mdx)("h2",{id:"steps-for-migrating-other-content"},"Steps for migrating other content"),(0,r.mdx)("p",null,"Here are the basic steps for migrating BlueFoot content from other database tables:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Add the following directory structure within your module: ",(0,r.mdx)("inlineCode",{parentName:"p"},"Setup/Patch/Data"),".")),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Create a ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/commerce/php/development/components/declarative-schema/patches/"},"data patch class")," for your migration. Example: ",(0,r.mdx)("inlineCode",{parentName:"p"},"MigrateBlogToPageBuilder.php"),". Commerce executes this class when installing your module.")),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Implement the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Magento\\Framework\\Setup\\Patch\\DataPatchInterface"),".")),(0,r.mdx)("li",{parentName:"ol"},(0,r.mdx)("p",{parentName:"li"},"Define your migration logic within the ",(0,r.mdx)("inlineCode",{parentName:"p"},"apply()")," function."))),(0,r.mdx)("h2",{id:"data-patch-class-example"},"Data patch class example"),(0,r.mdx)("p",null,"The following example shows how you might migrate blog content created with BlueFoot:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-php"},"<?php\ndeclare(strict_types=1);\n\nnamespace VendorName\\Blog\\Setup\\Patch\\Data;\n\nuse Magento\\Framework\\Setup\\Patch\\DataPatchInterface;\nuse Magento\\Framework\\Setup\\ModuleDataSetupInterface;\nuse Magento\\Framework\\DB\\AggregatedFieldDataConverter;\nuse Magento\\Framework\\DB\\Select\\QueryModifierFactory;\nuse Magento\\Framework\\DB\\FieldToConvert;\nuse Magento\\PageBuilderDataMigration\\Setup\\DataConverter\\Format;\nuse Magento\\PageBuilderDataMigration\\Setup\\DataConverter\\BlueFootToPageBuilder;\n\nclass MigrateToBlogPageBuilder implements DataPatchInterface\n{\n    /**\n     * @var ModuleDataSetupInterface\n     */\n    private $moduleDataSetup;\n\n    /**\n     * @var AggregatedFieldDataConverter\n     */\n    private $aggregatedFieldConverter;\n\n    /**\n     * @var QueryModifierFactory\n     */\n    private $queryModifierFactory;\n\n    /**\n     * @param ModuleDataSetupInterface $moduleDataSetup\n     * @param AggregatedFieldDataConverter $aggregatedFieldConverter\n     * @param QueryModifierFactory $queryModifierFactory\n     */\n    public function __construct(\n        ModuleDataSetupInterface $moduleDataSetup,\n        AggregatedFieldDataConverter $aggregatedFieldConverter,\n        QueryModifierFactory $queryModifierFactory\n    ) {\n        $this->moduleDataSetup = $moduleDataSetup;\n        $this->aggregatedFieldConverter = $aggregatedFieldConverter;\n        $this->queryModifierFactory = $queryModifierFactory;\n    }\n\n    /**\n     * @return DataPatchInterface|void\n     * @throws \\Magento\\Framework\\DB\\FieldDataConversionException\n     */\n    public function apply()\n    {\n        $this->aggregatedFieldConverter->convert(\n            [\n                new FieldToConvert(\n                    BlueFootToPageBuilder::class,\n                    $this->moduleDataSetup->getTable('blog'),\n                    'blog_id',\n                    'content',\n                    $this->queryModifierFactory->create(\n                        'like',\n                        [\n                            'values' => [\n                                'content' => '%' . Format::BLUEFOOT_KEY . '%'\n                            ]\n                        ]\n                    )\n                ),\n            ],\n            $this->moduleDataSetup->getConnection()\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public function getAliases()\n    {\n        return [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public static function getDependencies()\n    {\n        return [];\n    }\n}\n")),(0,r.mdx)("p",null,"The key part of this implementation is the logic within the ",(0,r.mdx)("inlineCode",{parentName:"p"},"apply()")," function. The function uses the ",(0,r.mdx)("inlineCode",{parentName:"p"},"aggregatedFieldConverter")," to iterate over each ",(0,r.mdx)("inlineCode",{parentName:"p"},"blog")," table row. For each row, we run the ",(0,r.mdx)("inlineCode",{parentName:"p"},"BlueFootToPageBuilder")," data converter. And we optimize it by using a query modifier to retrieve only the BlueFoot content:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-php"},"$this->aggregatedFieldConverter->convert(\n    [\n        new FieldToConvert(\n            BlueFootToPageBuilder::class,\n            $this->moduleDataSetup->getTable('blog'),\n            'blog_id',\n            'content',\n            $this->queryModifierFactory->create(\n                'like',\n                [\n                    'values' => [\n                        'content' => '%' . Format::BLUEFOOT_KEY . '%'\n                    ]\n                ]\n            )\n        ),\n    ],\n    $this->moduleDataSetup->getConnection()\n);\n")),(0,r.mdx)("h2",{id:"run-your-migration-module"},"Run your migration module"),(0,r.mdx)(d,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"The above changes will not run when using ",(0,r.mdx)("inlineCode",{parentName:"p"},"bin/magento pagebuilder:migrate"),". That command only runs for the default areas mentioned at the start of this topic. If you want to run your setup patch using a similar command, you need to create a console command for your module. Otherwise, you can use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"setup:upgrade")," command as follows."),(0,r.mdx)("p",null,"You can now run the ",(0,r.mdx)("inlineCode",{parentName:"p"},"setup:upgrade")," command to migrate your other BlueFoot content:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"bin/magento setup:upgrade\n")),(0,r.mdx)("p",null,"That's it. Use this same pattern to migrate BlueFoot content from other tables."))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-page-builder-migration-migrate-other-bluefoot-content-md-26b8980dd0ecca9503f6.js.map