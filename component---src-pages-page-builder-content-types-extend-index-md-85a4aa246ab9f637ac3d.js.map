{"version":3,"file":"component---src-pages-page-builder-content-types-extend-index-md-85a4aa246ab9f637ac3d.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/content-types/extend/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"introduction-to-extending-content-types\"\n    }}>{`Introduction to extending content types`}</h1>\n    <p>{`Extending Page Builder's native content types is often the best way to satisfy your end users when they request changes.`}</p>\n    <p>{`Page Builder gives end users several content styling options from the default form editors. But what if your end users want to create a Banner with a different layout? Or maybe they want to change or add content properties that don't have a form field. These are the use cases that beg you to extend an existing content type, rather than create a new one.`}</p>\n    <p>{`All content types provide end users with at least one layout that has properties end users can set. In Page Builder, we call these layouts `}<em parentName=\"p\">{`appearances`}</em>{`. When we extend content types, we're talking about changing or adding appearances to the content type. Making sense of appearances is essential to extending content types.`}</p>\n    <h2 {...{\n      \"id\": \"understanding-appearances\"\n    }}>{`Understanding appearances`}</h2>\n    <p>{`An `}<strong parentName=\"p\">{`appearance`}</strong>{` defines the layout and styles for a content type. Every content type has at least one appearance. Content types like the Banner have four appearances to choose from. All content types define their appearances in their configuration files. For example, Banners, Products, and Columns define all their configurations, including appearances, in `}<inlineCode parentName=\"p\">{`banner.xml`}</inlineCode>{`, products.xml, and column.xml, respectively.`}</p>\n    <p>{`To help you understand the kind of changes you can make to appearances, we'll look at a few nodes from the Banner's `}<inlineCode parentName=\"p\">{`collage-left`}</inlineCode>{` appearance from the `}<inlineCode parentName=\"p\">{`banner.xml`}</inlineCode>{` file. The following XML fragment is a condensed version of this appearance, so we can focus on what's important.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<appearances>\n    <appearance name=\"collage-left\"\n                preview_template=\"Magento_PageBuilder/content-type/banner/collage-left/preview\"\n                master_template=\"Magento_PageBuilder/content-type/banner/collage-left/master\"\n                reader=\"Magento_PageBuilder/js/master-format/read/configurable\">\n        <elements>\n            <element name=\"wrapper\">\n                <style name=\"text_align\" source=\"text_align\"/>\n                <attribute name=\"background_type\" source=\"data-background-type\"/>\n                <css name=\"css_classes\"/>\n            </element>\n            <element name=\"content\">\n                <html name=\"message\" preview_converter=\"Magento_PageBuilder/js/converter/html/directive\"/>\n            </element>\n        </elements>\n    </appearance>\n</appearances>\n`}</code></pre>\n    <p>{`Even in a condensed form, appearance configurations can be confusing. A quick summary of these nodes may help:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`appearance`}</inlineCode>{` — identifies an appearance configuration (by name) that all the HTML templates and nodes help define.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`preview_template`}</inlineCode>{` — path to the HTML template (`}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{`) used to display the appearance in the Admin.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`master_template`}</inlineCode>{` — path to the HTML template (`}<inlineCode parentName=\"p\">{`master.html`}</inlineCode>{`) used to display the appearance on the storefront.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`element`}</inlineCode>{` — node type bound to an HTML element in the `}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`master.html`}</inlineCode>{` templates. The `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` node provides its bound template element with the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`attribute`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` values from the form fields.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`style`}</inlineCode>{` — for adding CSS properties (like `}<inlineCode parentName=\"p\">{`text-align`}</inlineCode>{`) to the element. The `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` node is bound to a form field of the same name.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`attribute`}</inlineCode>{` — for adding custom properties (like `}<inlineCode parentName=\"p\">{`background_type`}</inlineCode>{`) to the element. The `}<inlineCode parentName=\"p\">{`attribute`}</inlineCode>{` node is bound to a form field of the same name.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`css`}</inlineCode>{` — for adding CSS classes to the element. The `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` node is bound to a form field of the same name.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`html`}</inlineCode>{` — for allowing HTML content in the element. The `}<inlineCode parentName=\"p\">{`html`}</inlineCode>{` node is bound to a form field of the same name. The field's `}<inlineCode parentName=\"p\">{`formElement`}</inlineCode>{` type is either `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`wysiwyg`}</inlineCode>{`.`}</p>\n      </li>\n    </ul>\n    <p>{`When you understand how Page Builder uses these appearance nodes, it becomes much easier to recognize the nodes that define layouts vs. the ones that define styles. These node groups are defined next.`}</p>\n    <h3 {...{\n      \"id\": \"appearance-layout-nodes\"\n    }}>{`Appearance layout nodes`}</h3>\n    <p>{`The layout for an appearance comes from the arrangement of HTML tags (`}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<a>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<button>`}</inlineCode>{`) in the templates. So if you need to change the layout, you start by changing the appearance templates:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`preview_template`}</inlineCode>{` — (`}<inlineCode parentName=\"p\">{`collage-left/preview.html`}</inlineCode>{`) for changing the appearance's layout in the Admin.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`master_template`}</inlineCode>{` — (`}<inlineCode parentName=\"p\">{`collage-left/master.html`}</inlineCode>{`) for changing the appearance's layout on the storefront.`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"appearance-style-nodes\"\n    }}>{`Appearance style nodes`}</h3>\n    <p>{`The styles and properties for an appearance come from all the sub-nodes of a given `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{`. So if you need to change or add styles and properties to existing layouts, you start by changing and adding `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`attribute`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`html`}</inlineCode>{` nodes to an existing `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` node:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`element`}</inlineCode>{` — for identifying the HTML element (in the templates) that you want to change using the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`attribute`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` nodes.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`style`}</inlineCode>{` — for changing or adding a CSS property (like `}<inlineCode parentName=\"p\">{`text-align`}</inlineCode>{`) to an element.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`attribute`}</inlineCode>{` — for changing or adding a custom property (like `}<inlineCode parentName=\"p\">{`background_type`}</inlineCode>{`) to an element.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`css`}</inlineCode>{` — for changing or adding CSS classes to an element.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`html`}</inlineCode>{` - for allowing HTML content in the element.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next steps`}</h2>\n    <p>{`Now that you know about appearances, take the next steps by walking through one or both of these tutorials. We highly recommend you start with the first one, Extend an appearance:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"extend-appearances.md\"\n          }}>{`Extend an appearance`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"extend-more-appearances.md\"\n          }}>{`Extend another appearance`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"add-appearances.md\"\n          }}>{`Add an appearance`}</a>{`.`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}