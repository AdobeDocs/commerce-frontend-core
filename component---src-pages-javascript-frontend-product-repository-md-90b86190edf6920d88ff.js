"use strict";(self.webpackChunkcommerce_frontend_core=self.webpackChunkcommerce_frontend_core||[]).push([[5078],{23146:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return s},default:function(){return c}});var a=n(87462),r=n(45987),o=(n(35776),n(3905)),i=n(91515);const d=["components"],s={},m={_frontmatter:s},p=i.Z;function c(e){let{components:t}=e,n=(0,r.Z)(e,d);return(0,o.mdx)(p,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"frontend-product-repository"},"Frontend product repository"),(0,o.mdx)("p",null,"The frontend product repository is a storage service that uses the local cache to get product information without making additional requests to the server.\nThe product information it provides is useful for optimal mini-cart, widgets, and checkout customizations."),(0,o.mdx)("p",null,"This article contains code samples for common tasks when working with the frontend product repository."),(0,o.mdx)("h2",{id:"product-data-storage"},"Product data storage"),(0,o.mdx)("p",null,"The frontend product repository uses the ",(0,o.mdx)("inlineCode",{parentName:"p"},"product_data_storage")," section of the data storage cache as its data source.\nThis section is responsible for holding all product data that come from the server when a customer visits a product page."),(0,o.mdx)("h2",{id:"instantiate-the-repository"},"Instantiate the repository"),(0,o.mdx)("p",null,"The following code snippet uses the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/view/frontend/web/js/product/storage/storage-service.js"},(0,o.mdx)("inlineCode",{parentName:"a"},"Magento_Catalog/js/product/storage/storage-service"))," to initialize the repository when the data storage cache itself initializes:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},"define([\n    'Magento_Catalog/js/product/storage/storage-service'\n]), function(storage){\n    'use strict';\n\n    return {\n\n        ...\n\n        identifiersConfig: {\n            namespace: 'product_data_storage'\n        },\n\n        productStorageConfig: {\n            namespace: 'product_data_storage',\n            customerDataProvider: 'product_data_storage',\n            className: 'DataStorage'\n        },\n\n        initIdsStorage: function(){\n            storage.onStorageInit(this.identifiersConfig.namespace, this.idsStorageHandler.bind(this));\n            return this;\n        },\n\n        idsStorageHandler: function(idsStorage){\n            this.productStorage = storage.createStorage(this.productStorageConfig);\n        },\n\n        ...\n\n    }\n\n}\n")),(0,o.mdx)("h2",{id:"use-the-repository"},"Use the repository"),(0,o.mdx)("p",null,"Subscribe a callback function to the product repository data to work with the cached data from recent server requests."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},"\n...\n\nidsStorageHandler: function(idsStorage){\n    this.productStorage = storage.createStorage(this.productStorageConfig);\n    this.productStorage.data.subscribe(this.dataCollectionHandler.bind(this));\n},\n\ndataCollectionHandler: function(data){\n    //Code to handle the data\n},\n\n...\n\n")),(0,o.mdx)("h2",{id:"get-data-from-the-server"},"Get data from the server"),(0,o.mdx)("p",null,"Use the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/view/frontend/web/js/product/storage/data-storage.js#L213"},(0,o.mdx)("inlineCode",{parentName:"a"},"loadDataFromServer"))," method from the ",(0,o.mdx)("inlineCode",{parentName:"p"},"data-storage")," class to get product data from a list of IDs."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},"\n...\n\nidsStorageHandler: function(idsStorage, currency, storeId){\n    this.productStorage = storage.createStorage(this.productStorageConfig);\n    this.productStorage.data.subscribe(this.dataCollectionHandler.bind(this));\n    this.productStorage.loadDataFromServer(currency, storeId, idsStorage.get());\n},\n\n...\n\n")),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null},"Parameter"),(0,o.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("inlineCode",{parentName:"td"},"currency")),(0,o.mdx)("td",{parentName:"tr",align:null},"The currency data to get for the product")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("inlineCode",{parentName:"td"},"store")),(0,o.mdx)("td",{parentName:"tr",align:null},"The ID of the store associated with the product")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("inlineCode",{parentName:"td"},"ids")),(0,o.mdx)("td",{parentName:"tr",align:null},"An object that contains the list of IDs as keys")))),(0,o.mdx)("p",null,"In the preceding example the data is handled by the subscribed function ",(0,o.mdx)("inlineCode",{parentName:"p"},"dataCollectionHandler"),"."),(0,o.mdx)("h3",{id:"specify-rest-resource"},"Specify REST resource"),(0,o.mdx)("p",null,"Use the following REST endpoint to get product information:"),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"/V1/products-render-info")),(0,o.mdx)("p",null,"For UI Components, add this information in the ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/commerce/frontend-core/ui-components/concepts/data-source/"},(0,o.mdx)("inlineCode",{parentName:"a"},"dataProvider"))," entry inside your ",(0,o.mdx)("inlineCode",{parentName:"p"},"etc/view/frontend/ui_component/<ui-component-name>.xml")," file."),(0,o.mdx)("p",null,"The following example is from the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/view/frontend/ui_component/widget_recently_viewed.xml"},"recently-viewed widget"),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-xml"},'\n<argument name="dataProvider" xsi:type="configurableObject">\n    <argument name="data" xsi:type="array">\n        <item name="config" xsi:type="array">\n            <item name="productStorageConfig" xsi:type="array">\n                <item name="namespace" xsi:type="string">product_data_storage</item>\n                <item name="className" xsi:type="string">DataStorage</item>\n                <item name="updateRequestConfig" xsi:type="array">\n                    <item name="url" xsi:type="serviceUrl" path="/products-render-info"/>\n                </item>\n            </item>\n            <item name="identifiersConfig" xsi:type="array">\n              <item name="namespace" xsi:type="string">recently_viewed_product</item>\n            </item>\n        </item>\n    </argument>\n</argument>\n\n')),(0,o.mdx)("p",null,"This sets the appropriate information inside the ",(0,o.mdx)("inlineCode",{parentName:"p"},"updateRequestConfig")," object in the product storage configuration(",(0,o.mdx)("inlineCode",{parentName:"p"},"productStorageConfig")," in the example code)."),(0,o.mdx)("p",null,"The object structure for this REST response is represented by ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/Api/Data/ProductRenderInterface.php"},(0,o.mdx)("inlineCode",{parentName:"a"},"\\Magento\\Catalog\\Api\\Data\\ProductRenderInterface")),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-javascript"},"[\n   item_id: {\n        //@see: \\Magento\\Catalog\\Api\\Data\\ProductRender\\ButtonInterface\n        'add_to_*_button': { //Any product button will be represented by this interface\n            post_data: {...},\n            required_options: boolean,\n            url: string\n        },\n        //\\Magento\\Catalog\\Api\\Data\\ProductRenderExtensionInterface\n        'extension_attributes': {\n            'review_html': '...'\n        },\n        //@see: \\Magento\\Catalog\\Api\\Data\\ProductRender\\ImageInterface[]\n        'images': [\n            {\n                'url': '...',\n                'code': '...',\n                'height': ...,\n                'width': ...,\n                'resized_height': ...,\n                ...\n            }\n        ],\n        'is_salable': boolean,\n        'name': '...',\n        //@see: \\Magento\\Catalog\\Api\\Data\\ProductRender\\PriceInfoInterface\n        'price_info': {\n            //@see \\Magento\\Catalog\\Api\\Data\\ProductRender\\FormattedPriceInfoInterface\n            //All prices are kind of html with currency symbol and rounding rules\n            'formatted_prices': {\n                'final_price': ...,\n                'max_price': ...,\n                'max_regular_price': ...,\n                'minimal_regular_price': ...,\n                ...\n            },\n            'final_price': ...,\n            'max_price': ...,\n            'max_regular_price': ...,\n            'minimal_regular_price': ...,\n            ...\n        },\n        'url': '...',\n        'type': '...', //enum: configurable, simple, virtual, etc\n        'currency_code': '...', //e.g. USD\n        'store_id': ... //integer\n   }\n]\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-javascript-frontend-product-repository-md-90b86190edf6920d88ff.js.map