{"version":3,"file":"component---src-pages-page-builder-content-types-customize-render-server-side-preview-md-10cd2931d5c8d6d10f22.js","mappings":"uSAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,+BACH,gCACL,kBAAK,wCAAsC,uBAAYC,WAAW,KAAM,cAA2B,+CACnG,kBAAK,kJACL,kBAAK,8GACL,eACE,GAAM,4BACH,8BACL,kBAAK,8DAA4D,uBAAYA,WAAW,KAAM,yDAAsE,MACpK,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,2TAWP,eACE,GAAM,uCACH,yCACL,kBAAK,4DAA0D,uBAAYA,WAAW,KAAM,oDAAiE,0EAAwE,uBAAYA,WAAW,KAAM,UAAuB,WACzR,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,6TAQP,eACE,GAAM,2DACH,6DACL,kBAAK,0GACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,sFAAoF,uBAAYA,WAAW,KAAM,4BAAyC,YAAU,uBAAYA,WAAW,KAAM,iCAA8C,iBAEtQ,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,oKACrB,gBAAKA,WAAW,OAAK,iBAAMA,WAAW,MAClC,UAAa,uBACV,oqCAoCX,eACE,GAAM,6BACH,+BACL,kBAAK,4FACL,kBAAK,8FAA4F,uBAAYA,WAAW,KAAM,2BAAwC,gEACtK,kBAAK,qMAAmM,uBAAYA,WAAW,KAAM,+CAA4D,+BAGpS,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/content-types/customize/render-server-side-preview.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"render-server-side-previews\"\n    }}>{`Render server-side previews`}</h1>\n    <p>{`This topic describes how to use the `}<inlineCode parentName=\"p\">{`RenderPool`}</inlineCode>{` on the stage to render a backend preview.`}</p>\n    <p>{`Using this method, you can preview content types that cannot be rendered on the stage and require further backend processing to be previewed.`}</p>\n    <p>{`The following steps utilize some example values. Substitute those with values specific to your situation.`}</p>\n    <h2 {...{\n      \"id\": \"step-1-create-a-renderer\"\n    }}>{`Step 1: Create a renderer`}</h2>\n    <p>{`Create a renderer that implements the renderer interface, `}<inlineCode parentName=\"p\">{`Magento\\\\PageBuilder\\\\Model\\\\Stage\\\\RendererInterface`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\nnamespace Magento\\\\PageBuilder\\\\Model\\\\Stage\\\\Renderer;\n\nclass AwesomeElement implements \\\\Magento\\\\PageBuilder\\\\Model\\\\Stage\\\\RendererInterface\n{\n    public function render(array $params): array\n    {\n        return ['message' => 'Hello stage! You said ' . $params['message'] . '!'];\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-2-add-the-renderer-to-the-pool\"\n    }}>{`Step 2: Add the renderer to the pool`}</h2>\n    <p>{`Add the renderer you just created as an argument to the `}<inlineCode parentName=\"p\">{`Magento\\\\PageBuilder\\\\Model\\\\Stage\\\\RendererPool`}</inlineCode>{` type that specifies your custom content type role as the name in the `}<inlineCode parentName=\"p\">{`di.xml`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<type name=\"Magento\\\\PageBuilder\\\\Model\\\\Stage\\\\RendererPool\">\n    <arguments>\n        <argument name=\"renderers\" xsi:type=\"array\">\n            <item name=\"awesome-element\" xsi:type=\"object\">Magento\\\\PageBuilder\\\\Model\\\\Stage\\\\Renderer\\\\AwesomeElement</item>\n        </argument>\n    </arguments>\n</type>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"step-3-submit-an-http-request-to-the-preview-controller\"\n    }}>{`Step 3: Submit an HTTP request to the preview controller`}</h2>\n    <p>{`To invoke the renderer from the stage, submit an HTTP request to the Page Builder preview controller:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Obtain the URL for the HTTP request from within your preview component by calling `}<inlineCode parentName=\"p\">{`getConfig(\"preview_url\")`}</inlineCode>{` on the `}<inlineCode parentName=\"p\">{`Magento_PageBuilder/js/config`}</inlineCode>{` component.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Make a request to the aforementioned obtained URL specifying your custom content type name and any additional parameters you want to use to render the element:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{` define([\n     'jquery',\n     'Magento_PageBuilder/js/content-type/preview',\n     'Magento_PageBuilder/js/config'\n ], function ($, Preview, Config) {\n     var AwesomeElement = function() {\n         Preview.apply(this, arguments);\n     };\n\n     AwesomeElement.prototype = Object.create(Preview.prototype);\n     AwesomeElement.prototype.constructor = AwesomeElement;\n\n     AwesomeElement.prototype.afterObservablesUpdated = function() {\n         Preview.prototype.afterObservablesUpdated.call(this);\n         // Get the url to call\n         var url = Config.getConfig(\"preview_url\");\n         const requestConfig = {\n             method: \"POST\",\n             data: {\n                 role: this.config.name, // this would be awesome-element in this case\n                 // You can also pass any other data to the renderer\n                 message: 'custom data'\n             }\n         };\n\n         $.ajax(url, requestConfig).done(function(response) {\n             // Will display: \"Hello stage! You said custom data!\"\n             this.data.main.html(response.data.message);\n         }.bind(this));\n     };\n\n     return AwesomeElement;\n });\n`}</code></pre>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"step-4-render-the-element\"\n    }}>{`Step 4: Render the element`}</h2>\n    <p>{`Your exact configuration and situation determine when, and how, you render the element.`}</p>\n    <p>{`Generally, you would perform this operation when the properties change, by overriding the `}<inlineCode parentName=\"p\">{`afterObservablesUpdated`}</inlineCode>{` method with this logic (as shown in the previous example).`}</p>\n    <p>{`To update the Document Object Model (DOM) to display your content, amend the JavaScript property that represents the HTML variable of your main element with the response from the HTTP request, `}<inlineCode parentName=\"p\">{`this.data.main.html(response.data.message);`}</inlineCode>{` from the previous example.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}