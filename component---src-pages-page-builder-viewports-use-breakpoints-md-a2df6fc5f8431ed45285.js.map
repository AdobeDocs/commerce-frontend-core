{"version":3,"file":"component---src-pages-page-builder-viewports-use-breakpoints-md-a2df6fc5f8431ed45285.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/viewports/use-breakpoints.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-breakpoints-for-widgets\"\n    }}>{`Use breakpoints for widgets`}</h1>\n    <p>{`Using breakpoints in Page Builder involves adding custom data to a breakpoint configuration so that you can use that data to control the responsive behavior of content types from `}<inlineCode parentName=\"p\">{`widgets`}</inlineCode>{`.`}</p>\n    <p>{`The Products `}<inlineCode parentName=\"p\">{`widget.js`}</inlineCode>{` provides a good example of why you might need to do this and how it works. Within the widget, the `}<inlineCode parentName=\"p\">{`min-width`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` strings are passed to a `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3schools.com/jsref/met_win_matchmedia.asp\"\n      }}>{`matchMedia() function`}</a>{`. This method creates a list of media queries created from the `}<inlineCode parentName=\"p\">{`min-width`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` values from all the breakpoints defined in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` file. When the browser width matches one of the query breakpoints, `}<inlineCode parentName=\"p\">{`matchMedia()`}</inlineCode>{` invokes a callback function on the widget. The widget can then respond to the breakpoint by calling functions and changing configurations on other controls like the `}<a parentName=\"p\" {...{\n        \"href\": \"https://kenwheeler.github.io/slick/\"\n      }}>{`slick carousel`}</a>{`.`}</p>\n    <p>{`Let's look closer at how the `}<inlineCode parentName=\"p\">{`Products`}</inlineCode>{` content type uses data from the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` configuration to control the number of products displayed in its carousel component at different breakpoints.`}</p>\n    <p>{`All breakpoints define an `}<inlineCode parentName=\"p\">{`options`}</inlineCode>{` node for `}<inlineCode parentName=\"p\">{`products`}</inlineCode>{` as shown here in the `}<inlineCode parentName=\"p\">{`tablet`}</inlineCode>{` breakpoint:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<var name=\"tablet\">\n    <var name=\"conditions\">\n        <var name=\"max-width\">1024px</var>\n        <var name=\"min-width\">768px</var>\n    </var>\n    <var name=\"options\">\n        <var name=\"products\">\n            <var name=\"default\">\n                <var name=\"slidesToShow\">4</var>\n            </var>\n            <var name=\"continuous\">\n                <var name=\"slidesToShow\">3</var>\n            </var>\n        </var>\n    </var>\n</var>\n`}</code></pre>\n    <p>{`On the frontend, when a breakpoint is active, the Products widget gets the `}<inlineCode parentName=\"p\">{`slidesToShow`}</inlineCode>{` value defined for that breakpoint in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` configuration. The widget then passes that value to its internal carousel to show the number of products defined for the current breakpoint.`}</p>\n    <p>{`Like other content type `}<inlineCode parentName=\"p\">{`widgets`}</inlineCode>{`, the Product's `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{` is loaded on the frontend. However, the Product's `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{` also needs to listen for viewport stage events (`}<inlineCode parentName=\"p\">{`stage:viewportChangeAfter`}</inlineCode>{`) when the `}<inlineCode parentName=\"p\">{`Products`}</inlineCode>{` content type is rendered inside a `}<inlineCode parentName=\"p\">{`Block`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Dynamic Block`}</inlineCode>{` on the stage. In such cases, the `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{` breakpoint functions (called on the frontend) do not work. That's why you see a frontend `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{` defining a backend event handler.`}</p>\n    <p>{`To capture and respond to events on the Admin stage and the frontend, you need to create two types of event handlers:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Frontend event handler using the `}<inlineCode parentName=\"li\">{`matchMedia`}</inlineCode>{` function`}</li>\n      <li parentName=\"ul\">{`Stage event handler for Page Builder's `}<inlineCode parentName=\"li\">{`stage:viewportChangeAfter`}</inlineCode>{` events.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"frontend-event-handler\"\n    }}>{`Frontend event handler`}</h2>\n    <p>{`For the frontend, use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/paulirish/matchMedia.js/\"\n      }}>{`matchMedia`}</a>{` polyfill from `}<inlineCode parentName=\"p\">{`lib/web/matchMedia.js`}</inlineCode>{`. Adobe Commerce uses this polyfill in the Blank and Luma themes as described in `}<a parentName=\"p\" {...{\n        \"href\": \"../../guide/responsive-design/js.md\"\n      }}>{`JavaScript in Commerce responsive design`}</a>{`.`}</p>\n    <p>{`The Products widget uses it as shown in this fragment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`Magento/PageBuilder/view/base/web/js/content-type/products/appearance/carousel/widget.js\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`define([\n    'jquery',\n    'underscore',\n    'matchMedia',\n    'Magento_PageBuilder/js/utils/breakpoints',\n    'Magento_PageBuilder/js/events',\n    'slick'\n], function ($, _, mediaCheck, breakpointsUtils, events) {\n    'use strict';\n    ///\n    return function (config, element) {\n    ///\n        _.each(config.breakpoints, function (breakpoint) {\n            mediaCheck({\n                media: breakpointsUtils.buildMedia(breakpoint.conditions),\n\n                entry: function () {\n                    initSlider($element, slickConfig, breakpoint);\n                }\n            });\n        });\n    ///\n    };\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stage-event-handler\"\n    }}>{`Stage event handler`}</h2>\n    <p>{`For the Admin stage, use the `}<a parentName=\"p\" {...{\n        \"href\": \"../architecture/events.md#stageviewportchangeafter\"\n      }}>{`stage:viewportChangeAfter`}</a>{` event to control responsive changes to your content type from within your `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{`.`}</p>\n    <p>{`As mentioned for the Products `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{`, your `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{` should handle this event for cases where your content type is contained within a Block or Dynamic Block. In these cases, your content type's `}<inlineCode parentName=\"p\">{`widget`}</inlineCode>{` is loaded in the Admin, not your `}<inlineCode parentName=\"p\">{`preview`}</inlineCode>{` component.`}</p>\n    <p>{`The Products content type implements the following event handler in its `}<inlineCode parentName=\"p\">{`widget.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`Magento/PageBuilder/view/base/web/js/content-type/products/appearance/carousel/widget.js\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`events.on('stage:viewportChangeAfter', function (args) {\n    var breakpoint = config.breakpoints[args.viewport];\n    initSlider($element, slickConfig, breakpoint);\n});\n`}</code></pre>\n    <p>{`In both handlers, the event handler uses the breakpoint/viewport name to access the `}<inlineCode parentName=\"p\">{`slidesToShow`}</inlineCode>{` value, then uses that value to re-initialize the `}<inlineCode parentName=\"p\">{`Products`}</inlineCode>{` carousel (the `}<a parentName=\"p\" {...{\n        \"href\": \"https://kenwheeler.github.io/slick/\"\n      }}>{`slick slider`}</a>{`) to show a suitable number of products for the selected viewport width, when displayed on the stage.`}</p>\n    <p>{`Notice how the viewport data in both event handlers is accessed using dot syntax according to the hierarchy defined in the `}<inlineCode parentName=\"p\">{`view.xml`}</inlineCode>{` configuration file. For example, the `}<inlineCode parentName=\"p\">{`preview.ts`}</inlineCode>{` file, data for the local `}<inlineCode parentName=\"p\">{`this.slidesToShow`}</inlineCode>{` property is accessed using the viewport name from `}<inlineCode parentName=\"p\">{`args`}</inlineCode>{`, as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`this.slidesToShow = parseFloat(viewports[args.viewport].options.products.default.slidesToShow);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"summary\"\n    }}>{`Summary`}</h2>\n    <p>{`In Page Builder, breakpoints provide your content type widgets with the custom, breakpoint-specific data they need to control responsive behavior that cannot otherwise be controlled from media queries alone.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}