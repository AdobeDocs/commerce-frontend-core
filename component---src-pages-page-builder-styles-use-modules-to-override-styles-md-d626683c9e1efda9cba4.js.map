{"version":3,"file":"component---src-pages-page-builder-styles-use-modules-to-override-styles-md-d626683c9e1efda9cba4.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/styles/use-modules-to-override-styles.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-modules-to-override-styles\"\n    }}>{`Use Modules to override styles`}</h1>\n    <p>{`When you create a Page Builder module by either extending a Page Builder content type or creating a custom content type, you should override Page Builder's styles from within the module, using the Page Builder selector override pattern: `}<inlineCode parentName=\"p\">{`#html-body`}</inlineCode>{` + `}<inlineCode parentName=\"p\">{`[content-type attribute]`}</inlineCode>{` + `}<inlineCode parentName=\"p\">{`any additional selector`}</inlineCode>{`, as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`#html-body [data-content-type='my-custom'].my-class // Specificity = 120.\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/1f011d700129e17f5f1c4f316749cf94/pagebuilder-style-override-pattern-class.svg\",\n        \"alt\": \"CSS selector override pattern\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"the-great-benefit\"\n    }}>{`The great benefit`}</h2>\n    <p>{`Using this selector pattern consistently in your modules has one great benefit: You can reuse all your module's CSS style selectors in your themes, where you can change style rules to override your modules! That's the way it should work, right? Theme styles should override module styles. But you must use the override pattern consistently within Page Builder, or it won't work.`}</p>\n    <p>{`Adopting this pattern makes it work because Commerce adds theme styles `}<em parentName=\"p\">{`after`}</em>{` module styles in the `}<inlineCode parentName=\"p\">{`styles.css`}</inlineCode>{` outputs. And the browser does the rest. The browser's cascading stylesheet rules apply the `}<em parentName=\"p\">{`last`}</em>{` same-specificity CSS selectors to page content. So your theme style selectors, added last in the stylesheets, will always override the same selectors in your modules.`}</p>\n    <p>{`The cascade effect makes your module styles act as \"default\" styles. And the same selectors in your themes provide the theming overrides.`}</p>\n    <h2 {...{\n      \"id\": \"steps-for-overriding-admin-and-frontend-styles\"\n    }}>{`Steps for overriding Admin and frontend styles`}</h2>\n    <p>{`The steps for overriding Page Builder styles in the Admin and on the storefront are the same. The following diagram shows the numbered steps shared between the development `}<inlineCode parentName=\"p\">{`areas`}</inlineCode>{` and module types.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/0eac25d884a7ffdb02c66a98e6fd28e3/pagebuilder-admin-frontend-module-files.svg\",\n        \"alt\": \"Admin styles in modules\"\n      }}></img></p>\n    <p>{`The steps for overriding styles in your modules are similar to those introduced for `}<a parentName=\"p\" {...{\n        \"href\": \"use-themes-to-override-styles.md\"\n      }}>{`overriding Admin themes`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"step-1-create-adminhtml-and-frontend-directories\"\n    }}>{`Step 1: Create `}<inlineCode parentName=\"h3\">{`adminhtml`}</inlineCode>{` and `}<inlineCode parentName=\"h3\">{`frontend`}</inlineCode>{` directories`}</h3>\n    <p>{`In modules, the only difference between overriding Page Builder Admin styles and storefront styles is the required location of your `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` files. Adding your `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` files to the `}<inlineCode parentName=\"p\">{`adminhtml`}</inlineCode>{` directory overrides Page Builder's matching Admin styles. Adding them to the `}<inlineCode parentName=\"p\">{`frontend`}</inlineCode>{` directory overrides Page Builder's matching storefront styles. All the other guidelines for each `}<inlineCode parentName=\"p\">{`area`}</inlineCode>{` are the same.`}</p>\n    <h3 {...{\n      \"id\": \"step-2-add-content-type-directories\"\n    }}>{`Step 2: Add content type directories`}</h3>\n    <p>{`To help organize your `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` files, we recommend using directory names that match the content-type names you want to override. This keeps you consistent with Page Builder module conventions. For example, in our `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` extension module, we added a `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` directory. And for our custom content type module, we added a `}<inlineCode parentName=\"p\">{`custom-content-type`}</inlineCode>{` directory (assuming that's the name of our custom content type). These subdirectories (including `}<inlineCode parentName=\"p\">{`content-type`}</inlineCode>{`) are not required. They simply help organize your stylesheets as your modules grow.`}</p>\n    <h3 {...{\n      \"id\": \"step-3-add-less-files-and-styles\"\n    }}>{`Step 3: Add `}<inlineCode parentName=\"h3\">{`.less`}</inlineCode>{` files and styles.`}</h3>\n    <p>{`We also recommend naming your `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` files to match the content-type appearances you are overriding. Again, this is the Page Builder convention. Our example modules each have only one appearance called `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{`. So we added a `}<inlineCode parentName=\"p\">{`_default.less`}</inlineCode>{` file to each. However, if we were extending Page Builder's `}<inlineCode parentName=\"p\">{`Row`}</inlineCode>{`, we add three `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` files named after each `}<inlineCode parentName=\"p\">{`Row`}</inlineCode>{` appearance. This naming convention helps you find your overriding styles when you start extending or create content types with multiple appearances.`}</p>\n    <p>{`Here's an example style that uses the CSS selector pattern to override Page Builder's `}<inlineCode parentName=\"p\">{`h1`}</inlineCode>{` heading tags:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// CSS specificity = 111, just enough to override Page Builder's specificity of 111.\n#html-body h1[data-content-type=\"heading\"] {\n    font-size: 40px;\n    line-height: 61px;\n    font-weight: 700;\n    margin-bottom: 0;\n}\n`}</code></pre>\n    <p>{`To ensure this style overrides the `}<inlineCode parentName=\"p\">{`h1`}</inlineCode>{` element of the `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` content type, both within the Admin and on the storefront, you need to add it to the `}<inlineCode parentName=\"p\">{`_default.less`}</inlineCode>{` files in both the `}<inlineCode parentName=\"p\">{`adminhtml`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`frontend`}</inlineCode>{` areas of your module.`}</p>\n    <h3 {...{\n      \"id\": \"step-4-add-_importless-files\"\n    }}>{`Step 4: Add `}<inlineCode parentName=\"h3\">{`_import.less`}</inlineCode>{` files`}</h3>\n    <p>{`As another organizing practice, we recommend adding `}<inlineCode parentName=\"p\">{`_import.less`}</inlineCode>{` files to each content type directory. These files should only contain `}<inlineCode parentName=\"p\">{`@import`}</inlineCode>{` statements for all other `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` files in the directory. When there's only one `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` file in the directory (as with our example), this practice feels like overkill. But it's a good habit to create as your modules become more complex. Using import files like this makes it easy to import all your files into the required `}<inlineCode parentName=\"p\">{`_module.less`}</inlineCode>{` file (Step 5). In our examples, the `}<inlineCode parentName=\"p\">{`_import.less`}</inlineCode>{` file often contains only one import:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`@import '_default.less';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"step-5-add-a-_moduleless-file\"\n    }}>{`Step 5: Add a `}<inlineCode parentName=\"h3\">{`_module.less`}</inlineCode>{` file`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`_module.less`}</inlineCode>{` file is the only `}<strong parentName=\"p\">{`required`}</strong>{` `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` file you need. It must be added directly to the `}<inlineCode parentName=\"p\">{`adminhtml/web/css/source`}</inlineCode>{` directory. Commerce uses this file to add all your Admin styles to the `}<inlineCode parentName=\"p\">{`pub/static/adminhtml`}</inlineCode>{` output, where they will override Page Builder's default content-type styles. As with the `}<inlineCode parentName=\"p\">{`_import.less`}</inlineCode>{` files, it's a best practice to add only `}<inlineCode parentName=\"p\">{`@import`}</inlineCode>{` statements to your `}<inlineCode parentName=\"p\">{`_module.less`}</inlineCode>{` file. Technically, you could put all your CSS directly in `}<inlineCode parentName=\"p\">{`_module.less`}</inlineCode>{`, but that could quickly become a mess. Using best practices, our `}<inlineCode parentName=\"p\">{`_module.less`}</inlineCode>{` files in these examples would look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// Extension module\n@import 'content-type/heading/_import.less';\n\n// Custom module\n@import 'content-type/custom-content-type/_import.less';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"summary\"\n    }}>{`Summary`}</h2>\n    <p>{`The key takeaway is this: Use Page Builder's CSS selector override pattern for all your Page Builder styles. Understand it, memorize it, and put it to use. It is the foundation for successful styling within Page Builder:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`#html-body  +  [content-type attribute]  +  any additional selector\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}