"use strict";(self.webpackChunkcommerce_frontend_core=self.webpackChunkcommerce_frontend_core||[]).push([[1921],{94573:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return l},default:function(){return d}});var t=a(87462),i=a(45987),r=(a(35776),a(3905)),m=a(91515);const o=["components"],l={},s={_frontmatter:l},p=m.Z;function d(e){let{components:n}=e,a=(0,i.Z)(e,o);return(0,r.mdx)(p,(0,t.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"uielement-class"},"uiElement class"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"uiElement")," class is a direct successor of the ",(0,r.mdx)("a",{parentName:"p",href:"class.md"},"uiClass library"),".\nWhen creating a new component, use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"uiElement")," class as a direct parent, if your component will be the last in the components hierarchy chain."),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"uiElement")," source code is ",(0,r.mdx)("inlineCode",{parentName:"p"},"<Magento_Ui_module_dir>/view/base/web/js/lib/core/element/element.js"),", in the Magento Open Source GitHub repository: ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/lib/core/element/element.js"},"app/code/Magento/Ui/view/base/web/js/lib/core/element/element.js"),"."),(0,r.mdx)("h2",{id:"commonly-used-methods"},"Commonly used methods"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"initLinks()")," method implements component communication by using ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Ui/view/base/web/js/lib/core/element/links.js"},(0,r.mdx)("inlineCode",{parentName:"a"},"links.js")),". ",(0,r.mdx)("inlineCode",{parentName:"p"},"initLinks()")," introduces processing of the ",(0,r.mdx)("a",{parentName:"p",href:"linking.md"},(0,r.mdx)("inlineCode",{parentName:"a"},"exports"),", ",(0,r.mdx)("inlineCode",{parentName:"a"},"imports"),", ",(0,r.mdx)("inlineCode",{parentName:"a"},"links")," and ",(0,r.mdx)("inlineCode",{parentName:"a"},"listens")," properties"),".")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"initObservable()")," method allows you to declare observable variables within the same instance."),(0,r.mdx)("p",{parentName:"li"},"Example:"),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"initObservable: function () {\n    this._super();\n\n    this.track('childTemplate')\n    this.observe([\n        '%myVariable1%',\n        '%myVariable2%'\n    ]);\n\n    return this;\n}\n")),(0,r.mdx)("p",{parentName:"li"},"where:"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"the ",(0,r.mdx)("inlineCode",{parentName:"p"},"observe()")," method is a wrapper for the ",(0,r.mdx)("inlineCode",{parentName:"p"},"ko.observable()")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"ko.observableArray()")," methods. It converts the properties of the current method into the observable properties. ",(0,r.mdx)("inlineCode",{parentName:"p"},"observe([{Boolean} isTracked,] {String|Array|Object} listOfProperties)"),":"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"isTracked")," - ",(0,r.mdx)("inlineCode",{parentName:"li"},"{Boolean}"),", optional, - defines access usage: whether to use observable properties (",(0,r.mdx)("inlineCode",{parentName:"li"},"isTracked = false"),") or property accessors (",(0,r.mdx)("inlineCode",{parentName:"li"},"isTracked = true"),")."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"listOfProperties")," - ",(0,r.mdx)("inlineCode",{parentName:"li"},"{String}")," is treated as space-separated list of properties' names. Initial values will be used from current instance (when corresponding property exist)."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"listOfProperties")," - ",(0,r.mdx)("inlineCode",{parentName:"li"},"{Array}")," a list of properties' names. Initial values will be used from current instance (when corresponding property exist)."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"listOfProperties")," - ",(0,r.mdx)("inlineCode",{parentName:"li"},"{Object}")," a list of properties' names. Initial values will be used from this object."))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"the ",(0,r.mdx)("inlineCode",{parentName:"p"},"track(listOfProperties)")," method is equal to ",(0,r.mdx)("inlineCode",{parentName:"p"},"observe(true, listOfProperties)"),"."),(0,r.mdx)("p",{parentName:"li"},"The main difference between ",(0,r.mdx)("inlineCode",{parentName:"p"},"observe()")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"track()")," is that ",(0,r.mdx)("inlineCode",{parentName:"p"},"observe()")," is mainly used without first boolean argument. So it really converts properties to observable functions. It changes how property can be accessed. Otherwise ",(0,r.mdx)("inlineCode",{parentName:"p"},"track()")," uses property accessors. So property access remains the same."),(0,r.mdx)("p",{parentName:"li"},"Example:"),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"this.observable = 1;\nthis.observe('observable');\n\nthis.observable(2); // setter\nthis.observable();  // getter\n\nthis.trackable = 1;\nthis.track('trackable');\n\nthis.trackable = 2; // setter\nthis.trackable;     // getter\n"))))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"initModules()")," method initializes external UI components' instances and links them to local variables. This method works with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"modules")," section of the configuration, where we define the name of the external instance and the local variable. The ",(0,r.mdx)("inlineCode",{parentName:"p"},"modules")," section is an object where each key is the variable's name and each value is the instance's name. A developer does not need to be concerned with the instantiation of the module (external instance), because the ",(0,r.mdx)("inlineCode",{parentName:"p"},"initModules()")," method will resolve the variable when the instance is instantiated."),(0,r.mdx)("p",{parentName:"li"},"Example:"),(0,r.mdx)("pre",{parentName:"li"},(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"// Config, where the `modules` property is declared\ndefaults: {\n    modules: {\n        '%myProperty%': '%linkToTheComponent%'\n    }\n}\n"))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"getTemplate()")," method returns a file path to UI component's template.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"hasTemplate()")," method verifies that the ",(0,r.mdx)("inlineCode",{parentName:"p"},"template")," property was specified in the instance configuration."))))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-ui-components-concepts-element-md-a135ef86cb8daa73fc76.js.map