{"version":3,"file":"component---src-pages-page-builder-content-types-extend-extend-appearances-md-58dd41a4d06e3e4d5671.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/content-types/extend/extend-appearances.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"extend-an-appearance\"\n    }}>{`Extend an appearance`}</h1>\n    <p>{`In this topic, you will learn how to add a new user-defined property to an existing content type. Specifically, we will add a `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{` property to all the Banner appearances. Why? Because our customers told us to, drill sergeant. `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=U6VPEcj77v8\",\n        \"title\": \"What's That Movie?\"\n      }}>{`(WTM?)`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Scenario:`}</strong>{` Your customers use Banners to feature products on their site. However, they don't like the fact that the Banner's height grows with the content they enter. So they want you to add a `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{` field to all the Banner appearances. That way they can limit all their banners to the same height, and have their extra content scroll as needed.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"34.375%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/edba2f8b17fd3a086461da0f38d04a6b/5530d/extend-banner-menu.webp 320w\", \"/commerce-frontend-core/static/edba2f8b17fd3a086461da0f38d04a6b/0c8fb/extend-banner-menu.webp 640w\", \"/commerce-frontend-core/static/edba2f8b17fd3a086461da0f38d04a6b/94b1e/extend-banner-menu.webp 1280w\", \"/commerce-frontend-core/static/edba2f8b17fd3a086461da0f38d04a6b/5839c/extend-banner-menu.webp 1630w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/edba2f8b17fd3a086461da0f38d04a6b/dd4a7/extend-banner-menu.png 320w\", \"/commerce-frontend-core/static/edba2f8b17fd3a086461da0f38d04a6b/0f09e/extend-banner-menu.png 640w\", \"/commerce-frontend-core/static/edba2f8b17fd3a086461da0f38d04a6b/bbbf7/extend-banner-menu.png 1280w\", \"/commerce-frontend-core/static/edba2f8b17fd3a086461da0f38d04a6b/b9339/extend-banner-menu.png 1630w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-frontend-core/static/edba2f8b17fd3a086461da0f38d04a6b/bbbf7/extend-banner-menu.png\",\n            \"alt\": \"Page Builder Banner menu item\",\n            \"title\": \"Page Builder Banner menu item\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"steps-to-extend-appearances\"\n    }}>{`Steps to extend appearances`}</h2>\n    <p>{`These steps describe the basic process for adding new style properties to existing content type appearances:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#step-1-create-a-page-builder-extension-module\"\n          }}>{`Create a Page Builder extension module`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#step-2-add-new-properties-to-elements\"\n          }}>{`Add your properties to elements`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#step-3-add-your-property-fields-to-the-form\"\n          }}>{`Add your property fields to the form`}</a>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#step-4-add-static-styles\"\n          }}>{`Add static styles`}</a>{` (as needed).`}</p>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"step-1-create-a-page-builder-extension-module\"\n    }}>{`Step 1: Create a Page Builder extension module`}</h3>\n    <p>{`Use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/commerce-docs/pbmodules\"\n      }}>{`PB Modules CLI`}</a>{` to create the starting directory structure and files for a Banner extension. Instructions for using PB Modules can be found in the repo `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/commerce-docs/pbmodules#pb-modules\"\n      }}><inlineCode parentName=\"a\">{`README.md`}</inlineCode></a>{` file.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Navigate to your `}<inlineCode parentName=\"p\">{`<magento-instance-root>/app/code/`}</inlineCode>{` directory and run the following command:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-terminal\"\n          }}>{`npx https://github.com/commerce-docs/pbmodules.git\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Extend the `}<inlineCode parentName=\"p\">{`Banner`}</inlineCode>{` and complete the remaining prompts. When finished, you should have a complete directory structure and all the files you need (plus extras) to start extending the Banner.`}</p>\n        <p parentName=\"li\"><span parentName=\"p\" {...{\n            \"className\": \"gatsby-resp-image-wrapper\",\n            \"style\": {\n              \"position\": \"relative\",\n              \"display\": \"block\",\n              \"marginLeft\": \"auto\",\n              \"marginRight\": \"auto\",\n              \"maxWidth\": \"1280px\"\n            }\n          }}>{`\n      `}<span parentName=\"span\" {...{\n              \"className\": \"gatsby-resp-image-background-image\",\n              \"style\": {\n                \"paddingBottom\": \"54.6875%\",\n                \"position\": \"relative\",\n                \"bottom\": \"0\",\n                \"left\": \"0\",\n                \"display\": \"block\",\n                \"transition\": \"opacity 0.5s 0.5s\",\n                \"pointerEvents\": \"none\"\n              }\n            }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                \"srcSet\": [\"/commerce-frontend-core/static/005835a1937100679903eb0a528300a7/5530d/pbmodules.webp 320w\", \"/commerce-frontend-core/static/005835a1937100679903eb0a528300a7/0c8fb/pbmodules.webp 640w\", \"/commerce-frontend-core/static/005835a1937100679903eb0a528300a7/94b1e/pbmodules.webp 1280w\", \"/commerce-frontend-core/static/005835a1937100679903eb0a528300a7/61637/pbmodules.webp 1708w\"],\n                \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                \"type\": \"image/webp\"\n              }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                \"srcSet\": [\"/commerce-frontend-core/static/005835a1937100679903eb0a528300a7/dd4a7/pbmodules.png 320w\", \"/commerce-frontend-core/static/005835a1937100679903eb0a528300a7/0f09e/pbmodules.png 640w\", \"/commerce-frontend-core/static/005835a1937100679903eb0a528300a7/bbbf7/pbmodules.png 1280w\", \"/commerce-frontend-core/static/005835a1937100679903eb0a528300a7/9c796/pbmodules.png 1708w\"],\n                \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                \"type\": \"image/png\"\n              }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                \"className\": \"gatsby-resp-image-image\",\n                \"src\": \"/commerce-frontend-core/static/005835a1937100679903eb0a528300a7/bbbf7/pbmodules.png\",\n                \"alt\": \"PB Modules\",\n                \"title\": \"PB Modules\",\n                \"loading\": \"lazy\",\n                \"style\": {\n                  \"width\": \"100%\",\n                  \"height\": \"100%\",\n                  \"margin\": \"0\",\n                  \"verticalAlign\": \"middle\",\n                  \"position\": \"absolute\",\n                  \"opacity\": \"0\",\n                  \"transition\": \"opacity 0.5s\",\n                  \"color\": \"inherit\",\n                  \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                  \"top\": \"0\",\n                  \"left\": \"0\"\n                }\n              }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Before continuing, run `}<inlineCode parentName=\"p\">{`bin/magento setup:upgrade`}</inlineCode>{` to install and enable your module.`}</p>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"step-2-add-new-properties-to-elements\"\n    }}>{`Step 2: Add new properties to elements`}</h3>\n    <p>{`Now we can add our `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{` property to the right `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` in all the Banner appearances. But which `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{`?`}</p>\n    <p>{`We know that the Banner's content is making the Banner grow. So we need to find the `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` node that controls text. And here it is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<element name=\"content\">\n    <html name=\"message\" preview_converter=\"Magento_PageBuilder/js/converter/html/directive\"/>\n</element>\n`}</code></pre>\n    <p>{`The use of an `}<inlineCode parentName=\"p\">{`html`}</inlineCode>{` node confirms it. The `}<inlineCode parentName=\"p\">{`<html>`}</inlineCode>{` element allows the value for a field to be output as HTML. We can confirm this as the right element by looking at the `}<inlineCode parentName=\"p\">{`preview.html`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`master.html`}</inlineCode>{` templates for the HTML elements that are bound to the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` element:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!-- master.html -->\n<div attr=\"data.content.attributes\"\n     ko-style=\"data.content.style\"\n     css=\"data.content.css\"\n     html=\"data.content.html\">\n</div>\n\n<!-- preview.html -->\n<div if=\"isWysiwygSupported()\"\n     class=\"inline-wysiwyg\"\n     ko-style=\"data.content.style\"\n     css=\"data.content.css\"\n     attr=\"data.content.attributes\"\n     afterRender=\"afterRenderWysiwyg\"\n     contenteditable=\"true\"\n     event=\"mousedown: stopEvent, click: activateEditor, dblclick: handleDoubleClick\">\n</div>\n`}</code></pre>\n    <p>{`Both templates have `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` elements with several attributes bound to `}<inlineCode parentName=\"p\">{`<element name=\"content\">`}</inlineCode>{`, including the `}<inlineCode parentName=\"p\">{`html`}</inlineCode>{` attribute on the frontend template (`}<inlineCode parentName=\"p\">{`master.html`}</inlineCode>{`). We can safely say that this is right element for our `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{` property.`}</p>\n    <p>{`Because `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{` is an official CSS property, we will add it using the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` node as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<element name=\"content\">\n    <style name=\"max_height\" source=\"max_height\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n</element>\n`}</code></pre>\n    <p>{`Attributes of the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` node are described briefly here:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`name`}</inlineCode>{` — name used to bind to the form field with the same name.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`source`}</inlineCode>{` — name of the CSS property in snake_case. Page Builder changes `}<inlineCode parentName=\"p\">{`max_height`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{` when writing it to the DOM.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`converter`}</inlineCode>{` — JavaScript function that converts internal property values to and from the DOM because DOM values are often not in the right format for internal processing.`}</p>\n      </li>\n    </ul>\n    <h4 {...{\n      \"id\": \"to-add-the-max-width-property-to-the-content-element-of-each-appearance\"\n    }}>{`To add the `}<inlineCode parentName=\"h4\">{`max-width`}</inlineCode>{` property to the `}<inlineCode parentName=\"h4\">{`content`}</inlineCode>{` element of each appearance:`}</h4>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Open your module's `}<inlineCode parentName=\"p\">{`banner.xml`}</inlineCode>{` configuration file.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Remove the `}<inlineCode parentName=\"p\">{`preview`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`master`}</inlineCode>{` templates as well as the `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` element nodes from each appearance.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Add your new `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` element and `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` node to the `}<inlineCode parentName=\"p\">{`elements`}</inlineCode>{` node of each appearance.`}</p>\n      </li>\n    </ol>\n    <p>{`When you are done, the `}<inlineCode parentName=\"p\">{`appearances`}</inlineCode>{` section of your `}<inlineCode parentName=\"p\">{`banner.xml`}</inlineCode>{` configuration file should look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<appearances>\n    <appearance name=\"collage-left\">\n        <elements>\n            <element name=\"content\">\n                <style name=\"max_height\" source=\"max_height\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n            </element>\n        </elements>\n    </appearance>\n    <appearance name=\"collage-centered\">\n        <elements>\n            <element name=\"content\">\n                <style name=\"max_height\" source=\"max_height\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n            </element>\n        </elements>\n    </appearance>\n    <appearance name=\"collage-right\">\n        <elements>\n            <element name=\"content\">\n                <style name=\"max_height\" source=\"max_height\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n            </element>\n        </elements>\n    </appearance>\n    <appearance name=\"poster\">\n        <elements>\n            <element name=\"content\">\n                <style name=\"max_height\" source=\"max_height\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n            </element>\n        </elements>\n    </appearance>\n</appearances>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"step-3-add-your-property-fields-to-the-form\"\n    }}>{`Step 3: Add your property fields to the form`}</h3>\n    <p>{`Before you add a field to the form of an existing content type, you need to decide where to add it. In other words, you need to pick a fieldset for your field. For our `}<inlineCode parentName=\"p\">{`max_height`}</inlineCode>{` field, it makes sense to add it below the Banner's existing `}<inlineCode parentName=\"p\">{`min_height`}</inlineCode>{` field, which is in the the `}<inlineCode parentName=\"p\">{`appearance_fieldset`}</inlineCode>{`.`}</p>\n    <p>{`In our example, we used the following markup for our `}<inlineCode parentName=\"p\">{`max_height`}</inlineCode>{` field:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<form xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Ui:etc/ui_configuration.xsd\">\n    <!-- Full Form: Magento/PageBuilder/view/adminhtml/ui_component/pagebuilder_banner_form.xml -->\n    <fieldset name=\"appearance_fieldset\">\n        <field name=\"max_height\" sortOrder=\"30\" formElement=\"input\">\n            <argument name=\"data\" xsi:type=\"array\">\n                <item name=\"config\" xsi:type=\"array\">\n                    <item name=\"default\" xsi:type=\"number\">400</item>\n                </item>\n            </argument>\n            <settings>\n                <label translate=\"true\">Maximum Height</label>\n                <additionalClasses>\n                    <class name=\"admin__field-small\">true</class>\n                </additionalClasses>\n                <addAfter translate=\"true\">px</addAfter>\n                <dataType>text</dataType>\n                <dataScope>max_height</dataScope>\n                <validation>\n                    <rule name=\"validate-number\" xsi:type=\"boolean\">true</rule>\n                </validation>\n            </settings>\n        </field>\n    </fieldset>\n</form>\n`}</code></pre>\n    <p>{`Explaining UI component form fields is beyond the scope of this topic, but a few brief descriptions of the most important nodes might help those of you who are not familiar with UI components. If you already know about UI components, feel free to skip this part.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Elements`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fieldset`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The fieldset `}<inlineCode parentName=\"td\">{`name`}</inlineCode>{` should match the name of the fieldset from the Banner's form. The `}<inlineCode parentName=\"td\">{`appearance_fieldset`}</inlineCode>{` is common to all the content type forms and, by default, appears at the top of the forms using the `}<inlineCode parentName=\"td\">{`sortOrder`}</inlineCode>{` of 10. If you used `}<a parentName=\"td\" {...{\n              \"href\": \"https://github.com/commerce-docs/pbmodules/\"\n            }}>{`PB Modules`}</a>{`, the `}<inlineCode parentName=\"td\">{`fieldset`}</inlineCode>{` node names were copied from the Banner's form, so you're all set.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`field`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The field `}<inlineCode parentName=\"td\">{`name`}</inlineCode>{` should match your `}<inlineCode parentName=\"td\">{`style`}</inlineCode>{` node name in your `}<inlineCode parentName=\"td\">{`banner.xml`}</inlineCode>{` config file. The same is true if you are adding `}<inlineCode parentName=\"td\">{`attribute`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`css`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`html`}</inlineCode>{`, or `}<inlineCode parentName=\"td\">{`tag`}</inlineCode>{` nodes; their names should match the field names that supply their values. Fields also have a `}<inlineCode parentName=\"td\">{`sortOrder`}</inlineCode>{` you can use to place your field above or below existing fields. The `}<inlineCode parentName=\"td\">{`formElement`}</inlineCode>{` for a field describes the HTML form type, such as input, wysiwyg, select, checkbox and more.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`argument > config`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Provides the initial configuration for the field, including the `}<inlineCode parentName=\"td\">{`default`}</inlineCode>{` value. We set our default `}<inlineCode parentName=\"td\">{`max_height`}</inlineCode>{` field to `}<inlineCode parentName=\"td\">{`400`}</inlineCode>{` (px).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`settings`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Provides the field with a label, CSS styling, validation, and other properties as needed.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"step-4-add-static-styles\"\n    }}>{`Step 4: Add static styles`}</h3>\n    <p>{`For this Banner extension to work as expected, we need to add a CSS `}<inlineCode parentName=\"p\">{`overflow`}</inlineCode>{` property to the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` element in the DOM. Specifically, we need to add `}<inlineCode parentName=\"p\">{`overflow-y: auto`}</inlineCode>{` to ensure that when the Banner reaches its `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{` setting, any extra content can be scrolled vertically. And using `}<inlineCode parentName=\"p\">{`auto`}</inlineCode>{` (not `}<inlineCode parentName=\"p\">{`scroll`}</inlineCode>{`) hides the scroll bar when there's nothing to scroll.`}</p>\n    <p>{`In this case, the `}<inlineCode parentName=\"p\">{`overflow`}</inlineCode>{` property is considered a `}<inlineCode parentName=\"p\">{`static style`}</inlineCode>{` because users don't set it and there is no logic that changes its value for different conditions. The `}<inlineCode parentName=\"p\">{`overflow`}</inlineCode>{` property is also essential to the proper rendering of our Banner extensions because of the `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{` user-defined property we added.`}</p>\n    <p>{`These qualities make the `}<inlineCode parentName=\"p\">{`overflow`}</inlineCode>{` property a perfect use case for adding it as a `}<inlineCode parentName=\"p\">{`static_style`}</inlineCode>{` on the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` element. See `}<a parentName=\"p\" {...{\n        \"href\": \"../../architecture/configurations.md#static_style-and-static_attribute-elements\"\n      }}>{`static_style and static_attribute elements`}</a>{` for more about these configuration elements.`}</p>\n    <p><strong parentName=\"p\">{`Add `}<inlineCode parentName=\"strong\">{`overflow-y`}</inlineCode>{` as a `}<inlineCode parentName=\"strong\">{`static_style`}</inlineCode>{` property for each appearance`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<appearances>\n    <appearance name=\"collage-left\">\n        <elements>\n            <element name=\"content\">\n                <style name=\"max_height\" source=\"max_height\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n                <static_style source=\"overflow-y\" value=\"auto\" />\n            </element>\n        </elements>\n    </appearance>\n    <appearance name=\"collage-centered\">\n        <elements>\n            <element name=\"content\">\n                <style name=\"max_height\" source=\"max_height\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n                <static_style source=\"overflow-y\" value=\"auto\" />\n            </element>\n        </elements>\n    </appearance>\n    <appearance name=\"collage-right\">\n        <elements>\n            <element name=\"content\">\n                <style name=\"max_height\" source=\"max_height\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n                <static_style source=\"overflow-y\" value=\"auto\" />\n            </element>\n        </elements>\n    </appearance>\n    <appearance name=\"poster\">\n        <elements>\n            <element name=\"content\">\n                <style name=\"max_height\" source=\"max_height\" converter=\"Magento_PageBuilder/js/converter/style/remove-px\"/>\n                <static_style source=\"overflow-y\" value=\"auto\" />\n            </element>\n        </elements>\n    </appearance>\n</appearances>\n`}</code></pre>\n    <p>{`As shown, all `}<inlineCode parentName=\"p\">{`static_styles`}</inlineCode>{` (and `}<inlineCode parentName=\"p\">{`static_attributes`}</inlineCode>{`) are simple to add, with only two attributes:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`source`}</inlineCode>{` — refers to the name of the CSS property.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`value`}</inlineCode>{` — refers to the value you want to set for that property.`}</p>\n      </li>\n    </ul>\n    <p>{`The hardest part is knowing when to add them to a configuration.`}</p>\n    <h4 {...{\n      \"id\": \"static_style-or-stylesheet-style\"\n    }}><inlineCode parentName=\"h4\">{`static_style`}</inlineCode>{` or stylesheet style?`}</h4>\n    <p>{`When should you add a style (CSS property) as a `}<inlineCode parentName=\"p\">{`static_style`}</inlineCode>{` in your configuration, versus adding that style as a property within a CSS selector in your stylesheet?`}</p>\n    <p>{`We offer these guiding principles:`}</p>\n    <p><strong parentName=\"p\">{`Both options are valid`}</strong>{` when the style property's `}<strong parentName=\"p\">{`value`}</strong>{` is:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Not set by users`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Not changed by code`}</p>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`Use stylesheets`}</strong>{` when the style property's `}<strong parentName=\"p\">{`value`}</strong>{` is:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`NOT REQUIRED to render the appearance correctly`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Use `}<inlineCode parentName=\"strong\">{`static_style`}</inlineCode></strong>{` when the style property's `}<strong parentName=\"p\">{`value`}</strong>{` is:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`REQUIRED to render the appearance correctly`}</li>\n    </ul>\n    <p>{`You will have to evaluate which of your extending style properties are required to render your content type's appearance as it was intended, without the addition styles that are external to the configuration.`}</p>\n    <h3 {...{\n      \"id\": \"step-5-add-stylesheet-styles\"\n    }}>{`Step 5: Add stylesheet styles`}</h3>\n    <p>{`For styles that are not required for the basic rendering of your appearances, add them to your `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` files in your `}<inlineCode parentName=\"p\">{`css/source`}</inlineCode>{` directories. From there, you can use them to target the elements you want to style. Here's how.`}</p>\n    <p>{`Open your module's Admin and frontend `}<inlineCode parentName=\"p\">{`_default.less`}</inlineCode>{` files (assuming you used PB Modules to create your module):`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`adminhtml/web/css/source/content-type/banner/_default.less`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`frontend/web/css/source/content-type/banner/_default.less`}</inlineCode></p>\n        <p parentName=\"li\">{`Within your less files, you can use Page Builder's `}<a parentName=\"p\" {...{\n            \"href\": \"../../styles/override-pagebuilder-styles.md\"\n          }}>{`CSS selector override pattern`}</a>{` to create CSS selectors that target the `}<inlineCode parentName=\"p\">{`[data-element=\"<name-of-element>\"]`}</inlineCode>{` attribute in the DOM. This is the way to style any element in your content type from your CSS/Less stylesheets.`}</p>\n      </li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`Styling best practices:`}</strong>{`\nIf you don't know `}<a parentName=\"p\" {...{\n        \"href\": \"../../styles/index.md\"\n      }}>{`how Page Builder styles content`}</a>{`, you need to stop reading this topic, go read that topic, then come back and continue. Knowing how Page Builder styles its content (and yours) is an essential part of mastering appearances. When you know how Page Builder generates and applies its CSS to the DOM, you gain control over your Page Builder styling destiny. No more dreams of selector magic shattered by nightmares of !importance. You can finally win the specificity war (in Page Builder).`}</p>\n    <h4 {...{\n      \"id\": \"use-case-for-stylesheet-styles\"\n    }}>{`Use case for stylesheet styles`}</h4>\n    <p>{`Let's say your customers want to theme their content for Valentine's Day. They want you to change all the Banners to have a red background with white text.`}</p>\n    <p>{`In this case, you want to create a CSS selector that targets the `}<inlineCode parentName=\"p\">{`banner`}</inlineCode>{` content type, then the `}<inlineCode parentName=\"p\">{`wrapper`}</inlineCode>{` element within it (to change the background), then the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` element (to change the text color).`}</p>\n    <p>{`Page Builder makes this easy by adding attributes to the HTML template elements when rendering them to the DOM. For Banners, Page Builder adds a `}<inlineCode parentName=\"p\">{`data-content-type=\"banner\"`}</inlineCode>{` attribute to the top element of the Banner's templates to make it easy to target them in the DOM. Page Builder also adds a `}<inlineCode parentName=\"p\">{`data-element=\"name\"`}</inlineCode>{` attribute to the HTML template elements that bind to a configuration `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{`. The attribute takes the name of the `}<inlineCode parentName=\"p\">{`element`}</inlineCode>{` in the configuration.`}</p>\n    <p>{`We want to target the `}<inlineCode parentName=\"p\">{`wrapper`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` elements to make our CSS changes. So we start our selectors with `}<inlineCode parentName=\"p\">{`#html-body`}</inlineCode>{` followed by the `}<inlineCode parentName=\"p\">{`banner`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`wrapper`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` attributes, and add our style properties like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// Targeting the Banner elements on the frontend\n& when (@media-common = true) {\n    #html-body {\n        [data-content-type='banner'] {\n            [data-element='wrapper'] {\n                background-color: darkred;\n            }\n\n            [data-element='content'] {\n                color: white;\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`The selectors for the `}<inlineCode parentName=\"p\">{`background-color`}</inlineCode>{` and the text `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` both have a specificity of `}<inlineCode parentName=\"p\">{`120`}</inlineCode>{`, which overrides any styles Page Builder applies to the same DOM elements. And technically, you don't even need to look at the DOM to make this work. You just needed to know how Page Builder styles its content. (We, of course, look at the DOM all the time because its a great way to learn what attributes and classes Page Builder adds to your templates. Later, this can help you make creative decisions about what configuration and template elements you add to your extensions to get exactly what you want.)`}</p>\n    <p>{`When you get comfortable with targeting the element attributes, you can go much further with your styling customizations and theme nearly every element in your Banner extension:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// Targeting the Banner elements on the frontend\n& when (@media-common = true) {\n    #html-body {\n        [data-content-type='banner'] {\n            [data-element='wrapper'] {\n                background-color: darkred;\n                border-radius: 10px;\n            }\n\n            [data-element='overlay'] {\n                max-width: 50%;\n            }\n\n            [data-element='content'] {\n                color: white;\n                margin-bottom: 25px;\n\n                &::-webkit-scrollbar {\n                    display: none;\n                }\n            }\n\n            [data-element='button'] {\n                background: white;\n                border: white;\n                color: darkred;\n\n                &::after {\n                    content: '❤️';\n                    display: inline-block;\n                    transform: translate(25px, -15px) rotate(25deg) scale(2);\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Notice how you don't have to worry about nesting beyond the `}<inlineCode parentName=\"p\">{`banner`}</inlineCode>{` attribute: `}<inlineCode parentName=\"p\">{`[data-content-element='banner]`}</inlineCode>{`. Our selectors for the `}<inlineCode parentName=\"p\">{`wrapper`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`overlay`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` elements all have a specificity of `}<inlineCode parentName=\"p\">{`120`}</inlineCode>{`. And that's all we need for our overrides.`}</p>\n    <h3 {...{\n      \"id\": \"testing-your-work\"\n    }}>{`Testing your work`}</h3>\n    <p>{`After adding your CSS/Less, run your Less transpiler, clean your cache (`}<inlineCode parentName=\"p\">{`bin/magento cache:clean`}</inlineCode>{`), drag a new Banner to the Admin stage, open the form editor, and take a look at your new `}<inlineCode parentName=\"p\">{`max-height`}</inlineCode>{` field being rendered for every appearance in the form, similar to what's shown here:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"39.0625%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/d31d50957baef836856183d369d04c7c/5530d/appearance-fieldset.webp 320w\", \"/commerce-frontend-core/static/d31d50957baef836856183d369d04c7c/0c8fb/appearance-fieldset.webp 640w\", \"/commerce-frontend-core/static/d31d50957baef836856183d369d04c7c/94b1e/appearance-fieldset.webp 1280w\", \"/commerce-frontend-core/static/d31d50957baef836856183d369d04c7c/1e927/appearance-fieldset.webp 1868w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/commerce-frontend-core/static/d31d50957baef836856183d369d04c7c/dd4a7/appearance-fieldset.png 320w\", \"/commerce-frontend-core/static/d31d50957baef836856183d369d04c7c/0f09e/appearance-fieldset.png 640w\", \"/commerce-frontend-core/static/d31d50957baef836856183d369d04c7c/bbbf7/appearance-fieldset.png 1280w\", \"/commerce-frontend-core/static/d31d50957baef836856183d369d04c7c/de412/appearance-fieldset.png 1868w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/commerce-frontend-core/static/d31d50957baef836856183d369d04c7c/bbbf7/appearance-fieldset.png\",\n            \"alt\": \"Appearance fieldset\",\n            \"title\": \"Appearance fieldset\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"summary\"\n    }}>{`Summary`}</h2>\n    <p>{`Before you begin any Page Builder development, first explore whether you can meet your customer's needs by extending existing content types. If you can, you should. It's a quicker path to completion and less work than creating a completely new content type.`}</p>\n    <p>{`With more experience, you may be surprised at how often you can adapt existing content types to meet your customer's needs.`}</p>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next steps`}</h2>\n    <p>{`You have two more topic options for learning more about using appearances to extend content types:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"extend-more-appearances.md\"\n          }}>{`Extend another appearance`}</a>{` where you will learn more about using the `}<inlineCode parentName=\"p\">{`attribute`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` elements while extending a Heading content type.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"add-appearances.md\"\n          }}>{`Add an appearance`}</a>{` where you will learn how to add a completely new appearance to a content type.`}</p>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}