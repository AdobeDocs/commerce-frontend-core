{"version":3,"file":"component---src-pages-guide-templates-override-md-60104411c905492c3bd5.js","mappings":"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","sources":["webpack://commerce-frontend-core/./src/pages/guide/templates/override.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"basic-concepts\"\n    }}>{`Basic concepts`}</h1>\n    <p>{`This topic explains how default templates work in the application.`}</p>\n    <h2 {...{\n      \"id\": \"how-templates-are-initiated\"\n    }}>{`How templates are initiated`}</h2>\n    <p>{`Templates are initiated in `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/layout\"\n      }}>{`layout`}</a>{` files, and\neach layout block has an associated template.`}</p>\n    <p>{`The template is specified in the `}<inlineCode parentName=\"p\">{`template`}</inlineCode>{` attribute of the `}<inlineCode parentName=\"p\">{`<block>`}</inlineCode>{` layout instruction.`}</p>\n    <p>{`Take this example from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4/app/code/Magento/Catalog/view/frontend/layout/catalog_category_view.xml\"\n      }}><inlineCode parentName=\"a\">{`app/code/Magento/Catalog/view/frontend/layout/catalog_category_view.xml`}</inlineCode></a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<block class=\"Magento\\\\Catalog\\\\Block\\\\Category\\\\View\" name=\"category.image\" template=\"Magento_Catalog::category/image.phtml\">\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`category.image`}</inlineCode>{` block is rendered by the `}<inlineCode parentName=\"p\">{`image.phtml`}</inlineCode>{` template in the `}<inlineCode parentName=\"p\">{`category`}</inlineCode>{` subdirectory of the `}<inlineCode parentName=\"p\">{`Magento_Catalog`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/module\"\n      }}>{`module`}</a>{` templates directory.`}</p>\n    <p>{`The templates directory of `}<inlineCode parentName=\"p\">{`Magento_Catalog`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`app/code/Magento/Catalog/view/frontend/templates`}</inlineCode>{`.`}</p>\n    <p>{`Templates may also be specified in the PHP `}<inlineCode parentName=\"p\">{`Block`}</inlineCode>{` class using the `}<inlineCode parentName=\"p\">{`$_template`}</inlineCode>{` protected variable.`}</p>\n    <p>{`Here is an example from the `}<inlineCode parentName=\"p\">{`app/code/Magento/Review/view/frontend/layout/review_product_view.xml`}</inlineCode>{` layout:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<block class=\"Magento\\\\Review\\\\Block\\\\View\" name=\"review_view\" ifconfig=\"catalog/review/active\"/>\n`}</code></pre>\n    <p>{`The template for the `}<inlineCode parentName=\"p\">{`review_view`}</inlineCode>{` block is not specified using the `}<inlineCode parentName=\"p\">{`template`}</inlineCode>{` attribute of the `}<inlineCode parentName=\"p\">{`<block>`}</inlineCode>{` layout instruction. Instead, it is specified in the `}<inlineCode parentName=\"p\">{`app/code/Magento/Review/Block/View.php`}</inlineCode>{` block class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`protected $_template = 'Magento_Review::view.phtml';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"template-location\"\n    }}>{`Template location`}</h2>\n    <p>{` Templates are stored in the following locations:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Module templates: `}<inlineCode parentName=\"li\">{`<module_dir>/view/frontend/templates/<path_to_templates>`}</inlineCode></li>\n      <li parentName=\"ul\">{`Theme templates: `}<inlineCode parentName=\"li\">{`<theme_dir>/<Namespace>_<Module>/templates/<path_to_templates>`}</inlineCode></li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`<path_to_templates>`}</inlineCode>{` indicates zero or more directory levels.`}</p>\n    <p>{`Examples:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`app/code/Magento/Catalog/view/frontend/templates/product/widget/new/content/new_grid.phtml`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`app/code/Magento/Checkout/view/frontend/templates/cart.phtml`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"template-overrides\"\n    }}>{`Template overrides`}</h2>\n    <p>{`For template files with the same name, the following override rules apply:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Theme templates override module templates`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../themes/inheritance.md\"\n        }}>{`Child theme`}</a>{` templates override parent theme templates`}</li>\n    </ul>\n    <p>{`To change the output defined by an existing template, override the template in your custom theme.\nThis concept is the basis of template customization.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"../themes/inheritance.md#override-templates\"\n      }}>{`Theme inheritance`}</a></p>\n    <h2 {...{\n      \"id\": \"root-template\"\n    }}>{`Root template`}</h2>\n    <p><inlineCode parentName=\"p\">{`<Magento_Theme_module_dir>/view/base/templates/root.phtml`}</inlineCode>{` is the root template for all storefront pages in the application.\nThis file can be overridden in a theme just like any other template file.`}</p>\n    <p>{`Unlike other templates, `}<inlineCode parentName=\"p\">{`root.phtml`}</inlineCode>{` contains the `}<inlineCode parentName=\"p\">{`doctype`}</inlineCode>{` specification and contributes to `}<inlineCode parentName=\"p\">{`<head>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<body>`}</inlineCode>{` sections of all pages rendered by application.`}</p>\n    <h2 {...{\n      \"id\": \"getting-argument-values-from-layout\"\n    }}>{`Getting argument values from layout`}</h2>\n    <p>{`Arguments values set in a layout file are accessed in templates using the block's `}<inlineCode parentName=\"p\">{`get{ArgumentName}()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`has{ArgumentName}()`}</inlineCode>{` methods.`}</p>\n    <p>{`For example, set an argument in the block: `}<inlineCode parentName=\"p\">{`<argument name=\"store_name\" xsi:type=\"string\">ExampleCorp</argument>`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Get the argument value, in the template:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$block->getData('store_name')`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$block->getStoreName()`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Check if the argument exists:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$block->hasData('store_name')`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$block->hasStoreName()`}</inlineCode></li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"../layouts/xml-instructions.md#argument\"\n      }}>{`Block arguments`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"using-php-short-tags-in-template-phtml-files\"\n    }}>{`Using PHP short tags in template PHTML files`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`echo`}</inlineCode>{` command in PHP can be written using the short tag in templates.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-phtml\"\n      }}>{`<?= $block->getAdjustmentsHtml() ?>\n`}</code></pre>\n    <p>{`is the same as writing`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-phtml\"\n      }}>{`<?php echo $block->getAdjustmentsHtml() ?>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"localization\"\n    }}>{`Localization`}</h2>\n    <p>{`In order to support the translation of content, the text must be wrapped inside `}<inlineCode parentName=\"p\">{`__('sample text')`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-phtml\"\n      }}>{`<span><?= $escaper->escapeHtml(__('Back to Product Reviews')) ?></span>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}