"use strict";(self.webpackChunkcommerce_frontend_core=self.webpackChunkcommerce_frontend_core||[]).push([[5170],{54753:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return o},default:function(){return c}});var a=n(87462),i=n(45987),r=(n(35776),n(3905)),l=n(91515);const s=["components"],o={},m={_frontmatter:o},d=l.Z;function c(e){let{components:t}=e,n=(0,i.Z)(e,s);return(0,r.mdx)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"add-a-visual-selector"},"Add a visual selector"),(0,r.mdx)("p",null,"In Page Builder, we use a term called ",(0,r.mdx)("em",{parentName:"p"},"visual selector"),", which refers to a UI select control that makes its options visually clear to end users. You can see examples of these selectors in Page Builder's content type form fields for ",(0,r.mdx)("strong",{parentName:"p"},"Background Type"),", ",(0,r.mdx)("strong",{parentName:"p"},"Background Size"),", ",(0,r.mdx)("strong",{parentName:"p"},"Alignment"),", and more. This topic describes how to add these visual selector controls to your own content types."),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"839px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"19.0625%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/commerce-frontend-core/static/fd996a6a1495c95d99405ce505442f63/5530d/advanced-alignment.webp 320w","/commerce-frontend-core/static/fd996a6a1495c95d99405ce505442f63/0c8fb/advanced-alignment.webp 640w","/commerce-frontend-core/static/fd996a6a1495c95d99405ce505442f63/c0e8b/advanced-alignment.webp 839w"],sizes:"(max-width: 839px) 100vw, 839px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/commerce-frontend-core/static/fd996a6a1495c95d99405ce505442f63/dd4a7/advanced-alignment.png 320w","/commerce-frontend-core/static/fd996a6a1495c95d99405ce505442f63/0f09e/advanced-alignment.png 640w","/commerce-frontend-core/static/fd996a6a1495c95d99405ce505442f63/75539/advanced-alignment.png 839w"],sizes:"(max-width: 839px) 100vw, 839px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/commerce-frontend-core/static/fd996a6a1495c95d99405ce505442f63/75539/advanced-alignment.png",alt:"alignments",title:"Content alignment",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,r.mdx)("p",null,"Visual selectors support all image formats, but we highly recommend using SVG images for sharpness and clarity."),(0,r.mdx)("h2",{id:"element-template"},"Override the select component with an element template"),(0,r.mdx)("p",null,"We use the default select component in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"/app/code/Magento/PageBuilder/view/adminhtml/ui-component/pagebuilder_base_form.xml")," file. You can override the default template, by specifying an element template and component for this functionality to implement the Visual Select option."),(0,r.mdx)("p",null,"In the provided template, specify ",(0,r.mdx)("inlineCode",{parentName:"p"},"<elementTmpl>")," alongside updating the fields component to ",(0,r.mdx)("inlineCode",{parentName:"p"},"Magento_PageBuilder/js/form/element/visual-select"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<field name="text_align" sortOrder="10" formElement="select" component="Magento_PageBuilder/js/form/element/visual-select">\n    <settings>\n        <dataType>text</dataType>\n        <label translate="true">Alignment</label>\n        <elementTmpl>Magento_PageBuilder/form/element/align</elementTmpl>\n    </settings>\n')),(0,r.mdx)("h2",{id:"xml-config"},"Add Visual Select to the XML config"),(0,r.mdx)("p",null,"The available options for select, ",(0,r.mdx)("inlineCode",{parentName:"p"},"value"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"title"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"icon")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"noticeMessage"),", can be provided by the PHP class that implements the ",(0,r.mdx)("inlineCode",{parentName:"p"},"\\Magento\\Framework\\Option\\ArrayInterface")," method."),(0,r.mdx)("p",null,"Options should return an array with the following format:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},'[\n    value => "value", //key used in the component dataSource\n    title => "Title",\n    icon => "path/to/picture/on/server",\n    noticeMessage => "A message to be displayed when option is selected"\n]\n')),(0,r.mdx)("p",null,"These new configuration values are used in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"align.html")," template file stored in Page Builder's ",(0,r.mdx)("inlineCode",{parentName:"p"},"app/code/Magento/PageBuilder/view/adminhtml/web/template/form/element")," directory."),(0,r.mdx)("p",null,"Use a virtual type of ",(0,r.mdx)("inlineCode",{parentName:"p"},"Magento\\PageBuilder\\Model\\Source\\VisualSelect")," in your module's ",(0,r.mdx)("inlineCode",{parentName:"p"},"di.xml")," configuration file to define the options in a visual select field."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<virtualType name="AlignmentSource" type="Magento\\PageBuilder\\Model\\Source\\VisualSelect">\n       <arguments>\n           <argument name="optionsSize" xsi:type="string">small</argument>\n           <argument name="optionsData" xsi:type="array">\n               <item name="0" xsi:type="array">\n                   <item name="value" xsi:type="string"/>\n                   <item name="title" xsi:type="string" translate="true">Default</item>\n               </item>\n               <item name="1" xsi:type="array">\n                   <item name="value" xsi:type="string">left</item>\n                   <item name="title" xsi:type="string" translate="true">Left</item>\n                   <item name="icon" xsi:type="string">Magento_PageBuilder/css/images/form/element/visual-select/alignment/left.svg</item>\n               </item>\n               <item name="2" xsi:type="array">\n                   <item name="value" xsi:type="string">center</item>\n                   <item name="title" xsi:type="string" translate="true">Center</item>\n                   <item name="icon" xsi:type="string">Magento_PageBuilder/css/images/form/element/visual-select/alignment/center.svg</item>\n               </item>\n               <item name="3" xsi:type="array">\n                   <item name="value" xsi:type="string">right</item>\n                   <item name="title" xsi:type="string" translate="true">Right</item>\n                   <item name="icon" xsi:type="string">Magento_PageBuilder/css/images/form/element/visual-select/alignment/right.svg</item>\n               </item>\n           </argument>\n       </arguments>\n   </virtualType>\n')),(0,r.mdx)("h3",{id:"display-notice-when-option-is-selected"},"Display notice when option is selected"),(0,r.mdx)("p",null,"For some options you may wish to display an additional notice when the user selects the item. You can do this by providing a ",(0,r.mdx)("inlineCode",{parentName:"p"},"noticeMessage")," within the items declaration."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<item name="3" xsi:type="array">\n   <item name="value" xsi:type="string">right</item>\n   <item name="title" xsi:type="string" translate="true">Right</item>\n   <item name="icon" xsi:type="string">Magento_PageBuilder/css/images/form/element/visual-select/alignment/right.svg</item>\n   <item name="noticeMessage" xsi:type="string" translate="true">Message to be displayed below field when selected.</item>\n</item>\n')),(0,r.mdx)("h2",{id:"vertical-alignment"},"How to reuse vertical alignment between different content types"),(0,r.mdx)("p",null,"To apply vertical alignment to a content type using the Visual Select component, use the virtualType ",(0,r.mdx)("inlineCode",{parentName:"p"},"Magento\\PageBuilder\\Model\\Source\\VerticalAlignment")," with options in your module's ",(0,r.mdx)("inlineCode",{parentName:"p"},"di.xml")," configuration file."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<virtualType name="Magento\\PageBuilder\\Model\\Source\\VerticalAlignment" type="Magento\\PageBuilder\\Model\\Source\\VisualSelect">\n    <arguments>\n        <argument name="optionsSize" xsi:type="string">small</argument>\n        <argument name="optionsData" xsi:type="array">\n            <item name="0" xsi:type="array">\n                <item name="value" xsi:type="string">flex-start</item>\n                <item name="title" xsi:type="string" translate="true">Top</item>\n                <item name="icon" xsi:type="string">Magento_PageBuilder/css/images/form/element/visual-select/vertical-align/top.svg</item>\n            </item>\n            <item name="1" xsi:type="array">\n                <item name="value" xsi:type="string">center</item>\n                <item name="title" xsi:type="string" translate="true">Center</item>\n                <item name="icon" xsi:type="string">Magento_PageBuilder/css/images/form/element/visual-select/vertical-align/center.svg</item>\n            </item>\n            <item name="2" xsi:type="array">\n                <item name="value" xsi:type="string">flex-end</item>\n                <item name="title" xsi:type="string" translate="true">Bottom</item>\n                <item name="icon" xsi:type="string">Magento_PageBuilder/css/images/form/element/visual-select/vertical-align/bottom.svg</item>\n            </item>\n        </argument>\n    </arguments>\n</virtualType>\n')),(0,r.mdx)("h3",{id:"add-the-visual-select-option-in-your-modules-form-configuration-file"},"Add the Visual Select option in your module's form configuration file"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<field name="justify_content" sortOrder="20" formElement="select" component="Magento_PageBuilder/js/form/element/visual-select">\n    <argument name="data" xsi:type="array">\n        <item name="config" xsi:type="array">\n            <item name="default" xsi:type="string">flex-start</item>\n        </item>\n    </argument>\n    <settings>\n        <dataType>text</dataType>\n        <label translate="true">Vertical Alignment</label>\n        <notice translate="true">Vertical alignment controls how the child blocks of this container will be positioned. Set minimum height in order to use vertical alignment.</notice>\n        <elementTmpl>Magento_PageBuilder/form/element/visual-select</elementTmpl>\n    </settings>\n    <formElements>\n        <select>\n            <settings>\n                <options class="Magento\\PageBuilder\\Model\\Source\\VerticalAlignment"/>\n            </settings>\n        </select>\n    </formElements>\n</field>\n')),(0,r.mdx)("h3",{id:"configure-the-content-type-with-the-vertical-alignment-style-properties-this-example-is-from-row"},"Configure the content type with the vertical alignment style properties. This example is from Row."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<elements>\n    <element name="main" path=".">\n        <style name="background_color" source="background_color" converter="Magento_PageBuilder/js/converter/style/color"/>\n        <style name="background_image" source="background_image" converter="Magento_PageBuilder/js/converter/style/background-image" preview_converter="Magento_PageBuilder/js/converter/style/preview/background-image"/>\n        <style name="background_position" source="background_position"/>\n        <style name="background_size" source="background_size"/>\n        <style name="background_repeat" source="background_repeat"/>\n        <style name="background_attachment" source="background_attachment"/>\n        <style name="text_align" source="text_align"/>\n        <style name="border" source="border_style" converter="Magento_PageBuilder/js/converter/style/border-style"/>\n        <style name="border_color" source="border_color" converter="Magento_PageBuilder/js/converter/style/color"/>\n        <style name="border_width" source="border_width" converter="Magento_PageBuilder/js/converter/style/remove-px"/>\n        <style name="border_radius" source="border_radius" converter="Magento_PageBuilder/js/converter/style/remove-px"/>\n        <style name="justify_content" source="justify_content" persistence_mode="read"/>\n        <style name="min_height" source="min_height" converter="Magento_PageBuilder/js/converter/style/remove-px"/>\n        <style name="margins_and_padding" reader="Magento_PageBuilder/js/property/margins" converter="Magento_PageBuilder/js/converter/style/margins" preview_converter="Magento_PageBuilder/js/content-type/row/converter/style/margins"/>\n        <style name="margins_and_padding" reader="Magento_PageBuilder/js/property/paddings" converter="Magento_PageBuilder/js/converter/style/paddings" preview_converter="Magento_PageBuilder/js/content-type/row/converter/style/paddings"/>\n        <attribute name="name" source="data-content-type"/>\n        <attribute name="appearance" source="data-appearance"/>\n        <attribute name="enable_parallax" source="data-enable-parallax"/>\n        <attribute name="parallax_speed" source="data-parallax-speed"/>\n        <attribute name="background_color_format" source="data-background-color-format" persistence_mode="write"/>\n        <css name="css_classes"/>\n    </element>\n    <element name="container">\n        <style name="justify_content" source="justify_content"/>\n        <static_style source="display" value="flex"/>\n        <static_style source="flex_direction" value="column"/>\n    </element>\n</elements>\n')),(0,r.mdx)("h3",{id:"specify-which-elements-in-the-preview-and-master-templates-should-receive-the-style-properties"},"Specify which elements in the preview and master templates should receive the style properties"),(0,r.mdx)("p",null,"Example master template:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html"},'<div attr="data.main.attributes"\n     ko-style="Object.assign(data.container.style(), data.main.style())"\n     css="data.main.css">\n    <render args="masterTemplate"/>\n</div>\n')),(0,r.mdx)("p",null,"Example preview template:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html"},'<div class="pagebuilder-content-type type-container pagebuilder-row children-min-height" data-bind="attr: data.main.attributes, style: data.main.style, css: Object.assign(data.main.css(), {\'empty-container\': parent.children().length == 0, \'jarallax\': data.main.attributes()[\'data-enable-parallax\'] == 1}), event: {mouseover: onMouseOver, mouseout: onMouseOut }, mouseoverBubble: false, afterRender: function (element) { setTimeout(function () { initParallax.call($data, element); }, 0) }">\n    <render args="getOptions().template"></render>\n    <div class="element-children content-type-container" each="parent.getChildren()" ko-style="data.container.style" css="getChildrenCss()" attr="{id: parent.id + \'-children\'}" data-bind="sortable: getSortableOptions()" afterRender="function (element) { if (typeof afterChildrenRender === \'function\') { afterChildrenRender(element); } }">\n        <if args="$parent.isContainer()">\n            <div class="pagebuilder-drop-indicator"></div>\n        </if>\n        <div class="pagebuilder-content-type-wrapper" template="{ name: preview.template, data: preview, afterRender: function () { preview.dispatchAfterRenderEvent.apply(preview, arguments); } }" attr="{ id: id }"></div>\n        <if args="$parent.isContainer() && $index() === $parent.parent.getChildren()().length - 1">\n            <div class="pagebuilder-drop-indicator"></div>\n        </if>\n    </div>\n    <div class="pagebuilder-display-label" data-bind="text: function () { return displayLabel().toUpperCase(); }()"></div>\n    <div class="pagebuilder-empty-container empty-placeholder" data-bind="css: {visible: parent.children().length == 0}, i18n: \'Drag content types or columns here\'"></div>\n</div>\n')))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-page-builder-content-types-customize-add-visual-selector-md-2404e8c37c70987522cb.js.map