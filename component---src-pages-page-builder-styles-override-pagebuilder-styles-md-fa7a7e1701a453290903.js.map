{"version":3,"file":"component---src-pages-page-builder-styles-override-pagebuilder-styles-md-fa7a7e1701a453290903.js","mappings":"sSAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,gCACH,iCACL,kBAAK,0HAAwH,cAAGC,WAAW,IACvI,KAAQ,gEACL,eAAmB,kBAAgB,uBAAYA,WAAW,KAAM,OAAoB,2LAC3F,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,8EAIP,mBAAG,gBAAKA,WAAW,IACf,IAAO,iGACP,IAAO,6BAEX,mBAAG,eAAIA,WAAW,KAAM,2CACxB,kBAAK,oFAAkF,cAAGA,WAAW,IACjG,KAAQ,YACL,mCAAuC,MAC9C,eACE,GAAM,iCACH,kCACL,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,mBAAG,mBAAQC,WAAW,KAAM,0BAAmC,gHAA8G,cAAGA,WAAW,IACvL,KAAQ,kCACL,0BAA8B,MACrC,kBAAK,sFACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,0HAIP,mBAAG,gBAAKA,WAAW,IACf,IAAO,+GACP,IAAO,oCAEX,mBAAG,eAAIA,WAAW,KAAM,mCACxB,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAM,cAA2B,mDAAiD,uBAAYA,WAAW,KAAM,MAAmB,UAAQ,uBAAYA,WAAW,KAAM,cAA2B,kBAAgB,uBAAYA,WAAW,KAAM,UAAuB,+DAElT,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAM,mCAAgD,6DAA2D,uBAAYA,WAAW,KAAM,eAA4B,iGAA+F,uBAAYA,WAAW,KAAM,OAAoB,2DAAyD,uBAAYA,WAAW,KAAM,6BAA0C,OAEte,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,uBAAYA,WAAW,KAAM,2BAAwC,6FAA2F,uBAAYA,WAAW,KAAM,OAAoB,wCAAsC,uBAAYA,WAAW,KAAM,KAAkB,mCAAiC,uBAAYA,WAAW,KAAM,OAAoB,oEAG/Y,eACE,GAAM,iCACH,kCACL,kBAAK,iCAA+B,eAAIA,WAAW,KAAM,OAAY,mCAAiC,uBAAYA,WAAW,KAAM,WAAwB,4BAA0B,uBAAYA,WAAW,KAAM,cAA2B,uCAAqC,uBAAYA,WAAW,KAAM,WAAwB,iHAA+G,uBAAYA,WAAW,KAAM,OAAoB,4CACve,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,qDAEP,mBAAG,gBAAKA,WAAW,IACf,IAAO,kHACP,IAAO,kCAEX,kBAAK,+DAA6D,uBAAYA,WAAW,KAAM,2BAAwC,0DACvI,eACE,GAAM,mCACH,oCACL,kBAAK,sKAAoK,uBAAYA,WAAW,KAAM,OAAoB,MAC1N,mBAAG,mBAAQA,WAAW,KAAM,kBAAgB,uBAAYA,WAAW,UAAW,WAAwB,eAAa,uBAAYA,WAAW,UAAW,WAAwB,cAAY,uBAAYA,WAAW,UAAW,WAAwB,kBACnP,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,6FAGP,mBAAG,mBAAQA,WAAW,KAAM,cAAY,uBAAYA,WAAW,UAAW,WAAwB,eAAa,uBAAYA,WAAW,UAAW,WAAwB,cAAY,uBAAYA,WAAW,UAAW,WAAwB,iBAC/O,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,mGAGP,mBAAG,mBAAQA,WAAW,KAAM,iBAAe,uBAAYA,WAAW,UAAW,OAAoB,2BACjG,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,yFAEP,mBAAG,mBAAQA,WAAW,KAAM,iBAAe,uBAAYA,WAAW,UAAW,QAAqB,wBAClG,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,qEAEP,eACE,GAAM,sCACH,uCACL,kBAAK,8JAA4J,mBAAQA,WAAW,KAAM,uBAAgC,WAC1N,kBAAK,qEACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,8BAEvB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAO,2BAGzB,eACE,GAAM,kCACH,oCACL,kBAAK,8BAA4B,uBAAYA,WAAW,KAAM,mBAAgC,0CAAwC,uBAAYA,WAAW,KAAM,SAAsB,0CACzL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBACV,kEAEP,mBAAG,gBAAKA,WAAW,IACf,IAAO,0GACP,IAAO,kCAEX,mBAAG,eAAIA,WAAW,KAAM,8DACxB,kBAAK,qDAAmD,uBAAYA,WAAW,KAAM,WAAwB,oCAAkC,uBAAYA,WAAW,KAAM,OAAoB,iEAA+D,uBAAYA,WAAW,KAAM,OAAoB,0DAAwD,uBAAYA,WAAW,KAAM,mBAAgC,iEAA+D,uBAAYA,WAAW,KAAM,WAAwB,mBACzhB,eACE,GAAM,8BACH,gCACL,kBAAK,4GAA0G,mBAAQA,WAAW,KAAM,eAAwB,YAChK,kBAAK,gDAA8C,uBAAYA,WAAW,KAAM,kBAA+B,gBAAc,uBAAYA,WAAW,KAAM,WAAwB,qCAAmC,uBAAYA,WAAW,KAAM,WAAwB,2BAAyB,uBAAYA,WAAW,KAAM,kBAA+B,wBAAsB,mBAAQA,WAAW,KAAM,eAAwB,2BACta,mBAAG,gBAAKA,WAAW,IACf,IAAO,wFACP,IAAO,oCAEX,kBAAK,wCAAsC,uBAAYA,WAAW,KAAM,WAAwB,cAAY,uBAAYA,WAAW,KAAM,MAAmB,OAAK,uBAAYA,WAAW,KAAM,MAAmB,0FACjN,eACE,GAAM,sCACH,uCACL,kBAAK,8LACL,kBAAK,iGACL,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,cAAGA,WAAW,IAC7B,KAAQ,oCACL,oCAET,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,cAAGA,WAAW,IAC7B,KAAQ,qCACL,qCAET,eAAIA,WAAW,OACb,cAAGA,WAAW,OAAK,cAAGA,WAAW,IAC7B,KAAQ,sCACL,uCAKd,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-frontend-core/./src/pages/page-builder/styles/override-pagebuilder-styles.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-frontend-core/commerce-frontend-core/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"override-page-builder-styles\"\n    }}>{`Override Page Builder styles`}</h1>\n    <p>{`To override the internal CSS styles that Page Builder applies to content types, you must create a CSS selector with a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\"\n      }}>{`specificity`}</a>{` greater than `}<inlineCode parentName=\"p\">{`110`}</inlineCode>{`, which is the selector specificity that Page Builder applies to all of its native content types and your custom content types. Page Builder's default selector pattern is shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// Specificity = 110, always\n\n#html-body  +  [data-pb-style=W3M3WHX]\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/75cd4499066f1ec7219ca136543ff81d/pagebuilder-style-selector.svg\",\n        \"alt\": \"Default style selector\"\n      }}></img></p>\n    <p><em parentName=\"p\">{`Page Builder default selector pattern`}</em></p>\n    <p>{`You can find all the details about how Page Builder styles its content types in `}<a parentName=\"p\" {...{\n        \"href\": \"index.md\"\n      }}>{`How Page Builder styles content`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"css-selector-override-pattern\"\n    }}>{`CSS selector override pattern`}</h2>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`Specificity Calculator`}</strong>{`. This calculator is an excellent resource for learning and checking the specificity of your CSS selectors: `}<a parentName=\"p\" {...{\n        \"href\": \"https://specificity.keegan.st/\"\n      }}>{`Specificity Calculator`}</a>{`.`}</p>\n    <p>{`To override Page Builder's styles, always use the following CSS selector pattern:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// Creates a specificity = 111, or greater.\n\n#html-body  +  [content-type-attribute]  +  any additional selector\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/1f011d700129e17f5f1c4f316749cf94/pagebuilder-style-override-pattern-class.svg\",\n        \"alt\": \"CSS selector override pattern\"\n      }}></img></p>\n    <p><em parentName=\"p\">{`CSS selector override pattern`}</em></p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`#html-body`}</inlineCode>{` - Start all your override selectors with this `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`#html-body`}</inlineCode>{` id is in the `}<inlineCode parentName=\"p\">{`<body>`}</inlineCode>{` element of every Adobe Commerce frontend and admin page.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`[data-content-type='my-custom']`}</inlineCode>{` - Add a content-type attribute selector next, where the `}<inlineCode parentName=\"p\">{`'my-custom'`}</inlineCode>{` is the name of the content type found in its configuration file. For example, to target the `}<inlineCode parentName=\"p\">{`Row`}</inlineCode>{` content type, your attribute selector would look like `}<inlineCode parentName=\"p\">{`[data-content-type='row']`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`Any additional selector`}</inlineCode>{` - The first two selectors match Page Builder's internal selectors with a specificity of `}<inlineCode parentName=\"p\">{`110`}</inlineCode>{`. Adding any other selector (except `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{`) will bump the specificity to `}<inlineCode parentName=\"p\">{`111`}</inlineCode>{` or higher, which overrides Page Builder's internal selector.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"css-selector-override-example\"\n    }}>{`CSS selector override example`}</h2>\n    <p>{`If you want to override just `}<em parentName=\"p\">{`one`}</em>{` of the HTML heading elements (`}<inlineCode parentName=\"p\">{`h1 - h6`}</inlineCode>{`), you would start with `}<inlineCode parentName=\"p\">{`#html-body`}</inlineCode>{` (as always), add the content type `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` attribute, then add the heading element you want to override. That combination creates a CSS specificity of `}<inlineCode parentName=\"p\">{`111`}</inlineCode>{`, just enough to override Page Builder:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`#html-body h1[data-content-type=\"heading\"] {}\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/bb4e8822d38590eceb56202a8a79e9af/pagebuilder-style-override-element-selector.svg\",\n        \"alt\": \"Page Builder style selector\"\n      }}></img></p>\n    <p>{`Again, you can override Page Builder's default styles with `}<inlineCode parentName=\"p\">{`any additional selector`}</inlineCode>{`. This keeps your CSS simple and the specificity low.`}</p>\n    <h2 {...{\n      \"id\": \"more-selector-override-examples\"\n    }}>{`More selector override examples`}</h2>\n    <p>{`In the following examples, each selector targets different DOM elements for a content type. But they all have a specificity higher than Page Builder's default of `}<inlineCode parentName=\"p\">{`110`}</inlineCode>{`:`}</p>\n    <p><strong parentName=\"p\">{`Overrides all `}<inlineCode parentName=\"strong\">{`heading`}</inlineCode>{` elements (`}<inlineCode parentName=\"strong\">{`h1 - h6`}</inlineCode>{`) for all `}<inlineCode parentName=\"strong\">{`heading`}</inlineCode>{` appearances`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// Specificity: 120\n#html-body [data-content-type=\"heading\"][data-element=\"main\"] {}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Overrides `}<inlineCode parentName=\"strong\">{`heading`}</inlineCode>{` elements (`}<inlineCode parentName=\"strong\">{`h1 - h6`}</inlineCode>{`) for the `}<inlineCode parentName=\"strong\">{`default`}</inlineCode>{` appearance`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// Specificity: 120\n#html-body [data-content-type=\"heading\"][data-appearance=\"default\"] {}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Override all `}<inlineCode parentName=\"strong\">{`Row`}</inlineCode>{` inner element styles`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`#html-body [data-content-type=\"row\"] [data-element=\"inner\"] {} // Specificity 120\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Override all `}<inlineCode parentName=\"strong\">{`Text`}</inlineCode>{` typography styles`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`#html-body [data-content-type=\"text\"] p {} // Specificity 111\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"override-content-using-css-classes\"\n    }}>{`Override content using CSS Classes`}</h2>\n    <p>{`So far, we've only used IDs, attributes, and elements to override Page Builder's CSS. But you can also use CSS classes as your overriding selector in the `}<strong parentName=\"p\">{`additional selector`}</strong>{` slot.`}</p>\n    <p>{`To override a content type using one or more custom CSS classes:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create the CSS selector.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Apply the CSS class.`}</p>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"step-1-create-the-css-selector\"\n    }}>{`Step 1: Create the CSS selector`}</h3>\n    <p>{`If your CSS class name is `}<inlineCode parentName=\"p\">{`.theme-headings`}</inlineCode>{`, the CSS selector you define in your `}<inlineCode parentName=\"p\">{`.less`}</inlineCode>{` file would look something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`#html-body [data-content-type=\"heading\"].theme-headings {}\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/59361ed74b3c7e00e6e1532372253dcf/pagebuilder-style-override-selector.svg\",\n        \"alt\": \"Page Builder style selector\"\n      }}></img></p>\n    <p><em parentName=\"p\">{`Adding theme classes to the Page Builder styling pattern`}</em></p>\n    <p>{`By adding the class to the pattern, you create a `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` selector with a specificity of `}<inlineCode parentName=\"p\">{`120`}</inlineCode>{`—which again overrides Page Builder's default specificity of `}<inlineCode parentName=\"p\">{`110`}</inlineCode>{`. All the CSS rules declared in the selector with the `}<inlineCode parentName=\"p\">{`.theme-headings`}</inlineCode>{` class will override Page Builder's equivalent rules for the `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` content type.`}</p>\n    <h3 {...{\n      \"id\": \"step-2-apply-the-css-class\"\n    }}>{`Step 2: Apply the CSS class`}</h3>\n    <p>{`The second step is to add your custom class name to the content type's form editor, specifically to the `}<strong parentName=\"p\">{`CSS Classes`}</strong>{` field.`}</p>\n    <p>{`For example, to have Page Builder apply the `}<inlineCode parentName=\"p\">{`theme-headings`}</inlineCode>{` class to a `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` on the page, you would open the `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` form editor and enter `}<inlineCode parentName=\"p\">{`theme-headings`}</inlineCode>{` (no period) in the `}<strong parentName=\"p\">{`CSS Classes`}</strong>{` field, as shown here:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/commerce-frontend-core/assets/36d0f176e0dd3abf75f410edb089a847/css-classes-field.svg\",\n        \"alt\": \"Add CSS class to content type\"\n      }}></img></p>\n    <p>{`Page Builder adds this class to the `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` element (`}<inlineCode parentName=\"p\">{`h1`}</inlineCode>{` - `}<inlineCode parentName=\"p\">{`h6`}</inlineCode>{`) in the DOM, where it is targeted and styled by your CSS class selector and ruleset.`}</p>\n    <h2 {...{\n      \"id\": \"where-to-override-page-builder-css\"\n    }}>{`Where to override Page Builder CSS`}</h2>\n    <p>{`Now that you understand Page Builder's CSS selector override pattern, as well as how to apply class names to existing Page Builder content types, it's time to put your knowledge to use.`}</p>\n    <p>{`The next three topics describe how and where you can override Page Builder's default styles:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"use-themes-to-override-styles.md\"\n          }}>{`Use Themes to override styles`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"use-modules-to-override-styles.md\"\n          }}>{`Use Modules to override styles`}</a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"use-htmlcode-to-override-styles.md\"\n          }}>{`Use HTML Code to override styles`}</a></p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}